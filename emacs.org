#+title: Emacs Configuration

* Early Init
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./early-init.el
:END:

** [[https://github.com/jamescherti/minimal-emacs.d/blob/9fdfca3265246341ab63fe790b99bd4a2f3cca6d/early-init.el#L217][Native and byte compilation]]

If Emacs is built with native compilation support, activate it¹, if not, disable it².

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  ;; 1
  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (setq native-comp-jit-compilation t
            package-native-compile t)
    ;; 2
    (setq features (delq 'native-compile features)))

#+end_src

** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#native-compilation-cache][Native Compilation Cache]]

Moves the Native Compilation Cache folder out of the Emacs base folder.

#+begin_src emacs-lisp

  (when (fboundp 'startup-redirect-eln-cache)
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))

#+end_src

** Directory Variables

Variables used to reference to specific directories, using ~convert-standard-filename~ for multiple OS support.

#+begin_src emacs-lisp

  (defcustom gs-101/projects-code-directory (convert-standard-filename (expand-file-name "~/Projects/Code/"))
    "Path for project related to code, like applications."
    :type 'directory
    )
  (defcustom gs-101/modules-directory (convert-standard-filename (expand-file-name "modules" user-emacs-directory))
    "Path for this configuration's modules."
    :type 'directory
    )

#+end_src

* Load Modules
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./init.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name gs-101/modules-directory))

  (require 'gs-package)
  (require 'gs-settings)
  (require 'gs-fm)
  (require 'gs-keys)
  (require 'gs-org)
  (require 'gs-org-roam)
  (require 'gs-citar)
  (require 'gs-cmd)
  (require 'gs-dev)
  (require 'gs-completion)
  (require 'gs-utils)
  (require 'gs-chat)
  (require 'gs-elfeed)
  ;;(require 'gs-keys-evil)
  (require 'gs-keys-meow)
  (require 'gs-ui)

#+end_src

* [[https://github.com/jamescherti/minimal-emacs.d/blob/9fdfca3265246341ab63fe790b99bd4a2f3cca6d/early-init.el#L217][Package System Set-up]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :link yes :tangle ./modules/gs-package.el
:END:

** Package

#+begin_quote

Simple package system [...].

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '(
                                   "melpa" . "https://melpa.org/packages/"
                                   ))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** use-package

#+begin_quote

A configuration macro for simplifying your .emacs.

#+end_quote

If ~use-package~ is not installed, refresh the package list and install it¹.

#+begin_src emacs-lisp

  ;; 1
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-package)
#+end_src

* Settings
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-settings.el
:END:

Configuration of default Emacs packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Default packages

*** Advice

#+begin_quote

An overloading mechanism for Emacs Lisp functions.

#+end_quote

#+begin_src emacs-lisp

  (use-package advice
    :custom
    (ad-redefinition-action 'accept)
    )

#+end_src

**** [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L104][Credits]]

*** [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/early-init.el#L20][Byte Compilation]]

#+begin_quote

The Emacs Lisp byte compiler. This crunches Lisp source into a sort of p-code (~lapcode~) which takes up less space and can be interpreted faster.

#+end_quote

#+begin_src emacs-lisp

  (use-package bytecomp
    :custom
    (byte-compile-warnings '(not obsolete))
    )

#+end_src

*** [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L104][Compilation Runtime]]

#+begin_quote

This file contains all the code needed to drive async compilations and any Lisp code needed at runtime to run native code.

#+end_quote

#+begin_src emacs-lisp

  (use-package comp-run
    :custom
    (native-comp-async-query-on-exit t)
    (native-comp-async-report-warnings-errors 'silent)
    )

#+end_src

*** Ediff Window

#+begin_quote

window manipulation utilities.

#+end_quote

#+begin_src emacs-lisp

  (use-package ediff-wind
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    )

#+end_src

*** Emacs

Generic package used to configure functions and variables not included in any Emacs Lisp files. This is mainly used for files defied in C code.

#+begin_src emacs-lisp

  (use-package emacs
    :config
    (setq define-coding-system-alias '(UTF-8 'utf-8))
    :custom
    (auto-save-include-big-deletions)
    (auto-window-vscroll nil) ;; 3
    (bidi-inhibit-bpa t) ;; 3
    (completion-ignore-case t) ;; 4
    (cursor-in-non-selected-windows nil) ;; 3
    (debugger-stack-frame-as-list t) ;; 5
    (enable-recursive-minibuffers t)
    (fast-but-imprecise-scrolling t) ;; 3
    (frame-resize-pixelwise t) ;; 1
    (history-delete-duplicates t) ;; 5
    (hscroll-margin 2) ;; 3
    (hscroll-step 1) ;; 3
    (inhibit-compacting-font-caches t) ;; 3
    (load-prefer-newer t) ;; 2
    (locale-coding-system 'utf-8)
    ;; Disable the cursor in the minibuffer prompt
    (minibuffer-prompt-properties '(
                                    cursor-intangible t
                                    read-only t
                                    face minibuffer-prompt
                                    )) ;; 4
    (read-buffer-completion-ignore-case t) ;; 4
    (read-process-output-max (* 512 1024)) ;; 3
    (resize-mini-windows 'grow-only)
    (scroll-conservatively 100000)
    (scroll-margin 2)
    (scroll-step 1)
    (text-mode-ispell-word-completion nil)
    (user-full-name "Gabriel Santos")
    (window-resize-pixelwise nil) ;; 1
    (words-include-escapes t)
    :hook
    (minibuffer-setup . cursor-intangible-mode) ;; 4
    )

#+end_src

**** Credits

1. [[https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/early-init.el][ashton]];
2. [[https://github.com/gopar/.emacs.d/blob/main/README.org#recommended-packagessnippets-to-have-as-early-as-possible][gopar]];
3. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#][jamescherti]];
4. [[https://github.com/minad/vertico?tab=readme-ov-file#configuration][minad]];
5. [[https://github.com/oantolin/emacs-config/tree/master][oantolin]].

*** EPG Configuration

#+begin_quote

Configuration of the EasyPG Library.

#+end_quote

#+begin_src emacs-lisp

  (use-package epg-config
    :custom
    (epg-pinentry-mode 'loopback)
    )

#+end_src

#+begin_src conf-unix :results none :mkdirp yes :tangle ~/.gnupg/gpg-agent.conf
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_src

*** Files

#+begin_quote

Defines most of Emacs's file- and directory-handling functions, including basic file visiting, backup generation, link handling, ITS-id version control, load- and write-hook handling, and the like.

#+end_quote

#+begin_src emacs-lisp

  (use-package files
    :config
    (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p) ;; 3
    (add-to-list 'find-file-not-found-functions #'xenodium/files-create-non-existent-directory) ;; 4
    :custom
    (auto-mode-case-fold nil)
    (backup-by-copying t) ;; 2
    (backup-by-copying-when-linked t) ;; 2
    (delete-old-versions t)
    (find-file-suppress-same-file-warnings t)
    (find-file-visit-truename t)
    (kept-new-versions 5) ;; 2
    (kept-old-versions 5) ;; 2
    (revert-without-query '("")) ;; 3
    (version-control t) ;; 2
    (view-read-only t) ;; 3
    :preface
    (defun xenodium/files-create-non-existent-directory ()
      "Create a non-existent directory."
      (when-let* ((file-name buffer-file-name)
                  (parent-directory (file-name-parent-directory file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Create `%s' dir? " parent-directory)))
          (make-directory parent-directory t))))
    )

#+end_src

**** Credits

1. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L178][jamescherti]];
2. [[https://github.com/Nathan-Furnal/dotemacs/blob/45defa98dfa7a7c401ca692e9479e588896b9261/init.el#L226][nathan-furnal]];
3. [[https://github.com/oantolin/emacs-config/tree/master][oantolin]];
4. [[https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-files.el][xenodium]].

*** Frame

#+begin_quote

Multi-frame management independent of window systems.

#+end_quote

This is just to remove the =suspend-frame= command, which I don't find useful. This liberates =C-z= to have it used as a prefix.

#+begin_src emacs-lisp

  (use-package frame
    :bind
    ("C-z" . nil)
    )

#+end_src

*** grep

#+begin_quote
run `grep' and display the results.
#+end_quote

#+begin_src emacs-lisp

  (use-package grep
    :custom
    (grep-use-headings t)
    )

#+end_src

*** Help

#+begin_quote

Help commands for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package help
    :custom
    (help-window-select t)
    )

#+end_src

*** [[https://github.com/kickingvegas/casual-ibuffer?tab=readme-ov-file#configuration][iBuffer Extensions]]

#+begin_quote

Extensions for iBuffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package ibuf-ext
    :defer t
    :hook
    (ibuffer-mode . ibuffer-auto-mode)
    )

#+end_src

*** [[https://codeberg.org/zyd/dotfiles/src/commit/e2deef9551ec259e62e19abe3a9b86feb4a5c870/emacs.d/init.el#L904][Image Mode]]

#+begin_quote

Support for visiting image files.

#+end_quote

#+begin_src emacs-lisp

  (use-package image-mode
    :after dired
    :custom
    (image-animate-loop t)
    )

#+end_src

*** [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L232][iMenu]]

#+begin_quote

Purpose of this package:

- To present a framework for mode-specific buffer indexes;
- A buffer index is an alist of names and buffer positions.

#+end_quote

#+begin_src emacs-lisp

  (use-package imenu
    :custom
    (imenu-flatten 'annotation)
    (imenu-space-replacement nil)
    )

#+end_src

*** Indent

#+begin_quote

Commands for making and changing indentation in text. These are described in the Emacs manual.

#+end_quote

#+begin_src emacs-lisp

  (use-package indent
    :custom
    (tab-always-indent 'complete)
    :defer t
    )

#+end_src

*** iSearch

#+begin_quote

Incremental search minor mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package isearch
    :custom
    (isearch-allow-scroll t)
    (isearch-lazy-count t)
    (lazy-count-prefix-format "(%s/%s) ")
    (lazy-count-suffix-format nil)
    (lazy-highlight-initial-delay 0.0)
    )

#+end_src

*** Minibuffer

#+begin_src emacs-lisp

  (use-package minibuffer
    :custom
    (completions-detailed t) ;; 1
    (completions-format 'vertical)
    (completions-group t) ;; 1
    (read-file-name-completion-ignore-case t) ;; 2
    (resize-mini-windows t)
    :init
    (minibuffer-depth-indicate-mode)
    (minibuffer-electric-default-mode)
    )

#+end_src

**** Credits

1. [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/init.el#L107][ashton314]];
2. [[https://github.com/minad/vertico?tab=readme-ov-file#completion-styles-and-tab-completion][minad]].

*** Mouse

#+begin_quote

This package provides various useful commands (including help system access) through the mouse.  All this code assumes that mouse interpretation has been abstracted into Emacs input events.

#+end_quote

#+begin_src emacs-lisp

  (use-package mouse
    :custom
    (mouse-yank-at-point t)
    )

#+end_src

*** Mule

Multilingual Enviroment.

#+begin_src emacs-lisp

  (use-package mule
    :config
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    :defer t
    )

#+end_src

**** Cmds

#+begin_quote

Commands for Multilingual Enviroment.

#+end_quote

#+begin_src emacs-lisp

  (use-package mule-cmds
    :config
    (set-language-environment 'utf-8)
    (prefer-coding-system 'utf-8)
    :custom
    (current-language-environment "UTF-8") ;; 2
    (default-input-method nil) ;; 1
    :defer t
    )

#+end_src

***** Credits

1. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L65][jamescherti]];
2. [[https://github.com/oantolin/emacs-config/blob/master/init.el][oantolin]].

**** Util

#+begin_quote

Utility functions for Multilingual Enviroment.

#+end_quote

#+begin_src emacs-lisp

  (use-package mule-util
    :custom
    (truncate-string-ellipsis "…")
    )

#+end_src

*** New Comment

#+begin_quote

(un)comment regions of buffers.

#+end_quote

#+begin_src emacs-lisp

  (use-package newcomment
    :custom
    (comment-empty-lines t)
    )

#+end_src

*** Paren

#+begin_quote

Highlight matching paren.

#+end_quote

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match nil :box '(:line-width (-1 . -1)))
    :custom
    (show-paren-delay 0)
    :init
    (show-paren-mode)
    )

#+end_src

*** Password

**** Cache

#+begin_quote

Read passwords, possibly using a password cache.

#+end_quote

#+begin_src emacs-lisp

  (use-package password-cache
    :custom
    (password-cache-expiry 60)
    )

#+end_src

*** Pixel Scroll

#+begin_quote

Scroll a line smoothly.

#+end_quote

#+begin_src emacs-lisp

  (use-package pixel-scroll
    :init
    (pixel-scroll-precision-mode)
    )

#+end_src

*** Save History

#+begin_quote

Save minibuffer history.

#+end_quote

#+begin_src emacs-lisp

  (use-package savehist
    :custom
    (history-length 300)
    :init
    (savehist-mode)
    )

#+end_src

*** Send Mail

#+begin_quote

This mode provides mail-sending facilities from within Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package sendmail
    :custom
    (sendmail-program "msmtp")
    :defer t
    )

#+end_src

*** Simple

#+begin_quote

A grab-bag of basic Emacs commands not specifically related to some major mode or to file-handling.

#+end_quote

#+begin_src emacs-lisp

  (use-package simple
    :custom
    (blink-matching-paren nil)
    (column-number-mode t)
    (completion-auto-select 'second-tab) ;; 1
    (indent-tabs-mode nil)
    (kill-do-not-save-duplicates t) ;; 5
    (kill-read-only-ok t) ;; 5
    (kill-region-dwim 'emacs-word)
    (kill-whole-line t) ;; 5
    ;; Hides commands in completion that are not usable in the current mode
    (read-extended-command-predicate #'command-completion-default-include-p) ;; 4
    (save-interprogram-paste-before-kill t)
    (set-mark-command-repeat-pop t) ;; 5
    )

#+end_src

**** Credits

1. [[https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/early-init.el][ashton]];
2. [[https://github.com/gopar/.emacs.d/blob/main/README.org#simple][gopar]];
3. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L112][jamescherti]];
4. [[https://github.com/minad/vertico?tab=readme-ov-file#configuration][minad]];
5. [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L55][oantolin]].

*** Transient

#+begin_quote

Transient is the library used to implement the keyboard-driven menus in Magit.

#+end_quote

#+begin_src emacs-lisp

  (use-package transient
    :custom
    (transient-mode-line-format nil)
    )

#+end_src

*** Undo Limit

After losing one hour of work on an accident, this might come in handy.

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (undo-limit 67108864) ;; 64 mb
    (undo-strong-limit 100663296) ;; 96 mb
    (undo-outer-limit 1006632960) ;; 960 mb
    )

#+end_src

*** Uniquify

#+begin_quote

Unique buffer names dependent on file name.

#+end_quote

#+begin_src emacs-lisp

  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward)
    )

#+end_src

*** [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L71][use-package]]

#+begin_quote

A configuration macro for simplifying your .emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package use-package
    :custom
    (use-package-compute-statistics t)
    (use-package-enable-imenu-support t)
    (use-package-vc-prefer-newest t)
    )

#+end_src

*** [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/early-init.el#L21][Warnings]]

#+begin_quote

Log and display warnings.

#+end_quote

#+begin_src emacs-lisp

  (use-package warnings
    :custom
    (warning-suppress-log-types '((comp) (bytecomp)))
    )

#+end_src

**** [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L104][Credits]]

** Third-Party Packages

Packages which I think should be part of Emacs core.

*** [[https://github.com/aurtzy/disproject/tree/ad0d9a6f591b4ae13bd1dff006d3a4c776cee395][Disproject]]

#+begin_quote

Transient interface for managing and interacting with projects.

#+end_quote

#+begin_src emacs-lisp

  (use-package disproject
    :bind
    (
     :map ctl-x-map
     ("p" . disproject-dispatch)
     )
    :ensure t
    )

#+end_src

*** [[https://github.com/emacsmirror/gcmh][Garbage Collector Magic Hack]]

#+begin_quote

Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.

#+end_quote

#+begin_src emacs-lisp

  (use-package gcmh
    :ensure t
    :init
    (gcmh-mode)
    )

#+end_src

*** [[https://github.com/jrblevin/markdown-mode][Markdown]]

#+begin_quote

Emacs Markdown Mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package markdown-mode
    :defer t
    :ensure t
    :custom
    (markdown-fontify-code-blocks-natively t)
    :hook
    (markdown-mode . visual-line-mode)
    )

#+end_src

*** [[https://github.com/emacscollective/no-littering][No Littering]]

#+begin_quote

The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isn’t just a problem with third-party packages but even with built-in packages.

#+end_quote

#+begin_src emacs-lisp

  (use-package no-littering
    :ensure t
    :init
    (no-littering-theme-backups)
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering#lock-files][Lock Files]]

#+begin_src emacs-lisp

  (use-package no-littering
    :after no-littering
    :config
    (let ((dir (no-littering-expand-var-file-name "lock-files/")))
      (make-directory dir t)
      (setq lock-file-name-transforms `((".*" ,dir t))))
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#recent-files][Recent Files]]

#+begin_quote

Keep track of recently opened files.

#+end_quote

#+begin_src emacs-lisp

  (use-package recentf
    :after no-littering
    :custom
    (recentf-max-saved-items 1000)
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory)
                 (recentf-expand-file-name no-littering-var-directory))
    :config
    (recentf-mode)
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#saved-customizations][Saved Customizations]]

#+begin_src emacs-lisp

  (use-package no-littering
    :after no-littering
    :config
    (when (file-exists-p custom-file)
      (load-file custom-file))
    :custom
    (custom-file (no-littering-expand-etc-file-name "custom.el"))
    )

#+end_src

*** [[https://github.com/abougouffa/one-tab-per-project][One Tab Per Project]]

#+begin_quote

Automatically create a tab per project, providing a light tab-bar based workspace management for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package otpp
    :after project
    :config
    (otpp-mode)
    (otpp-override-mode)
    :ensure t
    )

#+end_src

*** [[https://github.com/purcell/exec-path-from-shell][Path from Shell]]

#+begin_quote

Make Emacs use the $PATH set up by the user's shell.

#+end_quote

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :init
    (setq exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize)
    )

#+end_src

*** [[https://karthinks.com/software/fifteen-ways-to-use-embark/#open-a-file-as-root-without-losing-your-session][Sudo Command]]

Like [[https://github.com/nflath/sudo-edit][sudo-edit]], but just a single, non-packaged command.

#+begin_src emacs-lisp

  (use-package emacs
    :init
    (defun karthinks/sudo-find-file (file)
      "Open FILE as root."
      (interactive "FOpen file as root: ")
      (when (file-writable-p file)
        (user-error "File is user-writable, aborting sudo"))
      (find-file (if (file-remote-p file)
                     (concat "/" (file-remote-p file 'method) ":"
                             (file-remote-p file 'user) "@" (file-remote-p file 'host)
                             "|sudo@root@"
                             (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                   (concat "/sudo:root@localhost:" file))))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-settings)
#+end_src

* File Management
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-fm.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Autorevert

#+begin_quote

Whenever a file that Emacs is editing has been changed by another program the user normally has to execute the command ~revert-buffer~ to load the new content of the file into Emacs.
This package contains two minor modes: Global Auto-Revert Mode and Auto-Revert Mode. Both modes automatically revert buffers whenever the corresponding files have been changed on disk and the buffer contains no unsaved changes.

#+end_quote

#+begin_src emacs-lisp

  (use-package autorevert
    :custom
    (auto-revert-stop-on-user-input nil)
    (auto-revert-verbose nil)
    (global-auto-revert-non-file-buffers t)
    :init
    (global-auto-revert-mode t)
    :preface
    (add-to-list 'window-state-change-functions
                 (defun xenodium/window-state-state-change (state)
                   "Enable `global-auto-revert-mode' per active window."
                   (let* ((old-selected-window (old-selected-window))
                          (old-buffer (when old-selected-window
                                        (window-buffer old-selected-window)))
                          (selected-window (selected-window))
                          (new-buffer (when selected-window
                                        (window-buffer selected-window))))
                     (when old-buffer
                       (with-current-buffer old-buffer
                         (when buffer-file-name
                           (auto-revert-mode -1))))
                     (when new-buffer
                       (with-current-buffer new-buffer
                         (when buffer-file-name
                           (auto-revert-mode +1)))))))
    )

#+end_src

*** [[https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-files.el][Credits]]

** Dired

#+begin_quote

[...] major mode for directory browsing and editing.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired
    :custom
    (dired-auto-revert-buffer t)
    (dired-clean-confirm-killing-deleted-buffers nil)
    (dired-dwim-target t)
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-listing-switches "-agho --group-directories-first") ;;1
    (dired-mouse-drag-files t)
    (dired-recursive-copies 'always)
    :defer t
    )

#+end_src

*** Credits

1. [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#configuration][daviwil]];
2. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/init.el#L336][jamescherti]].

*** Auxiliary

#+begin_quote

Less commonly used parts of Dired.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired-aux
    :after dired
    :custom
    (dired-do-revert-buffer t)
    )

#+end_src

*** Async

#+begin_quote

Asynchronous dired actions.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired-async
    :hook
    (dired-mode . dired-async-mode)
    )

#+end_src

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (delete-by-moving-to-trash t)
    )

#+end_src

** Mouse

#+begin_src emacs-lisp

  (use-package mouse
    :custom
    (mouse-drag-and-drop-region-cross-program t)
    )

#+end_src

** [[https://depp.brause.cc/nov.el/][nov.el]]

#+begin_quote

Major mode for reading EPUBs in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package nov
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/xenodium/ready-player][Ready Player Mode]]

#+begin_quote

A lightweight major mode to open media (audio/video) files in an Emacs buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package ready-player
    :custom
    (ready-player-previous-icon "󰒮")
    (ready-player-play-icon "󰐊")
    (ready-player-stop-icon "󰓛")
    (ready-player-next-icon "󰒭")
    (ready-player-search-icon "󰍉")
    (ready-player-set-global-bindings nil)
    (ready-player-shuffle-icon "󰒝")
    (ready-player-open-externally-icon "󰒖")
    (ready-player-repeat-icon "󰑖")
    (ready-player-autoplay-icon "󰼛")
    :ensure t
    :hook
    (dired-mode . ready-player-mode)
    )

#+end_src

** [[https://github.com/protesilaos/show-font][Show Font]]

#+begin_quote

Show font features in an Emacs buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package show-font
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-fm)
#+end_src

* Key Binding
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys.el
:END:

Key bindings for default packages.

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][Key Binding Conventions]]

#+begin_quote

- Don't define C-c letter as a key in Lisp programs. Sequences consisting of C-c and a letter (either upper or lower case; ASCII or non-ASCII) are reserved for users [...];
- Function keys F5 through F9 without modifier keys are also reserved for users to define.
- Sequences consisting of C-c followed by a control character or a digit are reserved for major modes;
- Sequences consisting of C-c followed by {, }, <, >, : or ; are also reserved for major modes;
- Sequences consisting of C-c followed by any other ASCII punctuation or symbol character are allocated for minor modes [...];
- Don't bind C-h following any prefix character (including C-c);
- [...] don't bind a key sequence ending in C-g, since that is commonly used to cancel a key sequence.

#+end_quote

** [[./notes/keys_dired.org][Dired Bindings]]

** [[./notes/keys_window_management.org][Window Management Bindings]]

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Align

#+begin_src emacs-lisp

  (use-package align
    :bind
    ("C-x |" . align-regexp)
    )

#+end_src

** Apropos

#+begin_src emacs-lisp

  (use-package apropos
    :bind
    ("<f1> a" . apropos)
    ("<f1> A" . apropos-documentation)
    )

#+end_src

** Custom

#+begin_src emacs-lisp

  (use-package custom
    :bind
    ("<f1> t" . load-theme)
    )

#+end_src

** Describe Text

#+begin_src emacs-lisp

  (use-package descr-text
    :bind
    ("<f1> '". describe-char)
    )

#+end_src

** Development

*** Compile

#+begin_src emacs-lisp

  (use-package compile
    :bind
    ("C-c c c" . compile)
    ("C-c c C" . recompile)
    )

#+end_src

*** Eglot

#+begin_src emacs-lisp

  (use-package eglot
    :bind
    (
     :map prog-mode-map
     ("C-c t e" . eglot)
     :map eglot-mode-map
     ("C-c e a" . eglot-code-actions)
     ("C-c e o" . eglot-code-action-organize-imports)
     ("C-c e i" . eglot-find-implementation)
     ("C-c e t" . eglot-find-typeDefinition)
     ("C-c e f" . eglot-format)
     ("C-c e r" . eglot-rename)
     )
    )

#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp

  (use-package elisp-mode
    :bind
    (
     :map emacs-lisp-mode-map
          ("C-c m C-b" . elisp-byte-compile-buffer)
          ("C-c m e d" . eval-defun)
          ("C-c m C-e" . elisp-eval-region-or-buffer)
          )
    )

#+end_src

**** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :bind
    (
     :map emacs-lisp-mode-map
     ("C-c C-c" . gs-101/eval-dwim)
     ("C-c m e b" . eval-buffer)
     ("C-c m e r" . eval-region)
     ("C-c C-p" . ielm)
     )
    :config
    (defun gs-101/eval-dwim ()
      "Evaluate region if it is active; if not, evaluate the buffer.
  If the region is active, this function calls `eval-region'.
  Otherwise, it calls `eval-buffer'."
      (interactive)
      (if (use-region-p)
          (eval-region (region-beginning) (region-end) t)
        (eval-buffer nil nil)))
    )

#+end_src

**** Files

#+begin_src emacs-lisp

  (use-package files
    :bind
    (
     :map  emacs-lisp-mode-map
           ("C-c m l" . load-library)
           )
    )

#+end_src

**** Find Functions

#+begin_src emacs-lisp

  (use-package find-func
    :bind
    (
     :map emacs-lisp-mode-map
     ("C-c m g f" . find-function)
     ("C-c m g l" . find-library)
     ("C-c m g v" . find-variable)
     )
    )

#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package flymake
    :bind
    (
     :map flymake-mode-map
     ([remap next-error] . flymake-goto-next-error)
     ([remap previous-error] . flymake-goto-prev-error)
     :map project-prefix-map
     ("t f" . flymake-show-project-diagnostics)
     :map prog-mode-map
     ("C-c t f" . flymake-start)
     )
    )

#+end_src

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :bind
    ("C-c q f" . delete-frame)
    ("C-c i c" . insert-char)
    )

#+end_src

** Emoji

#+begin_src emacs-lisp

  (use-package emoji
    :bind
    ("C-c i e" . emoji-insert)
    )

#+end_src

** Files

#+begin_src emacs-lisp

  (use-package files
    :bind
    ("C-c f r" . recover-this-file)
    ("C-c b r" . revert-buffer)
    ("C-c q r" . restart-emacs)
    ("C-c q K" . save-buffers-kill-emacs)
    )

#+end_src

** Find Function

#+begin_src emacs-lisp

  (use-package find-func
    :bind
    ("<f1> P" . find-library)
    )

#+end_src

** Git

#+begin_src emacs-lisp

  (use-package vc-git
    :bind
    ("M-s g v" . vc-git-grep)
    )

#+end_src

** Grep

#+begin_src emacs-lisp

  (use-package grep
    :bind
    ("M-s g g" . grep)
    ("M-s g l" . lgrep)
    ("M-s g r" . rgrep)
    )

#+end_src

** Help

#+begin_src emacs-lisp

  (use-package help
    :bind
    ("<f1> M" . describe-minor-mode)
    ("C-h C-b" . describe-prefix-bindings)
    )

#+end_src

** Help Functions

#+begin_src emacs-lisp

  (use-package help-fns
    :bind
    ("<f1> F" . describe-face)
    )

#+end_src

** iBuffer

#+begin_src emacs-lisp

  (use-package ibuffer
    :bind
    ("C-x B" . ibuffer)
    )

#+end_src

** Org Mode

#+begin_src emacs-lisp

  (use-package org
    :bind
    (
     :map org-mode-map
     ([remap down-list] . org-next-visible-heading)
     ([remap backward-up-list] . org-previous-visible-heading)
     ([remap org-narrow-to-subtree] . org-toggle-narrow-to-subtree)
     ([remap save-buffer] . org-save-all-org-buffers)
     ("M-p" . org-move-subtree-up)
     ("M-n" . org-move-subtree-down)
     ("C-c m s e" . org-sort-entries)
     )
    )

#+end_src

*** [[https://github.com/daviwil/dotfiles/blob/f5e2ff06e72f2f92ab53c77a98900476274cb3ee/.emacs.d/modules/dw-workflow.el#L52][Agenda]]

#+begin_src emacs-lisp

  (use-package org-agenda
    :bind
    ("C-c o a" . org-agenda)
    (
     :map org-mode-map
     ("C-c m m" . (lambda ()
                      (interactive)
                      ;; Filter tasks by tag
                      (org-tags-view t)))
     )
    )

#+end_src

*** Clock

#+begin_src emacs-lisp

  (use-package org-clock
    :bind
    (
     :map org-mode-map
     ("C-c m c" . org-clock-in-last)
     ("C-c m C" . org-clock-cancel)
     )
    )

#+end_src

*** Export

#+begin_src emacs-lisp

  (use-package ox
    :bind
    (
     :map org-mode-map
     ("C-c m x" . org-export-dispatch)
     )
    )

#+end_src

*** Keys

#+begin_src emacs-lisp

  (use-package org-keys
    :custom
    (org-use-speed-commands t)
    )

#+end_src

*** Links

#+begin_src emacs-lisp

  (use-package ol
    :bind
    (
     :map org-mode-map
     ("C-c m l i" . org-insert-link)
     ("C-c m l s" . org-store-link)
     )
    )

#+end_src

*** List

#+begin_src emacs-lisp

  (use-package org-list
    :bind
    (
     :map org-mode-map
     ("C-c m s l" . org-sort-list)
     )
    )

#+end_src

*** Refile

#+begin_src emacs-lisp

  (use-package org-refile
    :bind
    (
     :map org-mode-map
     ("C-c m r" . org-refile)
     )
    )

#+end_src

*** Table

#+begin_src emacs-lisp

  (use-package org-table
    :bind
    (
     :map org-mode-map
     ("C-c m -" . org-table-insert-hline)
     )
    )

#+end_src

** Paragraphs

#+begin_src emacs-lisp

  (use-package paragraphs
    :bind
    ("M-h" . mark-paragraph)
    )

#+end_src

** Profiler

#+begin_src emacs-lisp

  (use-package profiler
    :bind
    ("<f1> T" . profiler-start)
    )

#+end_src

** Repeat Mode

#+begin_quote

Convenient way to repeat the previous command.

#+end_quote

#+begin_src emacs-lisp

  (use-package repeat
    :init
    (repeat-mode)
    )

#+end_src

** Sort

#+begin_src emacs-lisp

  (use-package sort
    :bind
    ("C-c l d" . delete-duplicate-lines)
    )

#+end_src

** Simple

#+begin_src emacs-lisp

  (use-package simple
    :bind
    ("C-c c w"  . delete-trailing-whitespace)
    ("M-g M-c" . gs-101/switch-to-minibuffer-dwim)
    ("C-?" . undo-redo)
    ("M-\\" . nil) ;; unbind `delete-horizontal-space', use `cycle-spacing' instead
    ([remap capitalize-word] . capitalize-dwim)
    ([remap upcase-word] . upcase-dwim)
    ([remap downcase-word] . downcase-dwim)
    :config
    (defun gs-101/switch-to-minibuffer-dwim ()
      "Switch to minibuffer in a regular window. In minibuffer, switch to previous window.
  If currently in the minibuffer, this function calls `previous-window-any-frame'.
  Otherwise, it calls `switch-to-minibuffer'."
      (interactive)
      (if (minibufferp)
          (previous-window-any-frame)
        (switch-to-minibuffer)))
    )

#+end_src

** Shell

#+begin_src emacs-lisp

  (use-package shell
    :bind
    ("C-c t s" . shell)
    )

#+end_src

** [[https://github.com/kickingvegas/casual][Casual]]

#+begin_quote

A collection of opinionated keyboard-driven user interfaces for various built-in Emacs modes.

#+end_quote

#+begin_src emacs-lisp

  (use-package casual
    :ensure t
    )

#+end_src

*** Agenda

#+begin_src emacs-lisp

  (use-package casual-agenda
    :bind
    (
     :map org-agenda-mode-map
     ("J" . bookmark-jump)
     ("M-o" . casual-agenda-tmenu)
     ("M-j" . org-agenda-clock-goto)
     )
    )

#+end_src


*** Bookmarks

#+begin_src emacs-lisp

  (use-package casual-bookmarks
    :bind
    (
     :map bookmark-bmenu-mode-map
     ("J" . bookmark-jump)
     ("M-o" . casual-bookmarks-tmenu)
     )
    :config
    (easy-menu-add-item global-map '(menu-bar)
                        casual-bookmarks-main-menu
                        "Tools")
    )

#+end_src

*** Calc

#+begin_src emacs-lisp

  (use-package casual-calc
    :bind
    (
     :map calc-alg-map
     ("M-o" . casual-calc-tmenu)
     :map calc-mode-map
     ("M-o" . casual-calc-tmenu)
     )
    )

#+end_src


*** Dired

#+begin_src emacs-lisp

  (use-package casual-dired
    :bind
    (
     :map dired-mode-map
     ("/" . casual-dired-search-replace-tmenu)
     ("s" . casual-dired-sort-by-tmenu)
     ("M-o" . casual-dired-tmenu)
     )
    :config
    (defun kv/casual-dired-context-menu-addons (menu click)
      "Customize context Menu with CLICK event."
      (easy-menu-add-item menu nil casual-dired-sort-menu)
      menu)
    :hook
    (context-menu-functions . kv/casual-dired-context-menu-addons)
    )

#+end_src

*** EditKit

#+begin_src emacs-lisp

  (use-package casual-editkit
    :bind
    ("M-o" . casual-editkit-main-tmenu)
    )

#+end_src

*** iBuffer

#+begin_src emacs-lisp

  (use-package casual-ibuffer
    :bind
    (
     :map ibuffer-mode-map
     ("F" . casual-ibuffer-filter-tmenu)
     ("s" . casual-ibuffer-sortby-tmenu)
     ("M-o" . casual-ibuffer-tmenu)
     ("]" . ibuffer-forward-filter-group)
     ("[" . ibuffer-backward-filter-group)
     ("}" . ibuffer-forward-next-marked)
     ("{" . ibuffer-backwards-next-marked)
     ("$" . ibuffer-toggle-filter-group)
     )
    )

#+end_src

*** Info

#+begin_src emacs-lisp

  (use-package casual-info
    :bind
    (
     :map Info-mode-map
     ("B" . bookmark-set)
     ("n" . casual-info-browse-forward-paragraph)
     ("p" . casual-info-browse-backward-paragraph)
     ("M-o" . casual-info-tmenu)
     ("M-]" . Info-history-forward)
     ("M-[" . Info-history-back)
     ("l" . Info-next)
     ("h" . Info-prev)
     ("j" . Info-next-reference)
     ("k" . Info-prev-reference)
     ("/" . Info-search)
     )
    )

#+end_src

*** iSearch

#+begin_src emacs-lisp

  (use-package casual-isearch
    :bind
    (
     :map isearch-mode-map
     ("M-o" . casual-isearch-tmenu)
     )
    )

#+end_src

*** RE-Builder

#+begin_src emacs-lisp

  (use-package casual-re-builder
    :bind
    (
     :map reb-mode-map
     ("M-o" . casual-re-builder-tmenu)
     :map reb-lisp-mode-map
     ("M-o" . casual-re-builder-tmenu)
     )
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-keys)
#+end_src

* Org Mode
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-org.el
:END:

#+begin_quote

Org is a mode for keeping notes, maintaining ToDo lists, and doing project planning with a fast and effective plain-text system.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-adapt-indentation t)
    (org-auto-align-tags nil)
    (org-directory (convert-standard-filename (expand-file-name "~/Documents/Org")))
    (org-format-latex-options '(
                                :foreground default
                                :background nil
                                :scale 1.0
                                :html-foreground "Black"
                                :html-background "Transparent"
                                :html-scale 1.0
                                :matchers
                                ("begin" "$1" "$" "$$" "\\(" "\\[")
                                ))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-reverse-note-order t)
    (org-startup-indented t)
    (org-tags-column 0)
    (org-todo-repeat-to-state t)
    (org-use-sub-superscripts '{})
    :hook
    (org-mode . variable-pitch-mode)
    (org-mode . visual-line-mode)
    )

#+end_src

** Startup

#+begin_src emacs-lisp

  (use-package startup
    :custom
    (initial-major-mode 'org-mode)
    :defer t
    )

#+end_src

** Babel

#+begin_src emacs-lisp

  (use-package org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (C . t)
       (css . t)
       (emacs-lisp . t)
       (java . t)
       (js . t)
       (latex . t)
       (python . t)
       (shell . t)
       (sql . t)
       ))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)
    )

#+end_src

*** C#

#+begin_src emacs-lisp

  (use-package ob-csharp
    :vc (:url "https://github.com/samwdp/ob-csharp")
    :after org
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(csharp . t))
    )

#+end_src

** Agenda

#+begin_quote

Dynamic task and appointment lists for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-agenda
    :custom
    (org-agenda-custom-commands
     '((
        "d" "Daily Agenda"
        (
         (agenda ""
                 ((org-agenda-overriding-header "* High Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#A"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))

         (agenda ""
                 ((org-agenda-overriding-header "* Medium Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#B"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))

         (agenda ""
                 ((org-agenda-overriding-header "* Low Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#C"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))
         )
        )
       ))
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-start-with-log-mode t)
    (org-agenda-tags-column 0)
    (org-agenda-window-setup 'only-window)
    )

#+end_src

*** Collapsable Headers

#+begin_src emacs-lisp

  (use-package org-agenda
    :hook
    (org-agenda-mode . mlk/org-agenda-fold)
    :preface
    (defun mlk/org-agenda-fold()
      "Fold headers of the agenda starting with \"* \"."
      (interactive)
      (setq-local outline-regexp "^\\* ")
      (setq-local outline-heading-end-regexp "\n")
      (setq-local outline-minor-mode-prefix (kbd "C-'"))
      (outline-minor-mode)
      (local-set-key outline-minor-mode-prefix outline-mode-prefix-map)
      (org-defkey org-agenda-mode-map [(tab)] #'outline-toggle-children)
      )
    )

#+end_src

- [[https://reddit.com/r/emacs/comments/1fjnqgy/weekly_tips_tricks_c_thread/][Credits]]

*** Org Habit

#+begin_quote

The habit tracking code for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-habit
    :custom
    (org-habit-graph-column 100)
    )

#+end_src

** Clock

#+begin_quote

The time clocking code for Org mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-clock
    :custom
    (org-clock-clocked-in-display 'frame-title)
    (org-clock-persist t)
    (org-clock-report-include-clocking-task t)
    )

#+end_src

** Compat

#+begin_quote

This file contains code needed for compatibility with older versions of GNU Emacs and integration with other packages.

#+end_quote

Support for standard YouTube links is also included, translating them to embbeded links in export.

#+begin_src emacs-lisp

  (use-package org-compat
    :config
    (org-add-link-type
     "youtube"
     (lambda (handle)
       (browse-url (concat "https://www.youtube.com/watch?v=" handle)))
     (lambda (path desc backend)
       (cl-case backend
         (html (format
                "<p style='text-align:center;'>
  <iframe width='420' height='315' align='middle'
  src='https://youtube.com/embed/W4LxHn5Y_l4?controls=0'
  allowFullScreen>
  </iframe>
  </p>"
                path (or desc "")))
         (latex (format "\href{%s}{%s}" path (or desc "video"))))))
    :custom
    (org-fold-catch-invisible-edits 'show-and-error)
    )

#+end_src

- [[https://github.com/xenodium/dotsies/blob/75f29e9d9d8f1aaebe1671b19614bb1e6bc5aac3/emacs/ar/ar-org-export-init.el#L37][Credits]]

** Cycle

#+begin_quote

Visibility cycling of Org entries.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-cycle
    :custom
    (org-cycle-emulate-tab 'whitestart)
    )

#+end_src

** Latex

#+begin_quote

LaTeX Backend for Org Export Engine.

#+end_quote

#+begin_src emacs-lisp

  (use-package ox-latex
    :custom
    (org-latex-tables-centered nil)
    (org-latex-toc-command "\\tableofcontents \\pagebreak")
    (org-startup-with-latex-preview t)
    (org-preview-latex-default-process 'dvisvgm) ;; 1
    (org-preview-latex-image-directory (convert-standard-filename (expand-file-name "ltximg/" temporary-file-directory)))
    :config
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    :defer t
    )

#+end_src

1. ~dvipng~ doesn't work for me for some reason.

*** Packages to install

**** Fedora

#+begin_src bash

  sudo dnf install texlive-collection-basic texlive-bookmark texlive-cancel texlive-chemfig texlive-circuitikz texlive-dvipng texlive-dvisvgm texlive-stackengine texlive-pgfplots texlive-mlmodern texlive-titling texlive-hyphenat

#+end_src

** List

#+begin_quote

Plain lists for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-list
    :custom
    (org-list-allow-alphabetical t)
    )

#+end_src

** Modules

#+begin_src emacs-lisp

  (use-package org
    :config
    (add-to-list 'org-modules '(
                                org-habit
                                org-id
                                org-protocol
                                ))
    )

#+end_src

** Refile

#+begin_quote

Org refile allows you to refile subtrees to various locations.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-refile
    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    :custom
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '(
                          (nil :maxlevel . 1)
                          (org-agenda-files :maxlevel . 1)
                          ))
    (org-refile-use-outline-path t)
    )

#+end_src

** TODOs

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-todo-keywords '(
                         (sequence
                          "TODO(t)"
                          "WRITE(W)"
                          "WAIT(w!)"
                          "|"
                          "DONE(d!)"
                          "BACKLOG(b)"
                          "CANCELLED(c@)"
                          )
                         (sequence
                          "GOAL(g)"
                          "PROJ(p)"
                          "|"
                          "DONE(d!)"
                          )
                         (sequence
                          "FIX(f@)"
                          "FEAT(F@)"
                          "STYLE(s)"
                          "REFACTOR(r)"
                          "CHORE(C@)"
                          "|"
                          "MERGED(m)"
                          "CLOSED(x@)"
                          )
                         ))
    )

#+end_src

** Source

#+begin_src emacs-lisp

  (use-package org-src
    :custom
    (org-src-window-setup 'current-window)
    )

#+end_src

** [[https://github.com/io12/org-fragtog][Fragtog]]

#+begin_quote

Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-fragtog
    :ensure t
    :hook
    (org-mode . org-fragtog-mode)
    )

#+end_src

** [[https://github.com/awth13/org-appear][Appear]]

#+begin_quote

Toggle visibility of hidden Org mode element parts upon entering and leaving an element.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-appear
    :custom
    (org-appear-autoentities t)
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    :ensure t
    :hook
    (org-mode . org-appear-mode)
    )

#+end_src

** [[https://github.com/nobiot/org-remark][Remark]]

#+begin_quote

Highlight & annotate text, EWW, Info, and EPUB.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-remark
    :bind
    (
     :map org-remark-mode-map
     ("C-z M m" . org-remark-mark)
     ("C-z M o" . org-remark-open)
     ("C-z M ]" . org-remark-view-next)
     ("C-z M [" . org-remark-view-prev)
     ("C-z M d" . org-remark-delete)
     )
    :ensure t
    :config
    (org-remark-global-tracking-mode)
    )

#+end_src

*** EWW

#+begin_src emacs-lisp

  (use-package org-remark-eww
    :hook
    (eww-mode . org-remark-eww-mode)
    )

#+end_src

*** Info

#+begin_src emacs-lisp

  (use-package org-remark-info
    :hook
    (info-mode . org-remark-info-mode)
    )

#+end_src

*** nov.el

#+begin_src emacs-lisp

  (use-package org-remark
    :hook
    (nov-mode . org-remark-nov-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-org)
#+end_src

* [[https://github.com/org-roam/org-roam][Org Roam]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-org-roam.el
:END:

#+begin_quote

Rudimentary Roam replica with Org-mode.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

REFACTOR: Separate ~use-package org-roam~ into its different files.

#+begin_src emacs-lisp

  (use-package org-roam
    :bind
    ("C-z r f" . org-roam-node-find)
    (
     :map org-mode-map
     ("C-z r i" . org-roam-node-insert)
     )
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory (convert-standard-filename (expand-file-name "~/Documents/Org Roam")))
    :demand t
    :ensure t
    :init
    (org-roam-db-autosync-mode)
    )

#+end_src

** Capture templates

#+begin_src emacs-lisp

            (use-package org-roam
              :custom
              (org-roam-capture-templates '(
                                            ("d" "default" plain
                                             (file "~/Documents/Org Roam/Templates/default.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
                                             :unnarrowed t)
                                            ("p" "padrão" plain
                                             (file "~/Documents/Org Roam/Templates/padrão.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
                                             :unnarrowed t)
                                            ("n" "notegpt.io" plain
                                             (file "~/Documents/Org Roam/Templates/notegpt.io.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :notegpt_io:hacker_news:\n\n")
                                             :unnarrowed t)
                                            ("r" "redação" plain
                                             (file "~/Documents/Org Roam/Templates/redação.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :redação:\n\n")
                                             :unnarrowed t)
                                            ("s" "summarize.ing" plain
                                             (file "~/Documents/Org Roam/Templates/summarize.ing.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :summarize_ing:\n\n")
                                             :unnarrowed t)
                                            ))
              )

#+end_src

** Dailies

#+begin_src emacs-lisp

  (use-package org-roam-dailies
    :bind-keymap
    ("C-z r d" . org-roam-dailies-map)
    :bind
    (
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)
     ("T" . org-roam-dailies-capture-tomorrow)
     )
    :custom
    (dw/daily-note-filename "%<%Y-%m-%d>.org")
    (dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    )

#+end_src

*** [[https://github.com/daviwil/dotfiles/blob/f5e2ff06e72f2f92ab53c77a98900476274cb3ee/.emacs.d/modules/dw-workflow.el#L243][Capture templates]]

#+begin_src emacs-lisp

  (use-package org-roam-dailies
    :after org-roam-dailies
    :custom
    (org-roam-dailies-capture-templates '(
                                          ("d" "default" entry
                                           "* %?"
                                           :if-new (file+head ,dw/daily-note-filename
                                                              ,dw/daily-note-header))
                                          ("t" "task" entry
                                           "* TODO %?\n  %U\n  %a\n  %i"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Tasks"))
                                           :empty-lines 1)
                                          ("l" "log entry" entry
                                           "* %<%I:%M %p> - %?"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ("j" "journal" entry
                                           "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ("m" "meeting" entry
                                           "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ))
    )

#+end_src

** [[https://github.com/daviwil/dotfiles/blob/master/.emacs.d/modules/dw-workflow.el][Roam Agenda]]

#+begin_src emacs-lisp

  (use-package org-agenda
    :bind
    ("C-z r b" . dw/org-roam-capture-inbox)
    :preface
    (defun dw/org-roam-filter-by-tag (tag-name)
      "Filter org roam files by their tags."
      (lambda (node)
        (member tag-name (org-roam-node-tags node))))

    (defun dw/org-roam-list-notes-by-tag (tag-name)
      "List org roam files by their tags."
      (mapcar #'org-roam-node-file
              (seq-filter
               (dw/org-roam-filter-by-tag tag-name)
               (org-roam-node-list))))

    (defun dw/org-roam-refresh-agenda-list () ;; 1
      "Refresh the current agenda list, and add the files with the currosponding tag to the agenda list."
      (interactive)
      (setq org-agenda-files (dw/org-roam-list-notes-by-tag "agenda")))
    ;; Build the agenda list the first time for the session
    (dw/org-roam-refresh-agenda-list)
    (defun dw/org-roam-project-finalize-hook ()
      "Adds the captured project file to "org-agenda-file" if the capture was not aborted."
      ;; Remove the hook since it was added temporarily
      (remove-hook 'org-capture-after-finalize-hook #'dw/org-roam-project-finalize-hook)

      ;; Add project file to the agenda list if the capture was confirmed
      (unless org-note-abort
        (with-current-buffer (org-capture-get :buffer)
          (add-to-list 'org-agenda-files (buffer-file-name)))))
    (defun dw/org-roam-capture-inbox ()
      "Create a org roam inbox file."
      (interactive)
      (org-roam-capture- :node (org-roam-node-create)
                         :templates '(("i" "inbox" plain "* %?"
                                       :if-new (file+head "inbox.org" "#+title: Inbox\n#+filetags: :agenda:\n\n")))))
    (defun dw/org-roam-goto-month ()
      "Lists the files of the selected month with the set tag."
      (interactive)
      (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                         :node (org-roam-node-create)
                         :templates '(("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
                                       :if-new (file+head "%<%Y-%B>.org"
                                                          "#+title: %<%Y-%B>\n#+filetags: :agenda:\n\n")
                                       :unnarrowed t))))
    (defun dw/org-roam-goto-year ()
      "Lists the files of the selected year with the set tag."
      (interactive)
      (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                         :node (org-roam-node-create)
                         :templates '(("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
                                       :if-new (file+head "%<%Y>.org"
                                                          "#+title: %<%Y>\n#+filetags: :agenda:\n\n")
                                       :unnarrowed t))))
    :custom
    (org-agenda-hide-tags-regexp "agenda")
    )

#+end_src

*** Credits

1. [[https://github.com/org-roam/org-roam/issues/2357#issuecomment-1614254880][pauljamesharper]].

** [[https://github.com/org-roam/org-roam-ui][User Interface]]

#+begin_quote

A graphical frontend for exploring your org-roam Zettelkasten.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-roam-ui
    :bind
    ("C-z r u" . org-roam-ui-open)
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start nil)
    (org-roam-ui-browser-function #'browse-url-chromium)
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-org-roam)
#+end_src

* [[https://github.com/emacs-citar/citar][Citar]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-citar.el
:END:

#+begin_quote

Emacs package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package citar
    :custom
    (citar-bibliography "~/Documents/Bibliography.bib")
    (citar-citeproc-csl-styles-dir "~/Documents/Zotero/styles/")
    (citar-citeproc-csl-style "harvard-cite-them-right.csl")
    (citar-format-reference-function 'citar-citeproc-format-reference)
    (citar-library-paths '("~/Documents/Zotero/storage/"))
    (citar-open-entry-function 'citar-open-entry-in-zotero)
    :hook
    (org-mode . citar-capf-setup)
    :ensure t
    )

#+end_src

** [[https://github.com/emacs-citar/citar?tab=readme-ov-file#embark][Embark]]

#+begin_src emacs-lisp

  (use-package citar-embark
    :after citar embark
    :config
    (citar-embark-mode)
    :custom
    (citar-at-point-function 'embark-act)
    :ensure t
    )

#+end_src

**** [[https://github.com/emacs-citar/citar/wiki/Embark][More Functions]]

#+begin_src emacs-lisp

  (use-package citar-embark
    :after citar embark
    :config
    (setf (alist-get
           'key-at-point
           (alist-get '(org-mode) citar-major-mode-functions nil nil #'equal))
          #'my/citar-org-key-at-point)

    (defun my/citar-org-key-at-point ()
      "Return citekey at point, when in org property drawer.

  Citkey must be formatted as `@key'."
      (or (citar-org-key-at-point)
          (when (and (equal (org-element-type (org-element-at-point)) 'node-property)
                     (org-in-regexp (concat "[[:space:]]" org-element-citation-key-re)))
            (cons (substring (match-string 0) 2)
                  (cons (match-beginning 0)
                        (match-end 0))))))
    (add-to-list 'embark-keymap-alist '(bib-reference . citar-map))
    )

#+end_src

** Org Cite

#+begin_src emacs-lisp

  (use-package oc
    :bind
    (
     :map org-mode-map
     ("C-c m q" . org-cite-insert)
     )
    :custom
    (org-cite-csl-styles-dir "~/Documents/Zotero/styles/")
    (org-cite-export-processors '((t . (csl "harvard-cite-them-right.csl"))))
    (org-cite-global-bibliography '("~/Documents/Bibliography.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    )

#+end_src

** [[https://github.com/emacs-citar/citar-org-roam][Org Roam]]

#+begin_src emacs-lisp

  (use-package citar-org-roam
    :bind
    ("C-z r c" . citar-create-note)
    :after citar org-roam
    :config
    (citar-org-roam-mode)
    (add-to-list 'org-roam-capture-templates
                 '("b" "bibliographic" plain
                  (file "~/Documents/Org Roam/Templates/default.org")
                  :if-new
                  (file+head "%<%Y%m%d%H%M%S>-${citar-citekey}.org" "#+title: ${title}\n\n")
                  :unnarrowed t))
    :custom
    (citar-org-roam-capture-template-key "b")
    (citar-org-roam-note-title-template "${title}")
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-citar)
#+end_src

* Command Line
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-cmd.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** [[https://github.com/akermu/emacs-libvterm][vterm]]

#+begin_quote

Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on [[https://github.com/neovim/libvterm][libvterm]], a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.

#+end_quote

#+begin_src emacs-lisp

  (use-package vterm
    :bind
    ([remap shell] . vterm)
    :custom
    (vterm-shell "bash")
    (vterm-max-scrollback 10000)
    (vterm-timer-delay 0.001)
    :ensure t
    )

#+end_src

*** [[https://mocompute.codeberg.page/item/2024/2024-09-03-emacs-project-vterm.html][Project Shell]]

#+begin_src emacs-lisp

  (use-package vterm
    :after vterm
    :bind
    ([remap project-shell] . mocompute/project-shell)
    :config
    (defun mocompute/project-shell ()
      "Start an inferior shell in the current project's root directory.
  If a buffer already exists for running a shell in the project's root,
  switch to it.  Otherwise, create a new shell buffer.
  With `universal-argument' prefix arg, create a new inferior shell buffer even
  if one already exists."
      (interactive)
      (let* ((default-directory (project-root (project-current t)))
             (default-project-shell-name (project-prefixed-buffer-name "shell"))
             (shell-buffer (get-buffer default-project-shell-name)))
        (if (and shell-buffer (not current-prefix-arg))
            (if (comint-check-proc shell-buffer)
                (pop-to-buffer shell-buffer (bound-and-true-p display-comint-buffer-action))
              (vterm shell-buffer))
          (vterm (generate-new-buffer-name default-project-shell-name)))))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-cmd)
#+end_src

* Development
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-dev.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Tree-Sitter

#+begin_quote

tree-sitter utilities.

#+end_quote

#+begin_src emacs-lisp

  (use-package treesit
    :custom
    (treesit-font-lock-level 4)
    )

#+end_src

*** Org Source

#+begin_quote

Source code examples in Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-src
    :config
    (add-to-list 'org-src-lang-modes '(
                                       ("bash" . bash-ts)
                                       ("C" . c-ts)
                                       ("csharp" . csharp-ts)
                                       ("css" . css-ts)
                                       ("go" . go-ts)
                                       ("html" . html-ts)
                                       ("java" . java-ts)
                                       ("js" . js-ts)
                                       ("python" . python-ts)
                                       ("rust" . rust-ts)
                                       ("toml" . toml-ts)
                                       ("yaml" . yaml-ts)
                                       ))
    )

#+end_src

*** [[https://github.com/renzmann/treesit-auto][Auto]]

#+begin_quote

Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29.

#+end_quote

#+begin_src emacs-lisp

  (use-package treesit-auto
    :vc (:url "https://github.com/gs-101/treesit-auto" :branch custom)
    :config
    (global-treesit-auto-mode)
    (treesit-auto-add-to-auto-mode-alist 'all)
    :custom
    (treesit-auto-install t)
    :ensure t
    )

#+end_src

*** [[https://github.com/danilshvalov/git-commit-ts-mode][git-commit]]

#+begin_src emacs-lisp

  (use-package git-commit-ts-mode
    :vc (:url "https://github.com/danilshvalov/git-commit-ts-mode")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/danilshvalov/git-commit-ts-mode?tab=readme-ov-file#magit-integration][Magit]]

#+begin_src emacs-lisp

  (use-package magit
    :after git-commit-ts-mode magit
    :custom
    (git-commit-major-mode 'git-commit-ts-mode)
    )

#+end_src

** Compile

#+begin_quote

Run compiler as inferior of Emacs, parse error messages.

#+end_quote

#+begin_src emacs-lisp

  (use-package compile
    :bind
    (
     :map compilation-mode-map
     ("}" . compilation-next-file)
     ("{" . compilation-previous-file)
     ("n" . next-error-no-select)
     ("p" . previous-error-no-select)
     ("q" . kill-buffer-and-window)
     )
    :custom
    (compilation-auto-jump-to-first-error t)
    (compilation-max-output-line-length nil)
    (compilation-scroll-output t)
    (compilation-skip-threshold 2)
    :defer t
    :functions
    (
     kill-buffer-and-window
     next-error-no-select
     previous-error-no-select
     )
    :hook
    (compilation-mode . goto-address-mode)
    (compilation-filter . xenodium/colorize-compilation-buffer)
    :preface
    (defun xenodium/colorize-compilation-buffer ()
      (let ((was-read-only buffer-read-only))
        (unwind-protect
            (progn
              (when was-read-only
                (read-only-mode -1))
              (ansi-color-apply-on-region (point-min) (point-max)))
          (when was-read-only
            (read-only-mode +1)))))
    )

#+end_src

*** [[https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-compile.el][Credits]]

*** [[https://github.com/mohkale/compile-multi][multi]]

#+begin_quote

Multi target interface to compile.

#+end_quote

#+begin_src emacs-lisp

  (use-package compile-multi
    :bind
    ([remap compile] . compile-multi)
    :ensure t
    )

#+end_src
    
**** [[https://github.com/mohkale/compile-multi?tab=readme-ov-file#consult-multi-compile][Consult]]

#+begin_src emacs-lisp

  (use-package consult-compile-multi
    :after compile-multi consult
    :ensure t
    :config
    (consult-compile-multi-mode)
    )

#+end_src

**** [[https://github.com/mohkale/compile-multi?tab=readme-ov-file#compile-multi-embark][Embark]]

#+begin_src emacs-lisp

  (use-package compile-multi-embark
    :after compile-multi embark
    :ensure t
    :config
    (compile-multi-embark-mode)
    )

#+end_src

** Eglot

#+begin_quote

Eglot ("Emacs Polyglot") is an Emacs LSP client that stays out of your way.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot
    :custom
    (eglot-autoshutdown t)
    (eglot-connect-timeout nil)
    (eglot-sync-connect nil)
    :defer t
    )

#+end_src

*** [[https://github.com/jdtsmith/eglot-booster][Booster]]

#+begin_quote

Boost eglot using lsp-booster.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot-booster
    :vc (:url "https://github.com/jdtsmith/eglot-booster")
    :ensure t
    :hook
    (eglot-managed-mode . eglot-booster-mode)
    )

#+end_src

** Eldoc

#+begin_quote

Show function arglist or variable docstring in echo area.

#+end_quote


#+begin_src emacs-lisp

  (use-package eldoc
    :custom
    (eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    (eldoc-echo-area-use-multiline-p nil)
    (eldoc-idle-delay 0)
    )

#+end_src

** Flymake

#+begin_quote

A universal on-the-fly syntax checker.

#+end_quote

#+begin_src emacs-lisp

  (use-package flymake
    :hook
    (prog-mode . flymake-mode)
    )

#+end_src

*** [[https://github.com/mohkale/flymake-collection][Collection]]

#+begin_quote

Collection of checkers for flymake.

#+end_quote

#+begin_src emacs-lisp

  (use-package flymake-collection
    :ensure t
    :config
    (push '((c-mode c-ts-mode) flymake-collection-gcc) flymake-collection-hook-config)
    (push '((python-mode python-ts-mode) flymake-collection-flake8) flymake-collection-hook-config)
    :hook
    (flymake-mode . flymake-collection-hook-setup)
    )

#+end_src

** Languages

*** Lisp

#+begin_quote

Lisp editing for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package lisp
    :bind
    (
     :map lisp-mode-map
     ("C-c C-p" . run-lisp)
     )
    :custom
    (narrow-to-defun-include-comments t)
    :defer t
    )

#+end_src

*** Python

#+begin_quote

Python's flying circus support for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package python
    :custom
    (python-indent-guess-indent-offset-verbose nil)
    :defer t
    )

#+end_src

*** Rust

**** [[https://github.com/peterstuart/cargo-transient][Cargo Transient]]

#+begin_quote

A transient UI for Cargo, Rust's package manager.

#+end_quote

#+begin_src emacs-lisp

  (use-package cargo-transient
    :vc (:url "https://github.com/gs-101/cargo-transient" :branch custom)
    :after rust-ts-mode
    :bind
    (
     :map rust-ts-mode-map
     ("C-c C-p" . cargo-transient)
     )
    :ensure t
    :custom
    (cargo-transient-buffer-name-function 'project-prefixed-buffer-name)
    )

#+end_src

*** Scheme

**** CMUScheme

#+begin_quote

Scheme process in a buffer. Adapted from tea.el

#+end_quote

#+begin_src emacs-lisp

  (use-package cmuscheme
    :bind
    (
     :map scheme-mode-map
     ("C-c C-p" . run-scheme)
     )
    :defer t
    )

#+end_src

*** Shell Script

#+begin_quote

Major mode for editing shell scripts.
Bourne, C and rc shells as well as various derivatives are supported and easily derived from.
Structured statements can be inserted with one command or abbrev.
Completion is available for filenames, variables known from the script, the shell and the environment as well as commands

#+end_quote

#+begin_src emacs-lisp

  (use-package sh-script
    :bind
    (
     :map bash-ts-mode-map
     ("C-c C-p" . shell)
     :map sh-mode-map
     ("C-c C-p" . shell)
     )
    :defer t
    )

#+end_src

** Smerge

#+begin_quote

Minor mode to resolve diff3 conflicts.

#+end_quote

#+begin_src emacs-lisp

  (use-package smerge-mode
    :init
    (smerge-mode)
    )

#+end_src

** SubWord

#+begin_quote

Handling capitalized subwords in a nomenclature.

#+end_quote

#+begin_src emacs-lisp

  (use-package subword
    :hook
    (prog-mode . subword-mode)
    )

#+end_src

** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive Indent]]

#+begin_quote

Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package aggressive-indent
    :ensure t
    :hook
    (css-mode . aggressive-indent-mode)
    (emacs-lisp-mode . aggressive-indent-mode)
    (lisp-mode . agressive-indent-mode)
    )

#+end_src

** [[https://github.com/radian-software/apheleia][Apheleia]]

#+begin_quote

Run code formatter on buffer contents without moving point, using RCS patches and dynamic programming.

#+end_quote

#+begin_src emacs-lisp

  (use-package apheleia
    :ensure t
    :config
    (setf (alist-get 'clang-format apheleia-formatters)
          '("clang-format" "--style=microsoft" "--assume-filename"
            (or (apheleia-formatters-local-buffer-file-name)
                (apheleia-formatters-mode-extension)
                ".c"))
          )
    :hook
    (prog-mode . apheleia-mode)
    )

#+end_src

*** Packages to install

**** dnf

#+begin_src bash

  sudo dnf install black

#+end_src

** [[https://github.com/mickeynp/combobulate][Combobulate]]

#+begin_quote

Structured Editing and Navigation in Emacs with Tree-Sitter.

#+end_quote

#+begin_src emacs-lisp

  (use-package combobulate
    :vc (:url "https://github.com/mickeynp/combobulate")
    :bind
    (
     :map combobulate-key-map
     ([remap backward-up-list] . combobulate-navigate-up)
     ([remap down-list] . combobulate-navigate-down)
     ([remap forward-sexp] . combobulate-navigate-next)
     ([remap backward-sexp] . combobulate-navigate-previous)
     ([remap transpose-sexp] . combobulate-transpose-sexps)
     ([remap kill-sexp] . combobulate-kill-node-dwim)
     ([remap mark-sexp] . combobulate-mark-node-dwim)
     ([query-replace-regexp] . combobulate-cursor-edit-node-by-text-dwim)
     )
    :config
    (defun cxa/activate-combobulate-on-ts-mode ()
      "Check if MAJOR MODE is a tree-sitter mode. If it is, enable `combobulate-mode'."
      (when (string-match-p "-ts-mode\\'" (symbol-name major-mode))
        (combobulate-mode)))
    :custom
    (combobulate-key-prefix "C-z t c")
    :ensure t
    :hook
    (text-mode . cxa/activate-combobulate-on-ts-mode)
    (prog-mode . cxa/activate-combobulate-on-ts-mode)
    )

#+end_src

- [[https://github.com/mickeynp/combobulate/issues/119#issuecomment-2435132123][Credits]]

** [[https://github.com/anonimitoraf/exercism.el][Exercism]]

#+begin_quote

Emacs integration for [[https://exercism.org][Exercism]].

#+end_quote

#+begin_src emacs-lisp

  (use-package exercism
    :commands
    (exercism)
    :custom
    (exercism--workspace (convert-standard-filename (expand-file-name "study/exercism/" gs-101/projects-code-directory)))
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/magit/git-modes][git-modes]]

#+begin_quote

Emacs major modes for Git configuration files.

#+end_quote

#+begin_src emacs-lisp

  (use-package git-modes
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/karthink/gptel][gptel]]

#+begin_quote

A simple LLM client for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel
    :bind
    ("C-z g b" . gptel)
    ("C-z g DEL" . gptel-abort)
    ("C-z g a" . gptel-add)
    ("C-z g C-x C-f" . gptel-add-file)
    ("C-z g m" . gptel-menu)
    ("C-z g r" . gptel-rewrite-menu)
    ("C-z g RET" . gptel-send)
    ("C-z g p" . gptel-system-prompt)
    :custom
    (gptel-default-mode 'org-mode)
    (gptel-org-branching-context t)
    :ensure t
    )

#+end_src

*** [[https://github.com/marketplace/models][Github Models]]

#+begin_quote

Try, test, and deploy from a wide range of model types, sizes, and specializations.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel-openai
    :after gptel
    :config
    (gptel-make-openai "Github Models"
      :host "models.inference.ai.azure.com"
      :endpoint "/chat/completions"
      :stream t
      :key #'gptel-api-key
      :models '(
                gpt-4o
                gpt-4o-mini
                meta-llama-3.1-405b-instruct
                llama-3.2-90B-vision-instruct
                ))
  )

#+end_src

*** [[https://github.com/karthink/gptel-quick][quick]]

#+begin_quote

Quick LLM lookups in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel-quick
    :vc (:url "https://github.com/karthink/gptel-quick")
    :after gptel
    :ensure t
    )

#+end_src

**** [[https://github.com/karthink/gptel-quick?tab=readme-ov-file#setup][Embark]]

#+begin_src emacs-lisp

  (use-package gptel-quick
    :after gptel-quick embark
    :bind
    (
     :map embark-general-map
     ("g" . gptel-quick)
     )
    )

#+end_src


*** [[https://github.com/daedsidog/evedel][evedel]]

#+begin_quote

Evedel is an Emacs package that adds a workflow for interacting with LLMs during programming.

#+end_quote

#+begin_src emacs-lisp

  (use-package evedel
    :bind
    (
     :map prog-mode-map
     ("C-z e d"   . evedel-create-directive)
     ("C-z e m"   . evedel-modify-directive)
     ("C-z e D"   . evedel-modify-directive-tag-query)
     ("C-z e P"   . evedel-preview-directive-prompt)
     ("C-z e RET" . evedel-process-directives)
     ("C-z e TAB" . evedel-convert-instructions)
     ("C-z e r"   . evedel-create-reference)
     ("C-z e DEL" . evedel-delete-instructions)
     ("C-z e C-'" . evedel-modify-reference-commentary)
     ("C-z e n"   . evedel-next-instruction)
     ("C-z e p"   . evedel-previous-instruction)
     ("C-z e s"   . evedel-save-instructions)
     ("C-z e l"   . evedel-load-instructions)
     ("C-z e t"   . evedel-add-tags)
     ("C-z e T"   . evedel-remove-tags)
     )
    :ensure t
    )

#+end_src

** [[https://github.com/kaiwk/leetcode.el][LeetCode]]

#+begin_quote

An Emacs LeetCode client.

#+end_quote

#+begin_src emacs-lisp

  (use-package leetcode
    :custom
    (leetcode-directory (convert-standard-filename (expand-file-name "study/leetcode-solutions/" gs-101/projects-code-directory)))
    (leetcode--paid "$")
    (leetcode-save-solutions t)
    (leetcode--User-Agent ("User Agent" . "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.1"))
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/magit/magit][Magit]]

#+begin_quote

It's Magit! A Git Porcelain inside Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package magit
    :bind
    ("C-c v B" . magit-blame)
    ("C-c v C" . magit-clone)
    ("C-c v /" . magit-dispatch)
    ("C-c v F" . magit-fetch)
    ("C-c M-g" . magit-file-dispatch)
    ("C-c v x" . magit-file-delete)
    ("C-c v ." . magit-file-dispatch)
    ("C-c v L" . magit-log)
    ("C-c v g" . magit-status)
    ("C-c v G" . magit-status-here)
    ("C-c v c c" . magit-commit)
    ("C-c v c f" . magit-commit-fixup)
    ("C-c v l s" . magit-list-submodules)
    :custom
    (magit-diff-refine-hunk t)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :ensure t
    :hook
    (magit-mode . magit-wip-mode)
    (magit-process-find-password-functions . magit-process-password-auth-source)
    )

#+end_src

*** [[https://github.com/magit/forge][Forge]]

#+begin_quote

Work with Git forges from the comfort of Magit.

#+end_quote

To make use of this package a [[https://magit.vc/manual/forge/Token-Creation.html][token]] must be generated.

#+begin_src emacs-lisp

  (use-package forge
    :after magit
    :bind
    ("C-c v '". forge-dispatch)
    ("C-c v c i" . forge-create-issue)
    ("C-c v c p" . forge-create-pullreq)
    ("C-c v f c" . forge-browse-commit)
    ("C-c v f i" . forge-browse-issue)
    ("C-c v f p" . forge-browse-pullreq)
    ("C-c v l i" . forge-list-issues)
    ("C-c v l n" . forge-list-notifications)
    ("C-c v l p" . forge-list-pullreqs)
    ("C-c v l r" . forge-list-repositories)
    :ensure t
    )

#+end_src

** [[https://github.com/purcell/package-lint][package-lint]]

#+begin_quote

A linting library for elisp package metadata.

#+end_quote

#+begin_src emacs-lisp

  (use-package package-lint
    :ensure t
    )

#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package package-lint-flymake
    :after package-lint flymake
    :ensure t
    :hook
    (emacs-lisp-mode . package-lint-flymake-setup)
    )

#+end_src

** [[https://github.com/mohkale/projection][Projection]]

#+begin_quote

Projectile like project management library built on Emacs project.el.

#+end_quote

#+begin_src emacs-lisp

  (use-package projection
    :ensure t
    :bind-keymap
    ("C-z p" . projection-map)
    :bind
    (
     :map projection-map
     ("C" . projection-commands-build-project)
     ("e" . projection-recentf)
     )
    :init
    (global-projection-hook-mode)
    )

#+end_src

*** [[https://github.com/mohkale/projection?tab=readme-ov-file#projection-multi-compile][multi]]

#+begin_src emacs-lisp

  (use-package projection-multi
    :after projection compile-multi
    :ensure t
    :bind
    (
     :map projection-map
     ("c" . projection-multi-compile)
     )
    )

#+end_src

*** [[https://github.com/mohkale/projection?tab=readme-ov-file#projection-multi-embark][Embark]]

#+begin_src emacs-lisp

    (use-package projection-multi-embark
      :after projection compile-multi embark
      :ensure t
      :config
      (projection-multi-embark-setup-command-map)
      )

#+end_src

** [[https://github.com/wakatime/wakatime-mode][Wakatime]]

#+begin_quote

Emacs plugin for automatic time tracking and metrics generated from your programming activity.

#+end_quote

#+begin_src emacs-lisp

  (use-package wakatime-mode
    :custom
    (wakatime-api-key (auth-source-pick-first-password :host "wakatime.com"))
    :ensure t
    :hook
    (prog-mode . global-wakatime-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-dev)
#+end_src

* Completion
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-completion.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** [[https://github.com/oantolin/orderless][Orderless]]

#+begin_quote

Emacs completion style that matches multiple regexps in any order.

#+end_quote

#+begin_src emacs-lisp

  (use-package orderless
    :config
    (orderless-define-completion-style minad/orderless-initialism
      (orderless-matching-styles '(
                                   orderless-initialism
                                   orderless-literal
                                   orderless-regexp
                                   )))
    (orderless-define-completion-style minad/orderless-simple
      (orderless-style-dispatchers nil)
      (orderless-matching-styles '(orderless-literal)))
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '(
                                     (file (styles partial-completion))
                                     (command (styles minad/orderless-initialism))
                                     (variable (styles minad/orderless-initialism))
                                     (symbol (styles minad/orderless-initialism))
                                     (minibuffer (styles minad/orderless-initialism))
                                     ))
    (orderless-comment-separator #'orderless-escapable-split-on-space)
    (orderless-style-dispatchers (list
                                  #'minad/orderless-consult-dispatch
                                  #'orderless-affix-dispatch
                                  ))
    :ensure t
    :preface
    (defun minad/orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))
    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun minad/orderless-consult-dispatch (word _index _total)
      "Ensure that $ works with Consult commands, witch add disambiguation suffixes."
      (cond
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1) (minad/orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\.." word))
        `(orderless-regexp . ,(concat "\\." (substring word 1) (minad/orderless--consult-suffix))))))
    )

#+end_src

- [[https://github.com/minad/consult/wiki#minads-orderless-configuration][Credits]]

** [[https://github.com/minad/cape][Cape]]

#+begin_quote

Completion At Point Extensions.

#+end_quote

#+begin_src emacs-lisp

  (use-package cape
    :ensure t
    :hook
    (completion-at-point-functions . cape-dabbrev)
    (completion-at-point-functions . cape-file)
    )

#+end_src

*** [[https://github.com/minad/corfu/wiki#using-cape-to-tweak-and-combine-capfs][Emacs Lisp Configuration]]

#+begin_src emacs-lisp

  (use-package cape
    :config
    (defun minad/emacs-lisp-ignore-keywords (cand)
      "Remove keywords from the CAND list, unless the completion text starts with a `:'."
      (or (not (keywordp cand))
          (eq (char-after (car completion-in-region--data)) ?:)))
    (defun minad/emacs-lisp-capf ()
      "`completion-at-point-functions' for `emacs-lisp-mode', including support for symbols currently unknown to Emacs, using `cape-dabbrev'.
  Also adds `cape-file' as a fallback."
      (setq-local completion-at-point-functions
                  `(,(cape-capf-super
                      (cape-capf-predicate
                       #'elisp-completion-at-point
                       #'minad/emacs-lisp-ignore-keywords)
                      #'cape-dabbrev)
                    cape-file)
                  cape-dabbrev-min-length 5))
    :hook
    (emacs-lisp-mode . minad/emacs-lisp-capf)
    )

#+end_src

** [[https://github.com/isamert/corg.el][Corg]]

#+begin_quote

Auto complete org-mode headers seamlessly.

#+end_quote

#+begin_src emacs-lisp

  (use-package corg
    :vc (:url "https://github.com/isamert/corg.el")
    :ensure t
    :hook
    (org-mode . corg-setup)
    )

#+end_src

** [[https://github.com/minad/tempel][Tempel]]

#+begin_quote

Simple templates for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package tempel
    :bind
    ("C-z i s" . tempel-insert)
    :ensure t
    )

#+end_src

*** [[https://github.com/fejfighter/eglot-tempel][Eglot]]

#+begin_quote

Bridge for tempel templates with eglot.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot-tempel
    :after eglot tempel
    :ensure t
    :config
    (eglot-tempel-mode)
    )

#+end_src

*** [[https://github.com/gs-101/tempel-snippets][Snippets]]

#+begin_quote

Effort to translate all the yasnippet snippets to Tempel, inspired on tempel-collection.

#+end_quote

#+begin_src emacs-lisp

  (use-package tempel-snippets
    :vc (:url "https://github.com/gs-101/tempel-snippets")
    :after tempel
    :ensure t
    )

#+end_src

** [[https://github.com/minad/corfu][Corfu]]

#+begin_quote

COmpletion in Region FUnction.

#+end_quote

#+begin_src emacs-lisp

  (use-package corfu
    :bind
    (
     :map corfu-map
     ("M-SPC" . corfu-insert-separator)
     ("RET" . nil)
     )
    :config
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.0)
    (corfu-auto-prefix 2)
    (corfu-cycle t)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preselect 'directory)
    :ensure t
    :init
    (global-corfu-mode)
    )

#+end_src

*** [[https://github.com/minad/corfu?tab=readme-ov-file#buffer-localcorfu-only-completion-styles][Simpler Completion Style]]

#+begin_src emacs-lisp

  (use-package corfu
    :after orderless
    :hook
    (corfu-mode . (lambda () (setq-local completion-styles '(minad/orderless-simple))))
    )

#+end_src

*** [[https://github.com/minad/corfu/wiki#configuring-corfu-for-eglot][Configuring Corfu for Eglot]]

**** Minibuffer

#+begin_src emacs-lisp

  (use-package minibuffer
    :after eglot
    :custom
    (completion-category-defaults nil)
    )

#+end_src

**** [[https://github.com/minad/corfu/wiki#continuously-update-the-candidates][Cape]]

#+begin_src emacs-lisp

  (use-package cape
    :after corfu cape
    :config
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
    )

#+end_src

**** [[https://github.com/minad/corfu/wiki#making-a-cape-super-capf-for-eglot][Emacs]]

With the combined features of cape and tempel, create a super capf for eglot completion.

#+begin_src emacs-lisp

  (use-package emacs
    :after corfu cape tempel
    :preface
    (defun minad/eglot-capf ()
      "eglot capf with tempel and cape features."
      (setq-local completion-at-point-functions
                  (list (cape-capf-super
                         #'cape-file
                         #'eglot-completion-at-point
                         #'tempel-expand
                         ))))
    :hook
    (eglot-managed-mode . minad/eglot-capf)
    )

#+end_src

** [[https://github.com/minad/vertico][Vertico]]

#+begin_quote

VERTical Interactive COmpletion.

#+end_quote

#+begin_src emacs-lisp

  (use-package vertico
    :custom
    (vertico-cycle t)
    :ensure t
    :init
    (vertico-mode)
    (vertico-multiform-mode)
    )

#+end_src

*** [[https://github.com/minad/vertico?tab=readme-ov-file#extensions][Vertico Directory]]

#+begin_quote

Commands for Ido-like directory navigation.

#+end_quote

#+begin_src emacs-lisp

  (use-package vertico-directory
    :after vertico
    :bind
    (
     :map vertico-map
     ("RET" . vertico-directory-enter)
     ("DEL" . vertico-directory-delete-char)
     ("M-DEL" . vertico-directory-delete-word)
     )
    :hook
    (rfn-eshadow-update-overlay . vertico-directory-tidy)
    )

#+end_src

*** [[https://github.com/minad/vertico/wiki#customize-sorting-based-on-completion-category][Completion-based Sorting]]

#+begin_src emacs-lisp

  (use-package vertico-multiform
    :after vertico
    :config
    (defun minad/sort-directories-first (files)
      "Sort FILES by directories first, but still maintain the history, length and alphabetical sorting.
  Hidden directories have a higher priority."
      (setq files (vertico-sort-history-length-alpha files))
      (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
             (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))
    :custom
    (vertico-multiform-categories '(
                                    (symbol (vertico-sort-function . vertico-sort-alpha))
                                    (file (vertico-sort-function . minad/sort-directories-first))
                                    ))
    )

#+end_src

** [[https://github.com/minad/marginalia][Marginalia]]

#+begin_quote

Marginalia in the minibuffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-completion)
#+end_src

* Utilities
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-utils.el
:END:

Generally useful packages for productivity and other aspects.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** [[https://github.com/jwiegley/alert][Alert]]

#+begin_quote

A Growl-like alerts notifier for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package alert
    :custom
    (alert-default-style 'notifications)
    :ensure t
    )

#+end_src

** [[https://github.com/SqrtMinusOne/pomm.el][Pomm]]

#+begin_quote

Implementation of Pomodoro and Third Time techniques for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package pomm
    :config
    (pomm-mode-line-mode)
    :custom
    (pomm-audio-enabled t)
    :defer t
    :ensure t
    :hook
    (pomm-on-status-changed . pomm--sync-org-clock)
    (pomm-third-time-on-status-changed . pomm-third-time--sync-org-clock)
    )

#+end_src

** [[https://github.com/minad/consult][Consult]]

#+begin_quote

Consulting completing-read.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult
    :bind
    (
     ([remap bookmark-jump] . consult-bookmark)
     ([remap flymake-start] . consult-flymake)
     ([remap goto-line] . consult-goto-line)
     ([remap grep] . consult-grep)
     ([remap imenu] . consult-imenu)
     ([remap info] . consult-info)
     ([remap info-search] . consult-info)
     ([remap isearch-forward] . consult-line)
     ([remap isearch-forward-word] . consult-line)
     ([remap kmacro-menu] . consult-kmacro)
     ([remap list-buffers] . consult-buffer)
     ([remap load-theme] . consult-theme)
     ([remap locate] . consult-locate)
     ([remap man] . consult-man)
     ([remap project-find-regexp] . consult-grep)
     ([remap project-list-buffers] . consult-project-buffer)
     ([remap project-switch-to-buffer] . consult-project-buffer)
     ([remap rgrep] . consult-ripgrep)
     ([remap switch-to-buffer] . consult-buffer)
     ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
     ([remap switch-to-buffer-other-tab] . consult-buffer-other-tab)
     ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
     ([remap vc-git-grep] . consult-git-grep)
     ([remap yank-from-kill-ring] . consult-yank-from-kill-ring)
     ([remap yank-pop] . consult-yank-pop)
     ("M-g I" . consult-imenu-multi)
     ("C-z M-x" . consult-mode-command)
     )
    :config
    (defun oantolin/choose-completion-in-region ()
      "Use default `completion--in-region' unless we are not completing."
      (when minibuffer-completion-table
        (setq-local completion-in-region-function #'completion--in-region)))
    (advice-add #'register-preview :override #'consult-register-window)
    (setf (alist-get 'log-edit-mode consult-mode-histories)
          'log-edit-comment-ring)
    (defvar minad/consult-line-map
      (let ((map (make-sparse-keymap)))
        (define-key map "\C-s" #'previous-history-element)
        map)
      "History keymap which is added to the local `consult-line' map.")
    (consult-customize consult-line :keymap minad/consult-line-map)
    :custom
    (register-preview-function #'consult-register-format)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    :ensure t
    :hook
    (minibuffer-setup . oantolin/choose-completion-in-region)
    )

#+end_src

- [[https://github.com/oantolin/emacs-config/blob/master/init.el][Credits]]

*** [[https://github.com/karthink/consult-dir][Dir]]

#+begin_quote

Insert paths into the minibuffer prompt in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-dir
    :after consult
    :bind
    ([remap list-directory] . consult-dir)
    ([remap dired-jump] . consult-dir-jump-file)
    :ensure t
    )

#+end_src

*** [[https://github.com/armindarvish/consult-gh][gh]]

#+begin_quote

An Interactive interface for "GitHub CLI" client inside GNU Emacs using Consult.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-gh
    :after consult
    :custom
    (consult-gh-code-action #'consult-gh--code-view-action)
    (consult-gh-default-clone-directory (expand-file-name gs-101/projects-code-directory))
    (consult-gh-default-orgs-list "gs-101")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#embark-integration][Embark]]

#+begin_src emacs-lisp

  (use-package consult-gh-embark
    :after consult-gh embark
    :ensure t
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#magitforge-integration][Forge]]

#+begin_src emacs-lisp

  (use-package consult-gh-forge
    :after consult-gh forge
    :custom
    (consult-gh-file-action #'consult-gh--files-view-action)
    (consult-gh-issue-action #'consult-gh-forge--issue-view-action)
    (consult-gh-pr-action #'consult-gh--forge-pr-view-action)
    (consult-gh-repo-action #'consult-gh--repo-browse-files-action)
    :ensure t
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#transient-menu][Transient]]

#+begin_src emacs-lisp

  (use-package consult-gh-transient
    :after consult-gh
    )

#+end_src

*** [[https://github.com/mclear-tools/consult-notes][Notes]]

#+begin_quote

Use consult to search notes.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-notes
    :ensure t
    )

#+end_src

**** [[https://github.com/mclear-tools/consult-notes?tab=readme-ov-file#org-roam][Org Roam]]

#+begin_src emacs-lisp

  (use-package consult-notes
    :after org-roam
    :config
    (consult-notes-org-roam-mode)
    )

#+end_src

*** [[https://github.com/minad/consult/wiki#use-orderless-as-pattern-compiler-for-consult-grepripgrepfind][Orderless]]

#+begin_src emacs-lisp

  (use-package consult
    :after consult orderless
    :config
    (defun minad/consult--orderless-regexp-compiler (input type &rest _config)
      "Regular expression pattern compiler based on `orderless'."
      (setq input (cdr (orderless-compile input)))
      (cons
       (mapcar (lambda (r) (consult--convert-regexp r type)) input)
       (lambda (str) (orderless--highlight input t str))))
    :custom
    (consult--regexp-compiler 'minad/consult--orderless-regexp-compiler)
    )

#+end_src

** [[https://github.com/oantolin/embark][Embark]]

#+begin_quote

Emacs Mini-Buffer Actions Rooted in Keymaps.

#+end_quote

#+begin_src emacs-lisp

  (use-package embark
    :bind
    (
     ([remap describe-bindings]. embark-bindings)
     ("C-;" . embark-act)
     )
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    :custom
    (prefix-help-command #'embark-prefix-help-command)
    ;; Disable quitting after killing a buffer in an action
    (embark-quit-after-action '(
                                (kill-buffer . nil)
                                ))
    :ensure t
    )

#+end_src

*** [[https://github.com/oantolin/embark?tab=readme-ov-file#consult][Consult]]

#+begin_src emacs-lisp

  (use-package embark-consult
    :defer t
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#automatically-resizing-auto-updating-embark-collect-buffers-to-fit-their-contents][Collect Resizing]]

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :config
    (defun oantolin/embark-collect-resize-window (&rest _)
      "Resize the `embark-collect' window to match its contents."
      (when (memq embark-collect--kind '(:live :completions))
        (fit-window-to-buffer (get-buffer-window)
                               (floor (frame-height) 2) 1)))
    :hook
    (embark-collect-post-revert . oantolin/embark-collect-resize-window)
    )

#+end_src

*** Sudo Action

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :if (functionp 'karthinks/sudo-find-file)
    :bind
    (
     :map embark-file-map
     ("S" . karthinks/sudo-find-file)
     )
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][Which Key]]

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :custom
    (embark-indicators '(
                         embark-which-key-indicator
                         embark-highlight-indicator
                         embark-isearch-highlight-indicator
                         ))
    :config
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "…" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (car binding))))))))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))
    (advice-add #'embark-completing-read-prompter :around #'embark-hide-which-key-indicator)
    )

#+end_src

** [[https://thanosapollo.org/projects/gnosis/][Gnosis]]

#+begin_quote

Spaced Repetition System for GNU Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package gnosis
    :defer t
    :ensure t
    )

#+end_src

*** no-littering

#+begin_src emacs-lisp

  (use-package gnosis
    :after gnosis no-littering
    :custom
    (gnosis-dir (no-littering-expand-var-file-name "gnosis/"))
    )

#+end_src

** [[https://github.com/tbanel/uniline][Uniline]]

#+begin_quote

Easily draw UNICODE lines and boxes.

#+end_quote

#+begin_src emacs-lisp

  (use-package uniline
    :bind
    ("C-z i l" . uniline-mode)
    :ensure t
    )

#+end_src


** End

#+begin_src emacs-lisp

  (provide 'gs-utils)
#+end_src

* Chatting
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-chat.el
:END:

Configuration for different chat clients.

** [[https://github.com/djcb/mu][mu4e]]

#+begin_quote

maildir indexer/searcher + emacs mail client + guile bindings.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands
    (mu4e)
    :custom
    (mu4e-compose-format-flowed t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-maildir (expand-file-name "!Mail-Provider/Personal/" mail-source-directory))
    (mu4e-view-show-addresses 't)
    (mu4e-view-show-images t)
    (mu4e-drafts-folder "/Drafts")
    (mu4e-sent-folder "/Sent")
    (mu4e-refile-folder "/All Mail")
    (mu4e-trash-folder "/Trash")
    (mu4e-maildir-shortcuts '(
                              ("/Inbox" . ?i)
                              ("/Drafts" . ?d)
                              ("/Sent" . ?s)
                              ("/Trash" . ?t)
                              ("/All Mail" . ?a)
                              ))
    )

#+end_src

*** [[https://github.com/Alexander-Miller/mu4e-column-faces][Column Faces]]

#+begin_src emacs-lisp

  (use-package mu4e-column-faces
    :after mu4e
    :config
    (mu4e-column-faces-mode)
    :ensure t
    )

#+end_src

*** Simple

#+begin_src emacs-lisp

  (use-package simple
    :after mu4e
    :custom
    (mail-user-agent 'mu4e-user-agent)
    )

#+end_src

*** Message

#+begin_src emacs-lisp

  (use-package message
    :after mu4e
    :custom
    (message-kill-buffer-on-exit t)
    (message-mail-user-agent t)
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-smtp-server "!mailprovider")
    (smtpmail-local-domain "!domain")
    (smtpmail-smtp-service 465)
    (smtpmail-stream-type 'ssl)
    )

#+end_src

*** Startup

#+begin_src emacs-lisp

  (use-package startup
    :custom
    (user-mail-address "!email")
    :defer t
    )

#+end_src

** [[https://github.com/jeremy-compostella/org-msg][OrgMsg]]

#+begin_quote

OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and Message mode to compose and reply to emails in a Outlook HTML friendly style. 

#+end_quote

#+begin_src emacs-lisp

  (use-package org-msg
    :after mu4e
    :custom
    (org-msg-greeting-fmt "\nGreetings,\n\n")
    (org-msg-default-alternatives '(
                                    (new . (text html))
                                    (reply-to-html . (text html))
                                    (reply-to-text . (text))
                                    ))
    (org-msg-convert-citation t)
    (org-msg-signature
     "Regards,

  #+begin_signature
  --
  *Gabriel Santos*
  #+end_signature"
     )
    :ensure t
    :config
    (org-msg-mode)
    )

#+end_src

** [[https://codeberg.org/emacs-jabber/emacs-jabber][Jabber]]

#+begin_quote

Jabber/XMPP client for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package jabber
    :bind-keymap
    ("C-z j" . jabber-global-keymap)
    :defer t
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-chat)
#+end_src

* [[https://github.com/skeeto/elfeed][Elfeed]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-elfeed.el
:END:

#+begin_quote

Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package elfeed
    :bind
    (
     :map elfeed-search-mode-map
     ("R" . kaushal-modi/elfeed-search-mark-all-as-read)
     )
    :config
    ;; https://emacs.stackexchange.com/a/2441
    (defun kaushal-modi/elfeed-search-mark-all-as-read ()
      "Call `mark-whole-buffer' and `elfeed-search-untag-all-undead' in unison,
  marking all current messages as read."
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))
    :defer t
    :ensure t
    )

#+end_src

- [[https://midirus.com/emacs/tutorial#elfeed][Credits]]

** [[https://github.com/remyhonig/elfeed-org][Org Mode]]

#+begin_quote

Configure the Elfeed RSS reader with an Orgmode file.

#+end_quote

#+begin_src emacs-lisp

  (use-package elfeed-org
    :after elfeed org
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory)))
    :ensure t
    )

#+end_src

** [[https://karthinks.com/software/lazy-elfeed/#open-feeds-in-emacs][EWW]]

#+begin_src emacs-lisp

  (use-package elfeed
    :bind
    (
     :map elfeed-show-mode-map
     ("B" . karthinks/elfeed-show-eww-open)
     :map elfeed-search-mode-map
     ("B" . karthinks/elfeed-search-eww-open)
     )
    :config
    (defun karthinks/elfeed-show-eww-open (&optional use-generic-p)
      "Open elfeed show entry with \\[eww]."
      (interactive "P")
      (let ((browse-url-browser-function #'eww-browse-url))
        (elfeed-show-visit use-generic-p)))
    (defun karthinks/elfeed-search-eww-open (&optional use-generic-p)
      "Open elfeed search entry with \\[eww]."
      (interactive "P")
      (let ((browse-url-browser-function #'eww-browse-url))
        (elfeed-search-browse-url use-generic-p)))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-elfeed)
#+end_src

* [[https://github.com/emacs-evil/evil][Evil Mode]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys-evil.el
:END:

#+begin_quote

The extensible vi layer for Emacs.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Simple

Bind the universal argument to another key to avoid conflicts.

#+begin_src emacs-lisp

  (use-package simple
    :bind
    ("C-M-u" . universal-argument)
    )

#+end_src

** Emacs

This is needed for ~evil-collection~.

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (evil-want-keybinding nil)
    )

#+end_src

** Evil

#+begin_quote

The extensible vi layer for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    )

#+end_src

** Core

#+begin_quote

Core functionality.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    :init
    (evil-mode)
    )

#+end_src

** Variables

#+begin_quote

Settings and variables.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-vars
    :custom
    (evil-disable-insert-state-bindings t) ;; 2
    (evil-respect-visual-line-mode t) ;; 1
    (evil-undo-system 'undo-redo)
    (evil-split-window-below t) ;; 1
    (evil-v$-excludes-newline t) ;; 1
    (evil-vsplit-window-right t) ;; 1
    (evil-want-C-i-jump nil) ;; 1
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t) ;; 2
    )

#+end_src

*** Credits

1. [[https://codeberg.org/blau_araujo/edz/src/branch/main/parte-05/config.org#headline-28][blau_araujo]];
2. [[https://github.com/Gavinok/emacs.d/blob/main/lisp/evil-config.el][Gavinok]].

** Commands

#+begin_quote

Evil commands and operators.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-commands
    :bind
    (
     :map evil-normal-state-map
     ("C-n" . evil-next-line)
     ("C-p" . evil-previous-line)
     (")" . evil-next-close-paren)
     ("(" . evil-previous-open-paren)
     )
    )

#+end_src

*** [[https://github.com/Gavinok/emacs.d/blob/main/lisp/evil-config.el][Credits]]

** Search

#+begin_quote

Search and substitute.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-search
    :custom
    (evil-search-module 'evil-search)
    )

#+end_src

** States

The different states found in Evil Mode.

#+begin_src emacs-lisp

  (use-package evil-states
    :bind
    (
     :map evil-insert-state-map
     ;; In insert state, use the default quit command to return to normal state
     ("C-g" . evil-normal-state)
     :map evil-motion-state-map
     ;; Disabled to avoid conflict with Org Mode
     ("RET" . nil)
     )
    )

#+end_src

*** [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.el#L164][Credits]]

** [[https://github.com/awth13/org-appear?tab=readme-ov-file#usage][Org Appear]]

Toggles org-appear based on the current evil state.

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-appear
    :custom
    (org-appear-trigger 'manual)
    :config
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'evil-insert-state-entry-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'evil-insert-state-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t)))
    )

#+END_src

** Vertico

#+begin_src emacs-lisp

  (use-package evil-core
    :after vertico
    :bind
    (
     :map vertico-map
     ("C-j" . vertico-next)
     ("C-k" . vertico-previous)
     )
    )

#+end_src

** [[https://reddit.com/r/emacs/comments/12zyrnk/evilsetleader_vs_generalel_for_spc_based/][Leader Keys]]

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-set-leader nil (kbd "SPC"))
    )

#+end_src

*** Buffer Management

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>B") 'ibuffer)
    (evil-define-key 'normal 'global (kbd "<leader>b") 'switch-to-buffer)
    )

#+end_src

*** Character Insertion

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ie") 'emoji-insert)
    (evil-define-key 'normal 'global (kbd "<leader>ic") 'insert-char)
    )

#+end_src

*** File Shortcuts

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>fe") '(lambda () (interactive) (find-file (expand-file-name "emacs.org" user-emacs-directory))))
    )

#+end_src

*** Org Mode

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>oa") 'org-agenda)
    (evil-define-key 'normal 'global (kbd "<leader>oc") 'org-clock-report)
    (evil-define-key 'normal 'global (kbd "<leader>od") 'org-deadline)
    (evil-define-key 'normal 'global (kbd "<leader>ol") 'org-insert-link)
    (evil-define-key 'normal 'global (kbd "<leader>os") 'org-schedule)
    (evil-define-key 'normal 'global (kbd "<leader>op") 'org-set-property)
    (evil-define-key 'normal 'global (kbd "<leader>ot") 'org-todo)
    )

#+end_src

*** Window Movement

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>wo") 'other-window)
    (evil-define-key 'normal 'global (kbd "<leader>wk") 'windmove-up)
    (evil-define-key 'normal 'global (kbd "<leader>wj") 'windmove-down)
    (evil-define-key 'normal 'global (kbd "<leader>wh") 'windmove-left)
    (evil-define-key 'normal 'global (kbd "<leader>wl") 'windmove-right)
    )

#+end_src

*** Shell

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ts") 'shell)
    )

#+end_src

*** Magit

#+begin_src emacs-lisp

  (use-package evil-core
    :after magit
    :config
    (evil-define-key 'normal 'global (kbd "<leader>mc") 'magit-clone)
    (evil-define-key 'normal 'global (kbd "<leader>ms") 'magit-status)
    )

#+end_src

*** Org Roam

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-roam
    :config
    (evil-define-key 'normal 'global (kbd "<leader>rb") 'dw/org-roam-capture-inbox)
    (evil-define-key 'normal 'global (kbd "<leader>rd") 'org-roam-dailies-map)
    (evil-define-key 'normal 'global (kbd "<leader>rf") 'org-roam-node-find)
    (evil-define-key 'normal 'global (kbd "<leader>ri") 'org-roam-node-insert)
    )

#+end_src

**** User Interface

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-roam-ui
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ru") 'org-roam-ui-open)
    )

#+end_src

*** Nerd Icons

#+begin_src emacs-lisp

  (use-package evil-core
    :after nerd-icons
    :config
    (evil-define-key 'normal 'global (kbd "<leader>in") 'nerd-icons-insert)
    )

#+end_src

** [[https://github.com/emacs-evil/evil-collection][Collection]]

#+begin_quote

A set of keybindings for evil-mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-collection
    :ensure t
    :init
    (evil-collection-init)
    )

#+end_src

** [[https://github.com/Somelauw/evil-org-mode][Org Mode]]

#+begin_quote

Supplemental evil-mode keybindings to emacs org-mode

#+end_quote

Why is this one not included in the collection?

#+begin_src emacs-lisp

  (use-package evil-org
    :hook
    (
     (org-agenda-mode . evil-org-mode)
     (org-mode . evil-org-mode)
     )
    :config
    (evil-org-set-key-theme '(navigation todo insert textobjects additional))
    :ensure t
    )

#+end_src

*** Agenda

#+begin_src emacs-lisp

  (use-package evil-org-agenda
    :config
    (evil-org-agenda-set-keys)
    )

#+end_src

*** [[https://github.com/daviwil/dotfiles/blob/master/.emacs.d/modules/dw-keys-evil.el][Credits]]

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :custom
    (which-key-allow-evil-operators t)
    )

#+end_src


** End

#+begin_src emacs-lisp

  (provide 'gs-keys-evil)
#+end_src

* [[https://github.com/meow-edit/meow][Meow Mode]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys-meow.el
:END:

#+begin_quote

Yet another modal editing on Emacs.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Meow

#+begin_src emacs-lisp

  (use-package meow
    :ensure t
    )

#+end_src

** Core

#+begin_quote

Modes definition in Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-core
    :init
    (meow-global-mode)
    )

#+end_src

** Variables

#+begin_quote

Internal variables and customizable variables.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-var
    :config
    (add-to-list 'meow-char-thing-table '(?a . arrow))
    :custom
    (meow-use-clipboard t)
    )

#+end_src

** Cheatsheet

#+begin_quote

Cheatsheet for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-cheatsheet
    :custom
    (meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    )

#+end_src

*** Layout

#+begin_quote

Cheatsheet layouts for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-cheatsheet-layout
    :custom
    (meow-cheatsheet-layout-qwerty t)
    )

#+end_src

** Helpers

#+begin_quote

Meow helpers for customization.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-helpers
    :config
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "h-j")
     '("k" . "h-k")
     '("/" . "h-/")
     '("z" . "C-z")
     ;; Use SPC (0-9) for digit arguments.
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     )
    (meow-motion-overwrite-define-key
     '("<escape>" . ignore)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("/" . isearch-forward-word)
     )
    )

#+end_src

** Normal Mode

#+begin_src emacs-lisp

  (use-package meow-helpers
    :config
    (meow-normal-define-key
     '("-" . negative-argument)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("'" . repeat)
     '("=" . meow-indent)
     '("|" . align-regexp)
     '("<escape>" . ignore)
     '("/" . isearch-forward-word)
     '("?" . meow-comment)
     '("%" . meow-query-replace)
     '("&" . meow-query-replace-regexp)
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("0" . meow-expand-0)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . backward-sexp)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . down-list)
     '("k" . meow-prev)
     '("K" . backward-up-list)
     '("l" . meow-right)
     '("L" . forward-sexp)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("S" . kill-sexp)
     '("t" . meow-transpose-sexp)
     '("u" . meow-undo)
     '("U" . undo-redo)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . mark-sexp)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     )
    )

#+end_src

** Thing

#+begin_quote

Calculate bounds of thing in Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-thing
    :config
    (meow-thing-register 'arrow '(pair ("<") (">")) '(pair ("<") (">")))
    )

#+end_src

** [[https://github.com/skissue/meow-tree-sitter][Tree-Sitter]]

#+begin_quote

Tree-sitter powered motions for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-tree-sitter
    :ensure t
    :config
    (meow-tree-sitter-register-defaults)
    )

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package meow-helpers
    :after embark
    :config
    (meow-normal-define-key
     '(";" . embark-act))
    )

#+end_src

** [[https://github.com/awth13/org-appear/issues/42#issuecomment-1063517134][Org Appear]]

#+begin_src emacs-lisp

  (use-package meow-core
    :after org-appear
    :custom
    (org-appear-trigger 'manual)
    :config
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'meow-insert-enter-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'meow-insert-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t)))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-keys-meow)
#+end_src

* User Interface
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-ui.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** IMPORTANT

[[https://www.masteringemacs.org/article/bad-emacs-advice][Enable the menu bar if you're a new user]].
It may not look good, but it is a really useful tool.
You can disable it after getting used to Emacs.

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (menu-bar-mode nil)
    (ring-bell-function #'ignore)
    (scroll-preserve-screen-position t)
    (tool-bar-mode nil)
    (tooltip-mode nil)
    (use-dialog-box nil)
    (use-file-dialog nil)
    (visible-bell nil)
    (x-stretch-cursor t)
    (x-underline-at-descent-line nil)
    )

#+END_src

** Display Line Numbers

#+begin_quote

Interface for display-line-numbers.

#+end_quote

#+begin_src emacs-lisp

  (use-package display-line-numbers
    :hook
    (prog-mode . display-line-numbers-mode)
    )

#+end_src

** [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#font-configuration][Faces]]

#+begin_quote

Lisp faces.

#+end_quote

#+begin_src emacs-lisp

  (use-package faces
    :preface
    (defun dw/set-font-faces ()
      ;; Set the default face
      (set-face-attribute 'default nil :font "Cascadia Code NF")
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "Cascadia Mono NF")
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Cascadia Code NF" :weight 'regular))
    :init
    (dw/set-font-faces)
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package faces
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (dw/set-font-faces))))
    )

#+end_src

*** [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/init.el#L106][Frame]]

#+begin_quote

Multi-frame management independent of window systems.

#+end_quote

#+begin_src emacs-lisp

  (use-package frame
    :custom
    (window-divider-default-bottom-width 1)
    (window-divider-default-places t)
    (window-divider-default-right-width 1)
    :hook
    (doc-view-mode . (lambda () (setq-local blink-cursor-mode nil)))
    :init
    (window-divider-mode)
    )

#+end_src

** [[https://emacsredux.com/blog/2020/11/21/disable-global-hl-line-mode-for-specific-modes/][Highlight Line]]

#+begin_quote

Highlight the current line.

#+end_quote

#+begin_src emacs-lisp

  (use-package hl-line
    :init
    (global-hl-line-mode)
    :hook
    (dashboard-mode . (lambda () (setq-local global-hl-line-mode nil)))
    (vterm-mode . (lambda () (setq-local global-hl-line-mode nil)))
    )

#+end_src

** [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/init.el#L73][Mouse]]

#+begin_src emacs-lisp

  (use-package mouse
    :if (display-graphic-p)
    :init
    (context-menu-mode)
    )
#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package mouse
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (context-menu-mode)))
    )

#+end_src

** Org Mode

*** [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#better-font-faces][Faces]]

#+begin_src emacs-lisp

  (use-package org-faces
    :config
    (dolist
        (face '(
                (org-level-1 . 1.30)
                (org-level-2 . 1.29)
                (org-level-3 . 1.28)
                (org-level-4 . 1.27)
                (org-level-5 . 1.26)
                (org-level-6 . 1.25)
                (org-level-7 . 1.24)
                (org-level-8 . 1.23)
                )
              )
      (set-face-attribute (car face) nil :font "Cascadia Code NF" :weight 'medium :height (cdr face)))
    (set-face-attribute 'org-document-title nil :font "Cascadia Code NF" :weight 'medium :height 1.40)
    )

#+end_src

*** Fontify

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-ellipsis "…")
    (org-fontify-done-headline t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-whole-heading-line t)
    (org-hide-emphasis-markers t)
    (org-hide-leading-stars)
    )

#+end_src

*** Prettify

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-pretty-entities t)
    (org-pretty-entities-include-sub-superscripts t)
    )

#+end_src

*** [[https://github.com/minad/org-modern][Org Modern]]

#+begin_quote

Modern Org Style.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-modern
    :custom
    (org-modern-star 'replace)
    (org-modern-replace-stars "󰪥󰪤󰪣󰪢󰪡󰪠󰪟")
    (org-modern-table-vertical 1)
    :ensure t
    :init
    (global-org-modern-mode)
    )

#+end_src

**** Prettify Agenda

#+begin_src emacs-lisp

  (use-package org-agenda
    :custom
    (org-agenda-block-separator ?─)
    (org-agenda-current-time-string
     "←──────────────")
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    )

#+end_src

** [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/init.el#L70][Paragraphs]]

#+begin_quote

Paragraph and sentence parsing.

#+end_quote

#+begin_src emacs-lisp

  (use-package paragraphs
    :custom
    (sentence-end-double-space nil)
    :defer t
    )

#+end_src

** Scroll Bar

#+begin_quote

Window system-independent scroll bar support.

#+end_quote

#+begin_src emacs-lisp

  (use-package scroll-bar
    :custom
    (scroll-bar-mode nil)
    )

#+end_src

** Startup

#+begin_quote

This file parses the command line and gets Emacs running. Options on the command line are handled in precedence order.

#+end_quote

#+begin_src emacs-lisp

  (use-package startup
    :config
    (advice-add #'display-startup-echo-area-message :override #'ignore)
    (advice-add #'display-startup-screen :override #'ignore)
    :custom
    (initial-scratch-message nil)
    (inhibit-startup-echo-area-message t)
    (inhibit-startup-message t)
    (inhibit-startup-screen t)
    :defer t
    )

#+end_src

*** [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L182][Credits]]

*** [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L100][Window]]

#+begin_quote

Window tree functions.

#+end_quote

#+begin_src emacs-lisp

  (use-package window
    :custom
    (recenter-positions '(top middle bottom)) ;; 2
    (scroll-error-top-bottom t) ;; 1
    (split-height-threshold nil) ;;1
    (split-width-threshold 170) ;; 1
    (switch-to-buffer-obey-display-actions t) ;; 2
    )

#+end_src

**** Credits

1. [[https://github.com/jamescherti/minimal-emacs.d/blob/main/init.el][jamescherti]];
2. [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el][oantolin]].

** [[https://codeberg.org/blau_araujo/edz/src/branch/main/parte-06-final/config.org#headline-37][Which Key]]

#+begin_quote

Display available keybindings in popup.

#+end_quote

#+begin_src emacs-lisp

  (use-package which-key
    :custom
    (which-key-add-column-padding 1)
    (which-key-idle-delay 0.5)
    (which-key-min-display-lines 6)
    (which-key-separator " = ")
    (which-key-side-window-slot -10)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    :init
    (which-key-mode)
    )

#+end_src

** [[https://github.com/catppuccin/emacs][Catppuccin]]

#+begin_quote

Soothing pastel theme for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :preface
    (load-theme 'catppuccin t)
    :ensure t
    )

#+end_src

** [[https://github.com/ankurdave/color-identifiers-mode][Color Identifier Mode]]

#+begin_quote

Emacs minor mode to highlight each source code identifier uniquely based on its name.

#+end_quote

#+begin_src emacs-lisp

  (use-package color-identifiers-mode
    :ensure t
    :config
    (defun gs-101/color-identifiers-toggle-on-ts-mode ()
      "Check if MAJOR MODE is a tree-sitter mode.
  If it is, enable `color-identifiers-mode'."
      (when (string-match-p "-ts-mode\\'" (symbol-name major-mode))
        (color-identifiers-mode))
      (when (bound-and-true-p prism-mode)
        (setq-local color-identifiers-mode nil)))
    :hook
    (prog-mode . gs-101/color-identifiers-toggle-on-ts-mode)
    )

#+end_src

** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]

#+begin_quote

An extensible emacs dashboard.

#+end_quote

#+begin_src emacs-lisp

  (use-package dashboard
    :custom
    (dashboard-center-content t)
    (dashboard-vertically-center-content t)
    (dashboard-startupify-list '(
                                 dashboard-insert-banner
                                 dashboard-insert-banner-title
                                 dashboard-insert-newline
                                 dashboard-insert-init-info
                                 dashboard-insert-items
                                 dashboard-insert-newline
                                 dashboard-insert-navigator
                                 dashboard-insert-newline
                                 dashboard-insert-footer
                                 ))
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    :preface
    (defun dashboard-create-scratch-buffer ()
      "Create a scratch buffer."
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*")))
    )

#+end_src

*** Widgets

#+begin_quote

A startup screen extracted from Spacemacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package dashboard-widgets
    :after dashboard
    :custom
    (dashboard-banner-logo-title "The Extensible Computing Enviroment")
    (dashboard-items '(
                       (agenda . 5)
                       (projects . 5)
                       (recents . 5)
                       ))
    (dashboard-startup-banner (expand-file-name "emacs.png" user-emacs-directory))
    (dashboard-week-agenda nil)
    )

#+end_src

**** Icons

#+begin_src emacs-lisp

  (use-package dashboard-widgets
    :after dashboard nerd-icons
    :custom
    (dashboard-display-icons-p t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-set-file-icons t)
    (dashboard-set-heading-icons t)
    :config
    (dashboard-modify-heading-icons '(
                                      (agenda . "nf-oct-calendar")
                                      (projects . "nf-oct-project")
                                      (recents . "nf-oct-clock")
                                      ))
    )

#+end_src

*** Navigator Buttons

#+begin_src emacs-lisp

  (use-package dashboard-widgets
    :after dashboard nerd-icons
    :custom
    (dashboard-navigator-buttons
     `(;; line1
       (
        (,(nerd-icons-mdicon "nf-md-github")
         "Source Repository"
         "Open the source repository in the browser"
         (lambda (&rest _) (browse-url "https://github.com/gs-101/.emacs.d"))
         'default)
        )
       ;;line 2
       (
        (,(nerd-icons-mdicon "nf-md-note_outline")
         "Open Scratch Buffer"
         "Switch to the scratch buffer"
         (lambda (&rest _) (dashboard-create-scratch-buffer))
         'default)
        (,(nerd-icons-mdicon "nf-md-calendar_outline")
         "Open Org Agenda"
         "Switch to the agenda buffer"
         (lambda (&rest _) (org-agenda))
         'default)
        (,(nerd-icons-mdicon "nf-md-cog")
         "Open Config"
         "Switch to the configuration file buffer"
         (lambda (&rest _) (interactive) (find-file (expand-file-name "emacs.org" user-emacs-directory)))
         'default)
        )
       ))
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package startup
    :after dashboard
    :custom
    (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
    :defer t
    )

#+end_src

** [[https://github.com/seagle0128/doom-modeline][DOOM Modeline]]

#+begin_quote

A fancy and fast mode-line inspired by minimalism design.

#+end_quote

#+begin_src emacs-lisp

  (use-package doom-modeline
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-ellipsis "…")
    (doom-modeline-enable-word-count t)
    (doom-modeline-modal-modern-icon nil)
    :ensure t
    :init
    (doom-modeline-mode)
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package doom-modeline
    :after doom-modeline
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)))
    )

#+end_src

** [[https://github.com/purcell/diredfl][diredfl]]

#+begin_quote

Extra Emacs font lock rules for a more colourful dired.

#+end_quote

#+begin_src emacs-lisp

  (use-package diredfl
    :ensure t
    :hook
    (dired-mode . diredfl-global-mode)
    )

#+end_src

** [[https://github.com/casouri/eldoc-box][ElDoc Box]]

#+begin_quote

Childframe doc for eglot and anything that uses eldoc.

#+end_quote

#+begin_src emacs-lisp

  (use-package eldoc-box
    :after eldoc
    :ensure t
    :hook
    (eldoc-mode . eldoc-box-hover-mode)
    )

#+end_src

** [[https://github.com/Wilfred/helpful][Helpful]]

#+begin_quote

A better Emacs help buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    :ensure t
    )

#+end_src

** [[https://github.com/tarsius/hl-todo][hl-todo]]

#+begin_quote

Highlight TODO keywords.

#+end_quote

#+begin_src emacs-lisp

  (use-package hl-todo
    :custom
    (hl-todo-keyword-faces '(
                             ("NOTE" . "yellow")
                             ("FIX" . "red")
                             ("FIXME" . "red")
                             ("FEAT" . "yellow")
                             ("HACK" . "green")
                             ("STYLE" . "orange")
                             ("REFACTOR" . "white")
                             ("REVIEW" . "white")
                             ("CHORE" . "grey")
                             ("MERGED" . "green")
                             ("CLOSED" . "red")
                             ))
    :ensure t
    :hook
    (markdown-mode . hl-todo-mode)
    (org-mode . hl-todo-mode)
    (prog-mode . hl-todo-mode)
    )

#+end_src

*** Catppuccin Colors

#+begin_src emacs-lisp

  (use-package hl-todo
    :after hl-todo catppuccin-theme
    :custom
    (hl-todo-keyword-faces
     (mapcar (lambda (keyword-color)
               (cons (car keyword-color)
                     (catppuccin-get-color (cdr keyword-color))))
             '(
               ("NOTE" . yellow)
               ("FIX" . red)
               ("FIXME" . red)
               ("FEAT" . yellow)
               ("HACK" . green)
               ("STYLE" . lavender)
               ("REFACTOR" . sapphire)
               ("REVIEW" . sapphire)
               ("CHORE" . overlay0)
               ("MERGED" . green)
               ("CLOSED" . red)
               )))
  )

#+end_src

** [[https://github.com/tarsius/keycast][Keycast]]


#+begin_quote

Show current command and its key in the mode line.

#+end_quote

#+begin_src emacs-lisp

  (use-package keycast
    :config
    (set-face-attribute 'keycast-key nil :background nil :foreground "default" :box nil)
    (push '(self-insert-command nil nil) keycast-substitute-alist)
    (push '(org-self-insert-command nil nil) keycast-substitute-alist)
    :ensure t
    :init
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with `doom-modeline')."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))
    (keycast-mode)
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package keycast
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-face-attribute 'keycast-key nil :background nil :foreground "default" :box nil))))
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#showing-embark-actions-keys-in-keycast-mode][Embark Support]]

#+begin_src emacs-lisp

  (use-package keycast
    :after embark
    :config
    (defun oantolin/keycast-store-action-key-cmd (cmd)
      "Store key and CMD command information for `keycast' use."
      (force-mode-line-update t)
      (setq this-command cmd
            keycast--this-command-keys (this-single-command-keys)
            keycast--this-command-desc cmd))
    (advice-add 'embark-keymap-prompter :filter-return #'oantolin/keycast-store-action-key-cmd)
    (defun oantolin/keycast--update-force (&rest _)
      "Version of `keycast--update' that accepts (and ignore) parameters."
      (keycast--update))
    (advice-add 'embark-act :before #'oantolin/keycast--update-force)
    )

#+end_src

** [[https://github.com/mickeynp/ligature.el][Ligatures]]

#+begin_quote

Display typographical ligatures in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package ligature
    :config
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    :ensure t
    :hook
    (prog-mode . ligature-mode)
    )

#+end_src

** Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :after markdown-mode
    :custom
    (markdown-enable-highlighting-syntax t)
    (markdown-hide-markup t)
    )

#+end_src


** [[https://github.com/rainstormstudio/nerd-icons.el][Nerd Icons]]

#+begin_quote

A Library for Nerd Font icons.

#+end_quote

#+begin_src emacs-lisp

  (use-package nerd-icons
    :bind
    ("C-z i n" . nerd-icons-insert)
    :demand t
    :ensure t
    )

#+end_src

*** [[https://github.com/emacs-citar/citar/wiki/Indicators#nerd-icons][Citar]]

#+begin_src emacs-lisp

  (use-package citar
    :after citar nerd-icons
    :config
      (defvar citar-indicator-cited-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-record"
                  :face 'nerd-icons-lgreen)
         :function #'citar-is-cited
         :padding "  "
         :tag "is:cited"))
        (defvar citar-indicator-files-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-file"
                  :face 'nerd-icons-blue
                  :v-adjust -0.1)
         :function #'citar-has-files
         :padding "  " ; need this because the default padding is too low for these icons
         :tag "has:files"))
      (defvar citar-indicator-links-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-link"
                  :face 'nerd-icons-lblue
                  :v-adjust 0.01)
         :function #'citar-has-links
         :padding "  "
         :tag "has:links"))
      (defvar citar-indicator-notes-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-text"
                  :face 'nerd-icons-blue
                  :v-adjust -0.3)
         :function #'citar-has-notes
         :padding "    "
         :tag "has:notes"))
      (setq citar-indicators
       (list
        citar-indicator-cited-icons
        citar-indicator-files-icons
        citar-indicator-links-icons
        citar-indicator-notes-icons
        ))
      )

#+end_src

*** [[https://github.com/rainstormstudio/nerd-icons-completion][Completion]]

#+begin_src emacs-lisp

  (use-package nerd-icons-completion
    :after nerd-icons
    :ensure t
    :config
    (nerd-icons-completion-mode)
    )

#+end_src

**** [[https://github.com/rainstormstudio/nerd-icons-completion?tab=readme-ov-file#setup][Marginalia]]

#+begin_src emacs-lisp

  (use-package nerd-icons-completion
    :after nerd-icons
    :hook
    (marginalia-mode . nerd-icons-completion-marginalia-setup)
    )

#+end_src

*** [[https://github.com/mohkale/compile-multi/tree/master?tab=readme-ov-file#compile-multi-nerd-icons][compile-multi]]

#+begin_src emacs-lisp

  (use-package compile-multi-nerd-icons
    :after nerd-icons compile-multi
    :ensure t
    )

#+end_src

*** [[https://github.com/LuigiPiucco/nerd-icons-corfu][Corfu]]

#+begin_src emacs-lisp

  (use-package nerd-icons-corfu
    :after nerd-icons corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    :ensure t
    )

#+end_src

*** [[https://github.com/rainstormstudio/nerd-icons-dired][Dired]]

#+begin_src emacs-lisp

  (use-package nerd-icons-dired
    :after nerd-icons
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode)
    )

#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (flymake-indicator-type 'margins)
    (flymake-margin-indicators-string '(
                                        (error "󰃤" compilation-error)
                                        (warning "" compilation-warning)
                                        (note "󰎚" compilation-info)
                                        ))
    )

#+end_src

*** [[https://github.com/seagle0128/nerd-icons-ibuffer][iBuffer]]

#+begin_src emacs-lisp

  (use-package nerd-icons-ibuffer
    :after nerd-icons
    :ensure t
    :hook
    (ibuffer-mode . nerd-icons-ibuffer-mode)
    )

#+end_src

*** [[https://github.com/gekoke/magit-file-icons][Magit]]

#+begin_src emacs-lisp

  (use-package magit-file-icons
    :after nerd-icons magit
    :ensure t
    :hook
    (magit-mode . magit-file-icons-mode)
    )

#+end_src

** [[https://github.com/karthink/popper][Popper]]

#+begin_quote

Emacs minor-mode to summon and dismiss buffers easily.

#+end_quote

#+begin_src emacs-lisp

  (use-package popper
    :bind
    ("M-]" . popper-cycle)
    ("M-[" . popper-toggle)
    :custom
    (popper-display-control t)
    (popper-reference-buffers '(
                                compilation-mode
                                vterm-mode
                                inferior-emacs-lisp-mode
                                inferior-python-mode
                                shell-mode
                                "\\*Async Shell Command\\*"
                                "\\*Backtrace\\*"
                                "\\*compilation\\*"
                                "\\*Dtache Shell Command\\*"
                                "\\*eldoc\\*"
                                "\\*Embark Collect:"
                                "\\*Ement Notifications\\*"
                                "*Flymake diagnostics.*"
                                "\\*GDB.*out\\*"
                                "\\*Messages\\*"
                                "\\*mu4e-update\\*"
                                "Output\\*$"
                                "\\*Org Src"
                                "^*tex"
                                "\\*Warnings\\*"
                                "\\*xref\\*"
                                ))
    :ensure t
    :demand t
    :init
    (popper-mode)
    )

#+end_src

** [[https://github.com/alphapapa/prism.el][Prism]]

Disperse Lisp forms (and other languages) into a spectrum of colors by depth.

#+begin_src emacs-lisp

  (use-package prism
    :config
    (defun gs-101/prism-mode-lisp ()
      "Check if MAJOR MODE is a Lisp mode.
  If it is, enable `prism-mode'."
      (when (string-match-p "lisp.*-mode\\'" (symbol-name major-mode))
        (prism-mode))
      (when (string-match-p "scheme-mode\\'" (symbol-name major-mode))
        (prism-mode)))
    :ensure t
    :hook
    (prog-mode . gs-101/prism-mode-lisp)
    (python-base-mode . prism-whitespace-mode)
    )

#+end_src

*** Catppuccin Colors

#+begin_src emacs-lisp

  (use-package prism
    :after prism catppuccin-theme
    :config
    (defun prism-catppuccin-colors ()
      "Grab color definitions from catppuccin and use them to set prism's colors."
      (prism-set-colors
        :lightens '(0 5 10)
        :desaturations '(-2.5 0 2.5)
        :colors (-map #'catppuccin-get-color '(
                                               red
                                               peach
                                               yellow
                                               green
                                               sapphire
                                               lavender
                                               mauve
                                               ))))
    (prism-catppuccin-colors)
    )

#+end_src

**** Daemon Support

#+begin_src emacs-lisp

  (use-package prism
    :if (daemonp)
    :after prism catppuccin-theme
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                (prism-catppuccin-colors))))
    )

#+end_src

** [[https://github.com/yanghaoxie/transient-posframe][Transient Posframe]]

#+begin_quote

Pops the transient menu to a posframe (floating window).

#+end_quote

#+begin_src emacs-lisp

  (use-package transient-posframe
    :after transient
    :vc (:url "https://github.com/tarsiiformes/transient-posframe" :branch fix-sizing)
    :ensure t
    :config
    (transient-posframe-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-ui)
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle t t)
# End:
