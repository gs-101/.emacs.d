#+title: Emacs Configuration

* Early Init
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./early-init.el
:END:

** Native and byte compilation
:PROPERTIES:
:CREDITS:  https://github.com/jamescherti/minimal-emacs.d/blob/9fdfca3265246341ab63fe790b99bd4a2f3cca6d/early-init.el#L217
:END:

If Emacs is built with native compilation support, activate it¹, if not, disable it².

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  ;; 1
  (if (and (featurep #'native-compile)
           (fboundp #'native-comp-available-p)
           (native-comp-available-p))
      (setq native-comp-jit-compilation t
            package-native-compile t)
    ;; 2
    (setq features (delq #'native-compile features)))

  ;; Disable package initialization on startup
  ;; packages are only used in the modules.
  (setq package-enable-at-startup nil)

#+end_src

** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#native-compilation-cache][Native Compilation Cache]]

Moves the Native Compilation Cache folder out of the Emacs base folder.

#+begin_src emacs-lisp

  (when (fboundp #'startup-redirect-eln-cache)
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))

#+end_src

** Directory Variables

Variables used to reference to specific directories, using ~convert-standard-filename~ for multiple OS support.

#+begin_src emacs-lisp

  (defcustom gs-101/projects-code-directory (convert-standard-filename (expand-file-name "~/Projects/Code/"))
    "Path for project related to code, like applications."
    :type 'directory
    )
  (defcustom gs-101/modules-directory (convert-standard-filename (expand-file-name "modules" user-emacs-directory))
    "Path for this configuration's modules."
    :type 'directory
    )

#+end_src

** Helpers

#+begin_src emacs-lisp

  (defun gs-101/guix-p ()
    "Check if guix is installed in the current system."
    (executable-find "guix"))

  (defun gs-101/nobara-p ()
    "Check if the current system uses Nobara Linux as its distribution."
    (executable-find "nobara-welcome"))

#+end_src

* Load Modules
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./init.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name gs-101/modules-directory))

  (require 'gs-package)
  (require 'gs-settings)
  (require 'gs-fm)
  (require 'gs-keys)
  (require 'gs-org)
  (require 'gs-org-roam)
  (require 'gs-citar)
  (require 'gs-dev)
  (require 'gs-completion)
  (require 'gs-utils)
  (require 'gs-chat)
  (require 'gs-elfeed)
  ;;(require 'gs-keys-evil)
  ;;(require 'gs-keys-meow)
  (require 'gs-ui)

#+end_src

* Package System Set-up
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :link yes :tangle ./modules/gs-package.el
:CREDITS:  https://github.com/jamescherti/minimal-emacs.d/blob/9fdfca3265246341ab63fe790b99bd4a2f3cca6d/early-init.el#L217
:END:

** Package

#+begin_quote

Simple package system [...].

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (require 'package)
  (package-initialize)
  (mapc (lambda (archive)
          (add-to-list 'package-archives archive)) '(
          ("melpa" . "https://melpa.org/packages/")
          ("jcs-elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/")
          ))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-package)
#+end_src

* Settings
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-settings.el
:END:

Configuration of default Emacs packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Default packages

*** Advice

#+begin_quote

An overloading mechanism for Emacs Lisp functions.

#+end_quote

#+begin_src emacs-lisp

  (use-package advice
    :custom
    (ad-redefinition-action 'accept)
    )

#+end_src

*** Byte Compilation

#+begin_quote

The Emacs Lisp byte compiler. This crunches Lisp source into a sort of p-code (~lapcode~) which takes up less space and can be interpreted faster.

#+end_quote

#+begin_src emacs-lisp

  (use-package bytecomp
    :custom
    (byte-compile-warnings '(not obsolete))
    )

#+end_src

*** Byte Compilation

#+begin_quote

This file contains all the code needed to drive async compilations and any Lisp code needed at runtime to run native code.

#+end_quote

#+begin_src emacs-lisp

  (use-package comp-run
    :custom
    (native-comp-async-query-on-exit t)
    (native-comp-async-report-warnings-errors 'silent)
    )

#+end_src

*** Ediff Window

#+begin_quote

window manipulation utilities.

#+end_quote

#+begin_src emacs-lisp

  (use-package ediff-wind
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    )

#+end_src

*** Emacs
:PROPERTIES:
:CREDITS:  1. [[https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/early-init.el][ashton]], 2. [[https://github.com/gopar/.emacs.d/blob/main/README.org#recommended-packagessnippets-to-have-as-early-as-possible][gopar]], 3. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#][jamescherti]], 4. [[https://github.com/minad/vertico?tab=readme-ov-file#configuration][minad]], 5. [[https://github.com/oantolin/emacs-config/tree/master][oantolin]]
:END:

Generic package used to configure functions and variables not included in any Emacs Lisp files. This is mainly used for files defied in C code.

#+begin_src emacs-lisp

  (use-package emacs
    :config
    (setq define-coding-system-alias '(UTF-8 'utf-8))
    :custom
    (auto-save-include-big-deletions)
    (auto-window-vscroll nil) ;; 3
    (bidi-inhibit-bpa t) ;; 3
    (completion-ignore-case t) ;; 4
    (cursor-in-non-selected-windows nil) ;; 3
    (debugger-stack-frame-as-list t) ;; 5
    (enable-recursive-minibuffers t)
    (fast-but-imprecise-scrolling t) ;; 3
    (frame-resize-pixelwise t) ;; 1
    (history-delete-duplicates t) ;; 5
    (hscroll-margin 2) ;; 3
    (hscroll-step 1) ;; 3
    (inhibit-compacting-font-caches t) ;; 3
    (load-prefer-newer t) ;; 2
    (locale-coding-system 'utf-8)
    ;; Disable the cursor in the minibuffer prompt
    (minibuffer-prompt-properties '(
                                    cursor-intangible t
                                    read-only t
                                    face minibuffer-prompt
                                    )) ;; 4
    (read-buffer-completion-ignore-case t) ;; 4
    (read-process-output-max (* 512 1024)) ;; 3
    (resize-mini-windows 'grow-only)
    (scroll-conservatively 100000)
    (scroll-margin 2)
    (scroll-step 1)
    (tab-width 4)
    (text-mode-ispell-word-completion nil)
    (user-full-name "Gabriel Santos")
    (window-resize-pixelwise nil) ;; 1
    (words-include-escapes t)
    :hook
    (minibuffer-setup . cursor-intangible-mode) ;; 4
    )

#+end_src

*** EPG Configuration

#+begin_quote

Configuration of the EasyPG Library.

#+end_quote

#+begin_src emacs-lisp

  (use-package epg-config
    :custom
    (epg-pinentry-mode 'loopback)
    )

#+end_src

#+begin_src conf-unix :results none :mkdirp yes :tangle ~/.gnupg/gpg-agent.conf
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_src

*** Files
:PROPERTIES:
:CREDITS:  1. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L178][jamescherti]], 2. [[https://github.com/Nathan-Furnal/dotemacs/blob/45defa98dfa7a7c401ca692e9479e588896b9261/init.el#L226][nathan-furnal]], 3. [[https://github.com/oantolin/emacs-config/tree/master][oantolin]], 4. [[https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-files.el][xenodium]]
:END:

#+begin_quote

Defines most of Emacs's file- and directory-handling functions, including basic file visiting, backup generation, link handling, ITS-id version control, load- and write-hook handling, and the like.

#+end_quote

#+begin_src emacs-lisp

  (use-package files
    :config
    (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p) ;; 3
    (add-to-list 'find-file-not-found-functions #'xenodium/files-create-non-existent-directory) ;; 4
    :custom
    (auto-mode-case-fold nil)
    (backup-by-copying t) ;; 2
    (backup-by-copying-when-linked t) ;; 2
    (delete-old-versions t)
    (find-file-suppress-same-file-warnings t)
    (find-file-visit-truename t)
    (kept-new-versions 5) ;; 2
    (kept-old-versions 5) ;; 2
    (revert-without-query '("")) ;; 3
    (trusted-content '(
                       (package-user-dir)
                       (gs-101/modules-directory)
                       (gs-101/projects-code-directory)
                       ))
    (version-control t) ;; 2
    (view-read-only t) ;; 3
    :preface
    (defun xenodium/files-create-non-existent-directory ()
      "Create a non-existent directory."
      (when-let* ((file-name buffer-file-name)
                  (parent-directory (file-name-parent-directory file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Create `%s' dir? " parent-directory)))
          (make-directory parent-directory t))))
    )

#+end_src

*** Frame

#+begin_quote

Multi-frame management independent of window systems.

#+end_quote

This is just to remove the =suspend-frame= command, which I don't find useful. This liberates =C-z= to have it used as a prefix.

#+begin_src emacs-lisp

  (use-package frame
    :bind
    ("C-z" . nil)
    )

#+end_src

*** grep

#+begin_quote
run `grep' and display the results.
#+end_quote

#+begin_src emacs-lisp

  (use-package grep
    :custom
    (grep-use-headings t)
    )

#+end_src

*** Help

#+begin_quote

Help commands for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package help
    :custom
    (help-window-select t)
    )

#+end_src

*** [[https://github.com/kickingvegas/casual-ibuffer?tab=readme-ov-file#configuration][iBuffer Extensions]]

#+begin_quote

Extensions for iBuffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package ibuf-ext
    :defer t
    :hook
    (ibuffer-mode . ibuffer-auto-mode)
    )

#+end_src

*** Image Mode
:PROPERTIES:
:CREDITS:  https://codeberg.org/zyd/dotfiles/src/commit/e2deef9551ec259e62e19abe3a9b86feb4a5c870/emacs.d/init.el#L904
:END:

#+begin_quote

Support for visiting image files.

#+end_quote

#+begin_src emacs-lisp

  (use-package image-mode
    :after dired
    :custom
    (image-animate-loop t)
    )

#+end_src

*** iMenu

#+begin_quote

Purpose of this package:

- To present a framework for mode-specific buffer indexes;
- A buffer index is an alist of names and buffer positions.

#+end_quote

#+begin_src emacs-lisp

  (use-package imenu
    :custom
    (imenu-flatten 'annotation)
    (imenu-space-replacement nil)
    )

#+end_src

*** Indent

#+begin_quote

Commands for making and changing indentation in text. These are described in the Emacs manual.

#+end_quote

#+begin_src emacs-lisp

  (use-package indent
    :custom
    (tab-always-indent 'complete)
    :defer t
    )

#+end_src

*** iSearch

#+begin_quote

Incremental search minor mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package isearch
    :custom
    (isearch-allow-scroll t)
    (isearch-lazy-count t)
    (lazy-count-prefix-format "(%s/%s) ")
    (lazy-count-suffix-format nil)
    (lazy-highlight-initial-delay 0.0)
    )

#+end_src

*** Minibuffer
:PROPERTIES:
:CREDITS:  1. [[https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/init.el#L107][ashton314]], 2. [[https://github.com/minad/vertico?tab=readme-ov-file#completion-styles-and-tab-completion][minad]]
:END:

#+begin_src emacs-lisp

  (use-package minibuffer
    :custom
    (completions-detailed t) ;; 1
    (completions-format 'vertical)
    (completions-group t) ;; 1
    (read-file-name-completion-ignore-case t) ;; 2
    (resize-mini-windows t)
    :init
    (minibuffer-depth-indicate-mode)
    (minibuffer-electric-default-mode)
    )

#+end_src

*** Mode Local

#+begin_quote

There are buffer local variables (and there were frame local variables). This library gives the illusion of mode specific variables.

#+end_quote

#+begin_src emacs-lisp

  (use-package mode-local
    )

#+end_src

*** Mouse

#+begin_quote

This package provides various useful commands (including help system access) through the mouse.  All this code assumes that mouse interpretation has been abstracted into Emacs input events.

#+end_quote

#+begin_src emacs-lisp

  (use-package mouse
    :custom
    (mouse-yank-at-point t)
    )

#+end_src

*** Mule

Multilingual Enviroment.

#+begin_src emacs-lisp

  (use-package mule
    :config
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    :defer t
    )

#+end_src

**** Cmds
:PROPERTIES:
:CREDITS:  1. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L65][jamescherti]], 2. [[https://github.com/oantolin/emacs-config/blob/master/init.el][oantolin]]
:END:

#+begin_quote

Commands for Multilingual Enviroment.

#+end_quote

#+begin_src emacs-lisp

  (use-package mule-cmds
    :config
    (set-language-environment 'utf-8)
    (prefer-coding-system 'utf-8)
    :custom
    (current-language-environment "UTF-8") ;; 2
    (default-input-method nil) ;; 1
    :defer t
    )

#+end_src

**** Util

#+begin_quote

Utility functions for Multilingual Enviroment.

#+end_quote

#+begin_src emacs-lisp

  (use-package mule-util
    :custom
    (truncate-string-ellipsis "…")
    )

#+end_src

*** New Comment

#+begin_quote

(un)comment regions of buffers.

#+end_quote

#+begin_src emacs-lisp

  (use-package newcomment
    :custom
    (comment-empty-lines t)
    )

#+end_src

*** Paren

#+begin_quote

Highlight matching paren.

#+end_quote

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match nil :foreground 'unspecified :box '(:line-width (-1 . -1)))
    :custom
    (show-paren-delay 0)
    :init
    (show-paren-mode)
    )

#+end_src

*** Password

**** Cache

#+begin_quote

Read passwords, possibly using a password cache.

#+end_quote

#+begin_src emacs-lisp

  (use-package password-cache
    :custom
    (password-cache-expiry 60)
    )

#+end_src

*** Save History

#+begin_quote

Save minibuffer history.

#+end_quote

#+begin_src emacs-lisp

  (use-package savehist
    :custom
    (history-length 300)
    :init
    (savehist-mode)
    )

#+end_src

*** Send Mail

#+begin_quote

This mode provides mail-sending facilities from within Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package sendmail
    :custom
    (sendmail-program "msmtp")
    :defer t
    )

#+end_src

*** Simple
:PROPERTIES:
:CREDITS:  1. [[https://codeberg.org/ashton314/emacs-bedrock/src/branch/main/early-init.el][ashton]], 2. [[https://github.com/gopar/.emacs.d/blob/main/README.org#simple][gopar]], 3. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L112][jamescherti]], 4. [[https://github.com/minad/vertico?tab=readme-ov-file#configuration][minad]], 5. [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el#L55][oantolin]], 6. [[https://emacs.dyerdwelling.family/emacs/20241118102423-emacs--copying-buffer-to-kill-ring/][James Dyer]]
:END:

#+begin_quote

A grab-bag of basic Emacs commands not specifically related to some major mode or to file-handling.

#+end_quote

#+begin_src emacs-lisp

  (use-package simple
    :bind
    ("C-x M-h" . captainflasmr/copy-buffer-to-kill-ring)
    :custom
    (blink-matching-paren nil)
    (column-number-mode t)
    (completion-auto-select 'second-tab) ;; 1
    (indent-tabs-mode nil)
    (kill-do-not-save-duplicates t) ;; 5
    (kill-read-only-ok t) ;; 5
    (kill-region-dwim 'emacs-word)
    (kill-whole-line t) ;; 5
    ;; Hides commands in completion that are not usable in the current mode
    (read-extended-command-predicate #'command-completion-default-include-p) ;; 4
    (save-interprogram-paste-before-kill t)
    (set-mark-command-repeat-pop t) ;; 5
    :config
    ;; 6
    (defun captainflasmr/copy-buffer-to-kill-ring (arg)
      "Mark the whole buffer, then copy it to the kill-ring without moving point.
  With a ARG prefix argument, copy the buffer to the other window."
      (interactive "P")
      (if arg
          (save-window-excursion
            (kill-ring-save (point-min) (point-max))
            (other-window 1)
            (erase-buffer)
            (yank))
        (progn
          (save-excursion
            (kill-ring-save (point-min) (point-max)))
          (message "Buffer copied to kill-ring"))))
    :demand t
    )

#+end_src


*** Transient

#+begin_quote

Transient is the library used to implement the keyboard-driven menus in Magit.

#+end_quote

#+begin_src emacs-lisp

  (use-package transient
    :custom
    (transient-mode-line-format nil)
    )

#+end_src

*** Undo Limit

After losing one hour of work on an accident, this might come in handy.

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (undo-limit 67108864) ;; 64 mb
    (undo-strong-limit 100663296) ;; 96 mb
    (undo-outer-limit 1006632960) ;; 960 mb
    )

#+end_src

*** Uniquify

#+begin_quote

Unique buffer names dependent on file name.

#+end_quote

#+begin_src emacs-lisp

  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward)
    )

#+end_src

*** use-package

#+begin_quote

A configuration macro for simplifying your .emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package use-package
    :custom
    (use-package-compute-statistics t)
    (use-package-enable-imenu-support t)
    (use-package-vc-prefer-newest t)
    )

#+end_src

*** Visual Line Mode

#+begin_quote

When Visual Line mode is enabled, `word-wrap' is turned on in this buffer, and simple editing commands are redefined to act on visual lines, not logical lines.

#+end_quote

#+begin_src emacs-lisp

  (use-package simple
    :hook
    (text-mode . visual-line-mode)
    )

#+end_src

*** Warnings

#+begin_quote

Log and display warnings.

#+end_quote

#+begin_src emacs-lisp

  (use-package warnings
    :custom
    (warning-suppress-log-types '((comp) (bytecomp)))
    )

#+end_src

** Third-Party Packages

Packages which I think should be part of Emacs core.

*** [[https://github.com/emacsmirror/gcmh][Garbage Collector Magic Hack]]

#+begin_quote

Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.

#+end_quote

#+begin_src emacs-lisp

  (use-package gcmh
    :vc (:url "https://github.com/emacsmirror/gcmh")
    :ensure t
    :init
    (gcmh-mode)
    )

#+end_src

*** [[https://github.com/aurtzy/disproject][Disproject]]

#+begin_quote

Transient interface for managing and interacting with projects.

#+end_quote

#+begin_src emacs-lisp

  (use-package disproject
    :vc (:url "https://github.com/aurtzy/disproject")
    :bind
    (
     :map ctl-x-map
     ("p" . disproject-dispatch)
     )
    :ensure t
    )

#+end_src

*** [[https://github.com/jrblevin/markdown-mode][Markdown]]

#+begin_quote

Emacs Markdown Mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package markdown-mode
    :vc (:url "https://github.com/jrblevin/markdown-mode")
    :defer t
    :ensure t
    :custom
    (markdown-fontify-code-blocks-natively t)
    )

#+end_src

*** [[https://github.com/gs-101/nil-mode][nil-mode]]

#+begin_quote

 A major mode meant for doing nothing in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package nil-mode
    :vc (:url "https://github.com/gs-101/nil-mode")
    :ensure t
    )

#+end_src

*** [[https://github.com/emacscollective/no-littering][No Littering]]

#+begin_quote

The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isn’t just a problem with third-party packages but even with built-in packages.

#+end_quote

#+begin_src emacs-lisp

  (use-package no-littering
    :vc (:url "https://github.com/emacscollective/no-littering")
    :ensure t
    :init
    (no-littering-theme-backups)
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering#lock-files][Lock Files]]

#+begin_src emacs-lisp

  (use-package no-littering
    :after no-littering
    :config
    (let ((dir (no-littering-expand-var-file-name "lock-files/")))
      (make-directory dir t)
      (setq lock-file-name-transforms `((".*" ,dir t))))
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#recent-files][Recent Files]]

#+begin_quote

Keep track of recently opened files.

#+end_quote

#+begin_src emacs-lisp

  (use-package recentf
    :after no-littering
    :custom
    (recentf-max-saved-items 1000)
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory)
                 (recentf-expand-file-name no-littering-var-directory))
    :config
    (recentf-mode)
    )

#+end_src

**** [[https://github.com/emacscollective/no-littering?tab=readme-ov-file#saved-customizations][Saved Customizations]]

#+begin_src emacs-lisp

  (use-package no-littering
    :after no-littering
    :config
    (when (file-exists-p custom-file)
      (load-file custom-file))
    :custom
    (custom-file (no-littering-expand-etc-file-name "custom.el"))
    )

#+end_src

*** [[https://github.com/rnkn/olivetti][Olivetti]]

#+begin_quote

Minor mode to automatically balance window margins.

#+end_quote

#+begin_src emacs-lisp

  (use-package olivetti
    :vc (:url "https://github.com/rnkn/olivetti")
    :custom
    (olivetti-body-width 132)
    :defer t
    :ensure t
    )

#+end_src

*** [[https://github.com/purcell/exec-path-from-shell][Path from Shell]]

#+begin_quote

Make Emacs use the $PATH set up by the user's shell.

#+end_quote

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :vc (:url "https://github.com/purcell/exec-path-from-shell")
    :ensure t
    :init
    (setq exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize)
    )

#+end_src

*** [[https://karthinks.com/software/fifteen-ways-to-use-embark/#open-a-file-as-root-without-losing-your-session][Sudo Command]]

Like [[https://github.com/nflath/sudo-edit][sudo-edit]], but just a single, non-packaged command.

#+begin_src emacs-lisp

  (use-package emacs
    :init
    (defun karthinks/sudo-find-file (file)
      "Open FILE as root."
      (interactive "FOpen file as root: ")
      (when (file-writable-p file)
        (user-error "File is user-writable, aborting sudo"))
      (find-file (if (file-remote-p file)
                     (concat "/" (file-remote-p file 'method) ":"
                             (file-remote-p file 'user) "@" (file-remote-p file 'host)
                             "|sudo@root@"
                             (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                   (concat "/sudo:root@localhost:" file))))
    )

#+end_src

*** [[https://github.com/jdtsmith/ultra-scroll][ultra-scroll]]

#+begin_src emacs-lisp

  (use-package ultra-scroll
    :vc (:url "https://github.com/jdtsmith/ultra-scroll")
    :custom
    (scroll-conservatively 101)
    (scroll-margin 0)
    :init
    (ultra-scroll-mode)
    )

#+end_src

*** [[https://github.com/casouri/vundo][Vundo]]

#+begin_quote

Visualize the undo tree.

#+end_quote

#+begin_src emacs-lisp

  (use-package vundo
    :vc (:url "https://github.com/casouri/vundo")
    :bind
    (
     ([remap undo] . vundo)
     ([remap undo-redo] . vundo)
     :map vundo-mode-map
     ("C-n" . vundo-next)
     ("C-p" . vundo-previous)
     ("C-f" . vundo-forward)
     ("C-b" . vundo-previous)
     ("C-a" . vundo-stem-root)
     ("C-e" . vundo-stem-end)
     ("l" . nil)
     ("j" . vundo-goto-last-saved)
     )
    :custom
    (vundo-compact-display t)
    (vundo-glyph-alist vundo-unicode-symbols)
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-settings)
#+end_src

* File Management
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-fm.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Autorevert
:PROPERTIES:
:CREDITS:  https://github.com/xenodium/dotsies/blob/main/emacs/features/fe-files.el
:END:

#+begin_quote

Whenever a file that Emacs is editing has been changed by another program the user normally has to execute the command ~revert-buffer~ to load the new content of the file into Emacs.
This package contains two minor modes: Global Auto-Revert Mode and Auto-Revert Mode. Both modes automatically revert buffers whenever the corresponding files have been changed on disk and the buffer contains no unsaved changes.

#+end_quote

#+begin_src emacs-lisp

  (use-package autorevert
    :custom
    (auto-revert-stop-on-user-input nil)
    (auto-revert-verbose nil)
    (global-auto-revert-non-file-buffers t)
    :init
    (global-auto-revert-mode t)
    :preface
    (add-to-list 'window-state-change-functions
                 (defun xenodium/window-state-state-change (state)
                   "Enable `global-auto-revert-mode' per active window."
                   (let* ((old-selected-window (old-selected-window))
                          (old-buffer (when old-selected-window
                                        (window-buffer old-selected-window)))
                          (selected-window (selected-window))
                          (new-buffer (when selected-window
                                        (window-buffer selected-window))))
                     (when old-buffer
                       (with-current-buffer old-buffer
                         (when buffer-file-name
                           (auto-revert-mode -1))))
                     (when new-buffer
                       (with-current-buffer new-buffer
                         (when buffer-file-name
                           (auto-revert-mode +1)))))))
    )

#+end_src

** Dired

#+begin_quote

[...] major mode for directory browsing and editing.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired
    :custom
    (dired-auto-revert-buffer t)
    (dired-clean-confirm-killing-deleted-buffers nil)
    (dired-dwim-target t)
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-listing-switches "-agho --group-directories-first") ;;1
    (dired-maybe-use-globstar t)
    (dired-mouse-drag-files t)
    (dired-recursive-copies 'always)
    :defer t
    )

#+end_src

*** Auxiliary

#+begin_quote

Less commonly used parts of Dired.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired-aux
    :after dired
    :custom
    (dired-do-revert-buffer t)
    (dired-isearch-filenames 'dwim)
    )

#+end_src

*** Async

#+begin_quote

Asynchronous dired actions.

#+end_quote

#+begin_src emacs-lisp

  (use-package dired-async
    :hook
    (dired-mode . dired-async-mode)
    )

#+end_src

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (delete-by-moving-to-trash t)
    )

#+end_src

** Mouse

#+begin_src emacs-lisp

  (use-package mouse
    :custom
    (mouse-drag-and-drop-region-cross-program t)
    )

#+end_src

** [[https://depp.brause.cc/nov.el/][nov.el]]

#+begin_quote

Major mode for reading EPUBs in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package nov
    :custom
    (nov-header-line-format nil)
    :ensure t
    )

#+end_src

** [[https://github.com/xenodium/ready-player][Ready Player Mode]]

#+begin_quote

A lightweight major mode to open media (audio/video) files in an Emacs buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package ready-player
    :vc (:url "https://github.com/xenodium/ready-player")
    :custom
    (ready-player-previous-icon "󰒮")
    (ready-player-play-icon "󰐊")
    (ready-player-stop-icon "󰓛")
    (ready-player-next-icon "󰒭")
    (ready-player-search-icon "󰍉")
    (ready-player-set-global-bindings nil)
    (ready-player-shuffle-icon "󰒝")
    (ready-player-open-externally-icon "󰒖")
    (ready-player-repeat-icon "󰑖")
    (ready-player-autoplay-icon "󰼛")
    :ensure t
    :hook
    (dired-mode . ready-player-mode)
    )

#+end_src

** [[https://github.com/protesilaos/show-font][Show Font]]

#+begin_quote

Show font features in an Emacs buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package show-font
    :vc (:url "https://github.com/protesilaos/show-font")
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-fm)
#+end_src

* Key Binding
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys.el
:END:

Key bindings for default packages.

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][Key Binding Conventions]]

#+begin_quote

- Don't define C-c letter as a key in Lisp programs. Sequences consisting of C-c and a letter (either upper or lower case; ASCII or non-ASCII) are reserved for users [...];
- Function keys F5 through F9 without modifier keys are also reserved for users to define.
- Sequences consisting of C-c followed by a control character or a digit are reserved for major modes;
- Sequences consisting of C-c followed by {, }, <, >, : or ; are also reserved for major modes;
- Sequences consisting of C-c followed by any other ASCII punctuation or symbol character are allocated for minor modes [...];
- Don't bind C-h following any prefix character (including C-c);
- [...] don't bind a key sequence ending in C-g, since that is commonly used to cancel a key sequence.

#+end_quote

** [[./notes/keys_window_management.org][Window Management Bindings]]

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Align

#+begin_src emacs-lisp

  (use-package align
    :bind
    ("C-x |" . align-regexp)
    )

#+end_src

** Development

*** Compile

#+begin_src emacs-lisp

  (use-package compile
    :bind
    ("C-c c" . compile)
    ("C-c C" . recompile)
    )

#+end_src

*** Eglot

#+begin_src emacs-lisp

  (use-package eglot
    :bind
    (
     :map prog-mode-map
     ("C-c t e" . eglot)
     :map eglot-mode-map
     ("C-c e a" . eglot-code-actions)
     ("C-c e o" . eglot-code-action-organize-imports)
     ("C-c e i" . eglot-find-implementation)
     ("C-c e t" . eglot-find-typeDefinition)
     ("C-c e f" . eglot-format)
     ("C-c e r" . eglot-rename)
     )
    )

#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp

  (use-package elisp-mode
    :bind
    (
     :map emacs-lisp-mode-map
          ("C-c m C-b" . elisp-byte-compile-buffer)
          ("C-c m e d" . eval-defun)
          ("C-c m C-e" . elisp-eval-region-or-buffer)
          )
    )

#+end_src

**** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :bind
    (
     :map emacs-lisp-mode-map
     ("C-c C-c" . gs-101/eval-dwim)
     ("C-c m e b" . eval-buffer)
     ("C-c m e r" . eval-region)
     ("C-c C-p" . ielm)
     )
    :config
    (defun gs-101/eval-dwim (arg)
      "Evaluate region if it is active; if not, evaluate the buffer.
  If the region is active, this function calls `eval-region'.
  Otherwise, it calls `eval-buffer'.

  If the character before point is a closed parenthesis,
  this calls `eval-last-sexp'.

  ARG is used for `eval-last-sexp'."
      (interactive "P")
      (cond
       ((use-region-p) (eval-region (region-beginning) (region-end) t)
        (message "Region evaluated"))
       ((eq (char-before) ?\)) (eval-last-sexp arg)
        (message "Sexp evaluated"))
       (t (eval-buffer nil nil)
          (message "Buffer evaluated"))))
    )

#+end_src

**** Files

#+begin_src emacs-lisp

  (use-package files
    :bind
    (
     :map  emacs-lisp-mode-map
           ("C-c m l" . load-library)
           )
    )

#+end_src

**** Find Functions

#+begin_src emacs-lisp

  (use-package find-func
    :bind
    (
     :map emacs-lisp-mode-map
     ("C-c m g f" . find-function)
     ("C-c m g l" . find-library)
     ("C-c m g v" . find-variable)
     )
    )

#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package flymake
    :bind
    (
     :map flymake-mode-map
     ([remap next-error] . flymake-goto-next-error)
     ([remap previous-error] . flymake-goto-prev-error)
     :map project-prefix-map
     ("t f" . flymake-show-project-diagnostics)
     :map prog-mode-map
     ("C-c t f" . flymake-start)
     )
    )

#+end_src

** [[./notes/keys_dired.org][Dired]]

#+begin_src emacs-lisp

  (use-package dired
    :after dired
    :bind
    (
     :map dired-mode-map
     ("b" . dired-up-directory)
     )
    )

#+end_src

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :bind
    ("C-c q f" . delete-frame)
    ("C-c i c" . insert-char)
    )

#+end_src

** Eshell

#+begin_src emacs-lisp

  (use-package eshell
    :bind
    ("C-c t s" . eshell)
    )

#+end_src

** Files

#+begin_src emacs-lisp

  (use-package files
    :bind
    ("C-c f r" . recover-this-file)
    ("C-c b r" . revert-buffer)
    ("C-c q r" . restart-emacs)
    ("C-c q e" . save-buffers-kill-emacs)
    )

#+end_src

** Git

#+begin_src emacs-lisp

  (use-package vc-git
    :bind
    ("M-s g v" . vc-git-grep)
    )

#+end_src

** Grep

#+begin_src emacs-lisp

  (use-package grep
    :bind
    ("M-s g g" . grep)
    ("M-s g l" . lgrep)
    ("M-s g r" . rgrep)
    )

#+end_src

** Help

#+begin_src emacs-lisp

  (use-package help
    :bind
    ("C-h C-b" . describe-prefix-bindings)
    )

#+end_src

** iBuffer

#+begin_src emacs-lisp

  (use-package ibuffer
    :bind
    ("C-x B" . ibuffer)
    )

#+end_src

** Org Mode

#+begin_src emacs-lisp

  (use-package org
    :bind
    (
     :map org-mode-map
     ([remap org-narrow-to-subtree] . org-toggle-narrow-to-subtree)
     ([remap save-buffer] . org-save-all-org-buffers)
     ("M-p" . org-move-subtree-up)
     ("M-n" . org-move-subtree-down)
     ("C-c m s e" . org-sort-entries)
     )
    )

#+end_src

*** Agenda

#+begin_src emacs-lisp

  (use-package org-agenda
    :bind
    ("C-c o a" . org-agenda)
    )

#+end_src

*** Clock

#+begin_src emacs-lisp

  (use-package org-clock
    :bind
    (
     :map org-mode-map
     ("C-c m c" . org-clock-in-last)
     ("C-c m C" . org-clock-cancel)
     )
    )

#+end_src

*** Export

#+begin_src emacs-lisp

  (use-package ox
    :bind
    (
     :map org-mode-map
     ("C-c m x" . org-export-dispatch)
     )
    )

#+end_src

*** Keys

#+begin_src emacs-lisp

  (use-package org-keys
    :custom
    (org-use-speed-commands t)
    )

#+end_src

*** Links

#+begin_src emacs-lisp

  (use-package ol
    :bind
    (
     :map org-mode-map
     ("C-c m l i" . org-insert-link)
     ("C-c m l s" . org-store-link)
     )
    )

#+end_src

*** List

#+begin_src emacs-lisp

  (use-package org-list
    :bind
    (
     :map org-mode-map
     ("C-c m s l" . org-sort-list)
     )
    )

#+end_src

*** Refile

#+begin_src emacs-lisp

  (use-package org-refile
    :bind
    (
     :map org-mode-map
     ("C-c m r" . org-refile)
     )
    )

#+end_src

*** Table

#+begin_src emacs-lisp

  (use-package org-table
    :bind
    (
     :map org-mode-map
     ("C-c m -" . org-table-insert-hline)
     )
    )

#+end_src

** Paragraphs

#+begin_src emacs-lisp

  (use-package paragraphs
    :bind
    ("M-h" . mark-paragraph)
    )

#+end_src

** Repeat Mode

#+begin_quote

Convenient way to repeat the previous command.

#+end_quote

#+begin_src emacs-lisp

  (use-package repeat
    :init
    (repeat-mode)
    )

#+end_src

** Sort

#+begin_src emacs-lisp

  (use-package sort
    :bind
    ("C-c l d" . delete-duplicate-lines)
    )

#+end_src

** Simple

#+begin_src emacs-lisp

  (use-package simple
    :bind
    ("M-g M-c" . gs-101/switch-to-minibuffer-dwim)
    ("C-?" . undo-redo)
    ("M-\\" . nil) ;; unbind `delete-horizontal-space', use `cycle-spacing' instead
    ([remap capitalize-word] . capitalize-dwim)
    ([remap upcase-word] . upcase-dwim)
    ([remap downcase-word] . downcase-dwim)
    :config
    (defun gs-101/switch-to-minibuffer-dwim ()
      "Switch to minibuffer in a regular window. In minibuffer, switch to previous window.
  If currently in the minibuffer, this function calls `previous-window-any-frame'.
  Otherwise, it calls `switch-to-minibuffer'."
      (interactive)
      (if (minibufferp)
          (previous-window-any-frame)
        (switch-to-minibuffer)))
    )

#+end_src

** [[https://github.com/kickingvegas/casual][Casual]]

#+begin_quote

A collection of opinionated keyboard-driven user interfaces for various built-in Emacs modes.

#+end_quote

#+begin_src emacs-lisp

  (use-package casual
    :custom
    (casual-lib-use-unicode t)
    :ensure t
    )

#+end_src

*** Agenda

#+begin_src emacs-lisp

  (use-package casual-agenda
    :bind
    (
     :map org-agenda-mode-map
     ("J" . bookmark-jump)
     ("M-o" . casual-agenda-tmenu)
     ("M-j" . org-agenda-clock-goto)
     )
    )

#+end_src


*** Bookmarks

#+begin_src emacs-lisp

  (use-package casual-bookmarks
    :bind
    (
     :map bookmark-bmenu-mode-map
     ("J" . bookmark-jump)
     ("M-o" . casual-bookmarks-tmenu)
     )
    :config
    (easy-menu-add-item global-map '(menu-bar)
                        casual-bookmarks-main-menu
                        "Tools")
    )

#+end_src

*** Calc

#+begin_src emacs-lisp

  (use-package casual-calc
    :bind
    (
     :map calc-alg-map
     ("M-o" . casual-calc-tmenu)
     :map calc-mode-map
     ("M-o" . casual-calc-tmenu)
     )
    )

#+end_src


*** Calendar

#+begin_src emacs-lisp

  (use-package casual-calendar
    :bind
    (
     :map calendar-mode-map
     ("M-o" . casual-calendar)
     )
    )

#+end_src

*** Dired

#+begin_src emacs-lisp

  (use-package casual-dired
    :bind
    (
     :map dired-mode-map
     ("/" . casual-dired-search-replace-tmenu)
     ("s" . casual-dired-sort-by-tmenu)
     ("M-o" . casual-dired-tmenu)
     )
    :config
    (defun kv/casual-dired-context-menu-addons (menu click)
      "Customize context Menu with CLICK event."
      (easy-menu-add-item menu nil casual-dired-sort-menu)
      menu)
    :hook
    (context-menu-functions . kv/casual-dired-context-menu-addons)
    )

#+end_src

*** EditKit

#+begin_src emacs-lisp

  (use-package casual-editkit
    :bind
    ("M-o" . casual-editkit-main-tmenu)
    )

#+end_src

*** iBuffer

#+begin_src emacs-lisp

  (use-package casual-ibuffer
    :bind
    (
     :map ibuffer-mode-map
     ("F" . casual-ibuffer-filter-tmenu)
     ("s" . casual-ibuffer-sortby-tmenu)
     ("M-o" . casual-ibuffer-tmenu)
     ("]" . ibuffer-forward-filter-group)
     ("[" . ibuffer-backward-filter-group)
     ("}" . ibuffer-forward-next-marked)
     ("{" . ibuffer-backwards-next-marked)
     ("$" . ibuffer-toggle-filter-group)
     )
    )

#+end_src

*** Info

#+begin_src emacs-lisp

  (use-package casual-info
    :bind
    (
     :map Info-mode-map
     ("B" . bookmark-set)
     ("n" . casual-info-browse-forward-paragraph)
     ("p" . casual-info-browse-backward-paragraph)
     ("M-o" . casual-info-tmenu)
     ("M-]" . Info-history-forward)
     ("M-[" . Info-history-back)
     ("l" . Info-next)
     ("h" . Info-prev)
     ("j" . Info-next-reference)
     ("k" . Info-prev-reference)
     ("/" . Info-search)
     )
    )

#+end_src

*** iSearch

#+begin_src emacs-lisp

  (use-package casual-isearch
    :bind
    (
     :map isearch-mode-map
     ("M-o" . casual-isearch-tmenu)
     )
    )

#+end_src

*** RE-Builder

#+begin_src emacs-lisp

  (use-package casual-re-builder
    :bind
    (
     :map reb-mode-map
     ("M-o" . casual-re-builder-tmenu)
     :map reb-lisp-mode-map
     ("M-o" . casual-re-builder-tmenu)
     )
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-keys)
#+end_src

* Org Mode
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-org.el
:END:

#+begin_quote

Org is a mode for keeping notes, maintaining ToDo lists, and doing project planning with a fast and effective plain-text system.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-auto-align-tags nil)
    (org-directory (convert-standard-filename (expand-file-name "~/Documents/Org")))
    (org-format-latex-options '(
                                :foreground default
                                :background nil
                                :scale 1.0
                                :html-foreground "Black"
                                :html-background "Transparent"
                                :html-scale 1.0
                                :matchers
                                ("begin" "$1" "$" "$$" "\\(" "\\[")
                                ))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-reverse-note-order t)
    (org-tags-column 0)
    (org-todo-repeat-to-state t)
    (org-use-sub-superscripts '{})
    :hook
    (org-mode . variable-pitch-mode)
    )

#+end_src

** Startup

#+begin_src emacs-lisp

  (use-package startup
    :custom
    (initial-major-mode 'org-mode)
    :defer t
    )

#+end_src

** Babel

#+begin_src emacs-lisp

  (use-package org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (C . t)
       (clojure . t)
       (css . t)
       (emacs-lisp . t)
       (java . t)
       (js . t)
       (latex . t)
       (python . t)
       (scheme . t)
       (shell . t)
       (sql . t)
       (sqlite . t)
       ))
    (push '("conf-unix" . conf-unix) org-src-lang-modes)
    (nconc org-babel-default-header-args:java
           '((:dir . nil)
             (:results . "output")))
    :custom
    (org-export-babel-evaluate nil)
    )

#+end_src

*** [[https://github.com/samwdp/ob-csharp][C#]]

#+begin_src emacs-lisp

  (use-package ob-csharp
    :vc (:url "https://github.com/samwdp/ob-csharp")
    :after org
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(csharp . t))
    )

#+end_src

*** [[https://github.com/mzimmerm/ob-dart][Dart]]

#+begin_src emacs-lisp

  (use-package ob-dart
    :vc (:url "https://github.com/mzimmerm/ob-dart")
    :after org
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(dart . t))
    )

#+end_src

*** [[https://github.com/ag91/ob-http][HTTP]]

#+begin_src emacs-lisp

  (use-package ob-http
    :vc (:url "https://github.com/ag91/ob-http")
    :after org
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(http . t))
    )

#+end_src

** Agenda

#+begin_quote

Dynamic task and appointment lists for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-agenda
    :config
    (add-to-list 'org-agenda-prefix-format '(agenda . "%-12t% s "))
    :custom
    (org-agenda-custom-commands
     '((
        "d" "Daily Agenda"
        (
         (agenda ""
                 ((org-agenda-overriding-header "* High Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#A"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))

         (agenda ""
                 ((org-agenda-overriding-header "* Medium Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#B"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))

         (agenda ""
                 ((org-agenda-overriding-header "* Low Priority Tasks")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\#C"))
                  (org-agenda-span 'day)
                  (org-deadline-warning-days 0)))
         )
        )
       ))
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-start-with-log-mode t)
    (org-agenda-tags-column 0)
    (org-agenda-window-setup 'only-window)
    )

#+end_src

*** Collapsable Headers
:PROPERTIES:
:CREDITS:  https://reddit.com/r/emacs/comments/1fjnqgy/weekly_tips_tricks_c_thread/
:END:

#+begin_src emacs-lisp

  (use-package org-agenda
    :hook
    (org-agenda-mode . mlk/org-agenda-fold)
    :preface
    (defun mlk/org-agenda-fold()
      "Fold headers of the agenda starting with \"* \"."
      (interactive)
      (setq-local outline-regexp "^\\* ")
      (setq-local outline-heading-end-regexp "\n")
      (setq-local outline-minor-mode-prefix (kbd "C-'"))
      (outline-minor-mode)
      (local-set-key outline-minor-mode-prefix outline-mode-prefix-map)
      (org-defkey org-agenda-mode-map [(tab)] #'outline-toggle-children)
      )
    )

#+end_src

*** Org Habit

#+begin_quote

The habit tracking code for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-habit
    :custom
    (org-habit-graph-column 100)
    )

#+end_src

*** [[https://liron.tilde.team/blog/skipping-weekends-when-scheduling-items-with-org-mode20758.html][Skipping Weekends]]

#+begin_src emacs-lisp

  (use-package org
    :after org
    :config
    (defun liron/org-hook-for-repeat-not-on-weekend ()
      "Makes repeating tasks skip weekends."
      (when (org-property-values "NO_WEEKEND")
        ;; Get time from item at POINT
        (let* ((scheduled-time (org-get-scheduled-time (point)))
               ;; Convert to timestamp - required for the next step
               (seconds-timestamp (time-to-seconds scheduled-time))
               ;; Convert to decoded time - required to find out the weekday
               (decoded-time (decode-time seconds-timestamp))
               ;; Get weekday
               (weekday (decoded-time-weekday decoded-time)))

          (when (> weekday 5) ;; Saturday -> move to Sunday
            (setq decoded-time
                  (decoded-time-add decoded-time (make-decoded-time :day 2))))

          (when (> weekday 6) ;; Sunday - move to Monday
            (setq decoded-time
                  (decoded-time-add decoded-time (make-decoded-time :day 1))))

          (let ((encoded-time (encode-time decoded-time)))
            (org-schedule nil encoded-time))

          ))
      )
    :hook
    (org-todo-repeat . liron/org-hook-for-repeat-not-on-weekend)
    )

#+end_src

** Clock

#+begin_quote

The time clocking code for Org mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-clock
    :custom
    (org-clock-clocked-in-display 'frame-title)
    (org-clock-persist t)
    (org-clock-report-include-clocking-task t)
    )

#+end_src

** Compat
:PROPERTIES:
:CREDITS:  https://github.com/xenodium/dotsies/blob/75f29e9d9d8f1aaebe1671b19614bb1e6bc5aac3/emacs/ar/ar-org-export-init.el#L37
:END:

#+begin_quote

This file contains code needed for compatibility with older versions of GNU Emacs and integration with other packages.

#+end_quote

Support for standard YouTube links is also included, translating them to embbeded links in export.

#+begin_src emacs-lisp

  (use-package org-compat
    :config
    (org-add-link-type
     "youtube"
     (lambda (handle)
       (browse-url (concat "https://www.youtube.com/watch?v=" handle)))
     (lambda (path desc backend)
       (cl-case backend
         (html (format
                "<p style='text-align:center;'>
  <iframe width='420' height='315' align='middle'
  src='https://youtube.com/embed/W4LxHn5Y_l4?controls=0'
  allowFullScreen>
  </iframe>
  </p>"
                path (or desc "")))
         (latex (format "\href{%s}{%s}" path (or desc "video"))))))
    :custom
    (org-fold-catch-invisible-edits 'show-and-error)
    )

#+end_src

** Cycle

#+begin_quote

Visibility cycling of Org entries.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-cycle
    :custom
    (org-cycle-emulate-tab 'whitestart)
    )

#+end_src

** Latex

#+begin_quote

LaTeX Backend for Org Export Engine.

#+end_quote

#+begin_src emacs-lisp

  (use-package ox-latex
    :custom
    (org-latex-tables-centered nil)
    (org-latex-toc-command "\\tableofcontents \\pagebreak")
    (org-startup-with-latex-preview t)
    (org-preview-latex-default-process 'dvisvgm) ;; 1
    (org-preview-latex-image-directory (convert-standard-filename (expand-file-name "ltximg/" temporary-file-directory)))
    :config
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-pdf-process "bibtex %b" t)
    :defer t
    )

#+end_src

1. ~dvipng~ doesn't work for me for some reason.

*** [[https://code.tecosaur.net/tec/engrave-faces][Engrave Faces]]

#+begin_quote

There are some great packages for Exporting buffers to particular formats, but each one seems to reinvent the core mechanism of processing the font-lock in a buffer such that it can be exported to a particular format.

This package aims to produce a versatile generic core which can process a fontified buffer and elegantly pass the data to any number of backends which can deal with specific output formats.

#+end_quote

#+begin_src emacs-lisp

  (use-package engrave-faces
    :vc (:url "https://code.tecosaur.net/tec/engrave-faces")
    :after ox-latex
    :ensure t
    :custom
    (org-latex-src-block-backend 'engraved)
    )

#+end_src

*** Packages to install

**** Fedora

src_bash{sudo dnf install texlive-collection-basic texlive-bookmark texlive-cancel texlive-chemfig texlive-circuitikz texlive-dvipng texlive-dvisvgm texlive-stackengine texlive-pgfplots texlive-mlmodern texlive-titling texlive-hyphenat texlive-fvextra texlive-tcolorbox}

** List

#+begin_quote

Plain lists for Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-list
    :custom
    (org-list-allow-alphabetical t)
    )

#+end_src

** Modules

#+begin_src emacs-lisp

  (use-package org
    :config
    (add-to-list 'org-modules '(
                                org-habit
                                org-id
                                org-protocol
                                ))
    )

#+end_src

** Paragraphs

#+begin_quote

Paragraph and sentence parsing.

#+end_quote

#+begin_src emacs-lisp

  (use-package paragraphs
    :custom
    (sentence-end-double-space nil)
    :defer t
    )

#+end_src

** Refile

#+begin_quote

Org refile allows you to refile subtrees to various locations.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-refile
    :config
    (advice-add #'org-refile :after #'org-save-all-org-buffers)
    :custom
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '(
                          (nil :maxlevel . 1)
                          (org-agenda-files :maxlevel . 1)
                          ))
    (org-refile-use-outline-path t)
    )

#+end_src

** TODOs

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-todo-keywords '(
                         (sequence
                          "TODO(t)"
                          "WAIT(w!)"
                          "|"
                          "DONE(d!)"
                          "BACKLOG(b)"
                          "CANCELLED(c@)"
                          )
                         (sequence
                          "FIX(f@)"
                          "FEAT(F@)"
                          "DOCS(D@)"
                          "STYLE(s)"
                          "REFACTOR(r)"
                          "CHORE(C@)"
                          "|"
                          "MERGED(m)"
                          "CLOSED(x@)"
                          )
                         ))
    )

#+end_src

** Source

#+begin_src emacs-lisp

  (use-package org-src
    :custom
    (org-src-window-setup 'current-window)
    )

#+end_src

** [[https://github.com/io12/org-fragtog][Fragtog]]

#+begin_quote

Automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-fragtog
    :vc (:url "https://github.com/io12/org-fragtog")
    :ensure t
    :hook
    (org-mode . org-fragtog-mode)
    )

#+end_src

** [[https://github.com/awth13/org-appear][Appear]]

#+begin_quote

Toggle visibility of hidden Org mode element parts upon entering and leaving an element.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-appear
    :vc (:url "https://github.com/awth13/org-appear")
    :custom
    (org-appear-autoentities t)
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    :ensure t
    :hook
    (org-mode . org-appear-mode)
    )

#+end_src

** [[https://git.sr.ht/~bzg/org-contrib][Contrib]]

Add-ons for Org Mode.

#+begin_src emacs-lisp

  (use-package org-contrib
    :after org
    :ensure t
    )

#+end_src

*** Ox Extra

Additional functionality for Org Mode exporters.

#+begin_src emacs-lisp

  (use-package ox-extra
    :after org
    :config
    ;; Use the :ignore: tag to export content without the heading
    (ox-extras-activate '(latex-header-blocks ignore-headlines))
    )

#+end_src

** [[https://github.com/nobiot/org-remark][Remark]]

#+begin_quote

Highlight & annotate text, EWW, Info, and EPUB.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-remark
    :vc (:url "https://github.com/nobiot/org-remark")
    :bind
    (
     :map org-remark-mode-map
     ("C-z M m" . org-remark-mark)
     ("C-z M o" . org-remark-open)
     ("C-z M n" . org-remark-view-next)
     ("C-z M p" . org-remark-view-prev)
     ("C-z M DEL" . org-remark-delete)
     )
    :ensure t
    :config
    (org-remark-global-tracking-mode)
    )

#+end_src

*** EWW

#+begin_src emacs-lisp

  (use-package org-remark-eww
    :hook
    (eww-mode . org-remark-eww-mode)
    )

#+end_src

*** Info

#+begin_src emacs-lisp

  (use-package org-remark-info
    :hook
    (info-mode . org-remark-info-mode)
    )

#+end_src

*** nov.el

#+begin_src emacs-lisp

  (use-package org-remark
    :hook
    (nov-mode . org-remark-nov-mode)
    )

#+end_src

** [[https://github.com/bohonghuang/org-srs][Spaced Repetition System]]

#+begin_src emacs-lisp

  (use-package fsrs
    :vc (:url "https://github.com/bohonghuang/lisp-fsrs")
    :defer t
    :ensure t
    )

  (use-package org-srs
    :vc (:url "https://github.com/bohonghuang/org-srs")
    :bind
    (
     :map org-mode-map
     ("C-z m r n" . org-srs-item-create)
     ("C-z m r e" . org-srs-review-rate-easy)
     ("C-z m r g" . org-srs-review-rate-good)
     ("C-z m r h" . org-srs-review-rate-hard)
     ("C-z m r RET" . org-srs-review-start)
     ("C-z m r DEL" . org-srs-review-quit)
     ("C-z m r a" . org-srs-item-cloze-dwim)
     ("C-z m r k" . org-srs-item-uncloze-dwim)
     )
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-org)
#+end_src

* [[https://github.com/org-roam/org-roam][Org Roam]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-org-roam.el
:END:

#+begin_quote

Rudimentary Roam replica with Org-mode.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

REFACTOR: Separate ~use-package org-roam~ into its different files.

#+begin_src emacs-lisp

  (use-package org-roam
    :bind
    ("C-z r f" . org-roam-node-find)
    (
     :map org-mode-map
     ("C-z r i" . org-roam-node-insert)
     )
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory (convert-standard-filename (expand-file-name "~/Documents/Org Roam")))
    :demand t
    :ensure t
    :init
    (org-roam-db-autosync-mode)
    )

#+end_src

** Capture templates

#+begin_src emacs-lisp

            (use-package org-roam
              :custom
              (org-roam-capture-templates '(
                                            ("d" "default" plain
                                             (file "~/Documents/Org Roam/Templates/default.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
                                             :unnarrowed t)
                                            ("p" "padrão" plain
                                             (file "~/Documents/Org Roam/Templates/padrão.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
                                             :unnarrowed t)
                                            ("n" "notegpt.io" plain
                                             (file "~/Documents/Org Roam/Templates/notegpt.io.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :notegpt_io:hacker_news:\n\n")
                                             :unnarrowed t)
                                            ("r" "redação" plain
                                             (file "~/Documents/Org Roam/Templates/redação.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :redação:\n\n")
                                             :unnarrowed t)
                                            ("s" "summarize.ing" plain
                                             (file "~/Documents/Org Roam/Templates/summarize.ing.org")
                                             :if-new
                                             (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :summarize_ing:\n\n")
                                             :unnarrowed t)
                                            ))
              )

#+end_src

** Dailies

#+begin_src emacs-lisp

  (use-package org-roam-dailies
    :bind-keymap
    ("C-z r d" . org-roam-dailies-map)
    :bind
    (
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)
     ("T" . org-roam-dailies-capture-tomorrow)
     )
    :custom
    (dw/daily-note-filename "%<%Y-%m-%d>.org")
    (dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    )

#+end_src

*** Capture templates
:PROPERTIES:
:CREDITS:  https://github.com/daviwil/dotfiles/blob/f5e2ff06e72f2f92ab53c77a98900476274cb3ee/.emacs.d/modules/dw-workflow.el#L243
:END:


#+begin_src emacs-lisp

  (use-package org-roam-dailies
    :after org-roam-dailies
    :custom
    (org-roam-dailies-capture-templates '(
                                          ("d" "default" entry
                                           "* %?"
                                           :if-new (file+head ,dw/daily-note-filename
                                                              ,dw/daily-note-header))
                                          ("t" "task" entry
                                           "* TODO %?\n  %U\n  %a\n  %i"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Tasks"))
                                           :empty-lines 1)
                                          ("l" "log entry" entry
                                           "* %<%I:%M %p> - %?"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ("j" "journal" entry
                                           "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ("m" "meeting" entry
                                           "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
                                           :if-new (file+head+olp ,dw/daily-note-filename
                                                                  ,dw/daily-note-header
                                                                  ("Log")))
                                          ))
    )

#+end_src

** Roam Agenda
:PROPERTIES:
:CREDITS:  https://github.com/daviwil/dotfiles/blob/master/.emacs.d/modules/dw-workflow.el, 1. https://github.com/org-roam/org-roam/issues/2357#issuecomment-1614254880
:END:


#+begin_src emacs-lisp

  (use-package org-agenda
    :bind
    ("C-z r b" . dw/org-roam-capture-inbox)
    :preface
    (defun dw/org-roam-filter-by-tag (tag-name)
      "Filter org roam files by their tags."
      (lambda (node)
        (member tag-name (org-roam-node-tags node))))

    (defun dw/org-roam-list-notes-by-tag (tag-name)
      "List org roam files by their tags."
      (mapcar #'org-roam-node-file
              (seq-filter
               (dw/org-roam-filter-by-tag tag-name)
               (org-roam-node-list))))

    (defun dw/org-roam-refresh-agenda-list () ;; 1
      "Refresh the current agenda list, and add the files with the currosponding tag to the agenda list."
      (interactive)
      (setq org-agenda-files (dw/org-roam-list-notes-by-tag "agenda")))
    ;; Build the agenda list the first time for the session
    (dw/org-roam-refresh-agenda-list)
    (defun dw/org-roam-project-finalize-hook ()
      "Adds the captured project file to "org-agenda-file" if the capture was not aborted."
      ;; Remove the hook since it was added temporarily
      (remove-hook 'org-capture-after-finalize-hook #'dw/org-roam-project-finalize-hook)

      ;; Add project file to the agenda list if the capture was confirmed
      (unless org-note-abort
        (with-current-buffer (org-capture-get :buffer)
          (add-to-list 'org-agenda-files (buffer-file-name)))))
    (defun dw/org-roam-capture-inbox ()
      "Create a org roam inbox file."
      (interactive)
      (org-roam-capture- :node (org-roam-node-create)
                         :templates '(("i" "inbox" plain "* %?"
                                       :if-new (file+head "inbox.org" "#+title: Inbox\n#+filetags: :agenda:\n\n")))))
    (defun dw/org-roam-goto-month ()
      "Lists the files of the selected month with the set tag."
      (interactive)
      (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                         :node (org-roam-node-create)
                         :templates '(("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
                                       :if-new (file+head "%<%Y-%B>.org"
                                                          "#+title: %<%Y-%B>\n#+filetags: :agenda:\n\n")
                                       :unnarrowed t))))
    (defun dw/org-roam-goto-year ()
      "Lists the files of the selected year with the set tag."
      (interactive)
      (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                         :node (org-roam-node-create)
                         :templates '(("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
                                       :if-new (file+head "%<%Y>.org"
                                                          "#+title: %<%Y>\n#+filetags: :agenda:\n\n")
                                       :unnarrowed t))))
    :custom
    (org-agenda-hide-tags-regexp "agenda")
    :hook
    (org-agenda-finalize . dw/org-roam-refresh-agenda-list)
    )

#+end_src

** [[https://github.com/org-roam/org-roam-ui][User Interface]]

#+begin_quote

A graphical frontend for exploring your org-roam Zettelkasten.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-roam-ui
    :vc (:url "https://github.com/org-roam/org-roam-ui")
    :bind
    ("C-z r u" . org-roam-ui-open)
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start nil)
    (org-roam-ui-browser-function #'browse-url-chromium)
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-org-roam)
#+end_src

* [[https://github.com/emacs-citar/citar][Citar]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-citar.el
:END:

#+begin_quote

Emacs package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package citar
    :vc (:url "https://github.com/emacs-citar/citar")
    :custom
    (citar-bibliography "~/Documents/Bibliography.bib")
    (citar-citeproc-csl-styles-dir "~/Documents/Zotero/styles/")
    (citar-citeproc-csl-style "harvard-cite-them-right.csl")
    (citar-format-reference-function #'citar-citeproc-format-reference)
    (citar-library-paths '("~/Documents/Zotero/storage/"))
    (citar-open-entry-function #'citar-open-entry-in-zotero)
    (citar-templates '((main . "${author editor:30%sn}     ${date year issued:4}     ${title:48}") (suffix . "          ${=key= id:15}    ${tags keywords keywords:*}    ${abstract abstract:*}") (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.
  ") (note . "Notes on ${author editor:%etal}, ${title}")))
    :hook
    (org-mode . citar-capf-setup)
    :ensure t
    )

#+end_src

** [[https://github.com/emacs-citar/citar?tab=readme-ov-file#embark][Embark]]

#+begin_src emacs-lisp

  (use-package citar-embark
    :after embark
    :custom
    (citar-at-point-function #'embark-act)
    :hook
    (text-mode . citar-embark-mode)
    )

#+end_src

**** [[https://github.com/emacs-citar/citar/wiki/Embark][More Functions]]

#+begin_src emacs-lisp

  (use-package citar-embark
    :after citar-embark
    :config
    (setf (alist-get
           'key-at-point
           (alist-get '(org-mode) citar-major-mode-functions nil nil #'equal))
          #'bdarcus/citar-org-key-at-point)

    (defun bdarcus/citar-org-key-at-point ()
      "Return citekey at point, when in org property drawer.

  Citekey must be formatted as `@key'."
      (or (citar-org-key-at-point)
          (when (and (equal (org-element-type (org-element-at-point)) 'node-property)
                     (org-in-regexp (concat "[[:space:]]" org-element-citation-key-re)))
            (cons (substring (match-string 0) 2)
                  (cons (match-beginning 0)
                        (match-end 0))))))
    (add-to-list 'embark-keymap-alist '(bib-reference . citar-map))
    )

#+end_src

** Org Cite

#+begin_src emacs-lisp

  (use-package oc
    :bind
    (
     :map org-mode-map
     ("C-c m q" . org-cite-insert)
     )
    :custom
    (org-cite-global-bibliography '("~/Documents/Bibliography.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    )

#+end_src

*** CSL

#+begin_src emacs-lisp

  (use-package oc-csl
    :after oc
    :custom
    (org-cite-csl-styles-dir "~/Documents/Zotero/styles/")
    (org-cite-export-processors '((t . (csl "harvard-cite-them-right.csl"))))
    )

#+end_src

** [[https://github.com/emacs-citar/citar-org-roam][Org Roam]]

#+begin_src emacs-lisp

  (use-package citar-org-roam
    :vc (:url "https://github.com/emacs-citar/citar-org-roam")
    :bind
    ("C-z r c" . citar-create-note)
    :after org-roam
    :config
    (citar-org-roam-mode)
    (add-to-list 'org-roam-capture-templates
                 '("b" "bibliographic" plain
                  (file "~/Documents/Org Roam/Templates/default.org")
                  :if-new
                  (file+head "%<%Y%m%d%H%M%S>-${citar-citekey}.org" "#+title: ${title}\n\n")
                  :unnarrowed t))
    :custom
    (citar-org-roam-capture-template-key "b")
    (citar-org-roam-note-title-template "${title}")
    :ensure t
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-citar)
#+end_src

* Development
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-dev.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Tree-Sitter

#+begin_quote

tree-sitter utilities.

#+end_quote

#+begin_src emacs-lisp

  (use-package treesit
    :custom
    (treesit-font-lock-level 4)
    )

#+end_src

*** Org Source

#+begin_quote

Source code examples in Org.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-src
    :config
    (mapc (lambda (lang)
            (add-to-list 'org-src-lang-modes lang)) '(
            ("bash" . bash-ts)
            ("C" . c-ts)
            ("clojure" . clojure-ts)
            ("cmake" . cmake-ts)
            ("csharp" . csharp-ts)
            ("css" . css-ts)
            ("dart" . dart-ts)
            ("go" . go-ts)
            ("html" . html-ts)
            ("java" . java-ts)
            ("js" . js-ts)
            ("json" . json-ts)
            ("python" . python-ts)
            ("ruby" . ruby-ts)
            ("rust" . rust-ts)
            ("toml" . toml-ts)
            ("yaml" . yaml-ts)
            ))
    )
#+end_src

*** [[https://github.com/renzmann/treesit-auto][Auto]]

#+begin_quote

Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29.

#+end_quote

#+begin_src emacs-lisp

  (use-package treesit-auto
    :vc (:url "https://github.com/gs-101/treesit-auto" :branch custom)
    :config
    (global-treesit-auto-mode)
    (treesit-auto-add-to-auto-mode-alist 'all)
    :custom
    (treesit-auto-install t)
    :ensure t
    )

#+end_src

*** [[https://github.com/danilshvalov/git-commit-ts-mode][git-commit]]

#+begin_src emacs-lisp

  (use-package git-commit-ts-mode
    :vc (:url "https://github.com/danilshvalov/git-commit-ts-mode")
    :ensure t
    )

#+end_src

**** [[https://github.com/danilshvalov/git-commit-ts-mode?tab=readme-ov-file#magit-integration][Magit]]

#+begin_src emacs-lisp

  (use-package magit
    :after git-commit-ts-mode magit
    :custom
    (git-commit-major-mode 'git-commit-ts-mode)
    )

#+end_src

** Compile

#+begin_quote

Run compiler as inferior of Emacs, parse error messages.

#+end_quote

#+begin_src emacs-lisp

  (use-package compile
    :bind
    (
     :map compilation-mode-map
     ("n" . next-error-no-select)
     ("p" . previous-error-no-select)
     ("q" . kill-buffer-and-window)
     )
    :custom
    (compilation-auto-jump-to-first-error t)
    (compilation-max-output-line-length nil)
    (compilation-scroll-output t)
    (compilation-skip-threshold 2)
    :defer t
    :hook
    (compilation-mode . goto-address-mode)
    (compilation-filter . ansi-color-compilation-filter)
    )

#+end_src

*** Compilers

**** Cargo

#+begin_src emacs-lisp

  (use-package compile
    :after rust-ts-mode
    :config
    (push '(cargo "^\\ \\ -->\\ \\([/a-z_\\.]+\\):\\([0-9]+\\):\\([0-9]+\\)" 1 2 3)
          compilation-error-regexp-alist-alist)
    (push 'cargo compilation-error-regexp-alist)
    )

#+end_src

*** [[https://github.com/mohkale/compile-multi][multi]]

#+begin_quote

Multi target interface to compile.

#+end_quote

#+begin_src emacs-lisp

  (use-package compile-multi
    :bind
    ([remap compile] . compile-multi)
    :ensure t
    )

#+end_src
    
**** [[https://github.com/mohkale/compile-multi?tab=readme-ov-file#consult-multi-compile][Consult]]

#+begin_src emacs-lisp

  (use-package consult-compile-multi
    :after compile-multi consult
    :ensure t
    :config
    (consult-compile-multi-mode)
    )

#+end_src

**** [[https://github.com/mohkale/compile-multi?tab=readme-ov-file#compile-multi-embark][Embark]]

#+begin_src emacs-lisp

  (use-package compile-multi-embark
    :after compile-multi embark
    :ensure t
    :config
    (compile-multi-embark-mode)
    )

#+end_src

** Diff

#+begin_quote

Provides support for font-lock, outline, navigation commands, editing and various conversions as well as jumping to the corresponding source file.

#+end_quote

#+begin_src emacs-lisp

  (use-package diff-mode
    :custom
    (diff-add-log-use-relative-names t)
    :defer t
    )

#+end_src

** Eglot

#+begin_quote

Eglot ("Emacs Polyglot") is an Emacs LSP client that stays out of your way.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot
    :custom
    (eglot-autoshutdown t)
    (eglot-connect-timeout nil)
    (eglot-sync-connect nil)
    :defer t
    )

#+end_src

*** [[https://github.com/jdtsmith/eglot-booster][Booster]]

#+begin_quote

Boost eglot using lsp-booster.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot-booster
    :vc (:url "https://github.com/jdtsmith/eglot-booster")
    :ensure t
    :hook
    (eglot-managed-mode . eglot-booster-mode)
    )

#+end_src

*** [[https://github.com/Gavinok/eglot-codelens][Code Lens]]

#+begin_quote

Eglot adds extensive support of the language server protocol to Emacs. However, one feature it lacks is [[https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_codeLens][Code Lens]] support.

#+end_quote

This shows how many references (mentions in comments) a given symbol has throughout the project.

#+begin_src emacs-lisp

  (use-package eglot-codelens
    :vc (:url "https://github.com/Gavinok/eglot-codelens")
    :hook
    (eglot-managed-mode . eglot-codelens-mode)
    :ensure t
    )

#+end_src

*** [[https://github.com/nemethf/eglot-x][Extensions]]

Support for even more LSP extesnions, primarily for functionality introduced by [[https://rust-analyzer.github.io/][rust-analyzer]].

#+begin_src emacs-lisp

  (use-package eglot-x
    :vc (:url "https://github.com/nemethf/eglot-x")
    :after eglot
    :config
    (eglot-x-setup)
    :custom
    (eglot-x-enable-server-status nil)
    :demand t
    :ensure t
    )

#+end_src

*** [[https://codeberg.org/harald/eglot-supplements][Supplements]]

Additional language server functionality implemented with Eglot. There's also support for semantic tokens, but I didn't use it here as it messes with the font lock. Only changes I'd make with font-locking are those with [[#prism][Prism]].

#+begin_src emacs-lisp

  (use-package eglot-supplements
    :vc (:url "https://codeberg.org/harald/eglot-supplements")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://codeberg.org/harald/eglot-supplements#call-hierarchy][Call Hierarchy]]

#+begin_src emacs-lisp

  (use-package eglot-cthier
    :after eglot
    :bind
    (
     :map eglot-mode-map
     ("C-c e H" . eglot-cthier-request-call-hierarchy)
     )
    )

#+end_src

**** [[https://codeberg.org/harald/eglot-supplements#mark-occurrences][Mark Occurences]]

#+begin_src emacs-lisp

  (use-package eglot-marocc
    :after eglot
    :bind
    (
     :map eglot-mode-map
     ("C-c e h" . eglot-marocc-request-highlights)
     ("C-c e n" . eglot-marocc-goto-next-highlight)
     ("C-c e p" . eglot-marocc-goto-previous-highlight)
     )
    )

#+end_src

***** Catppuccin Colors

#+begin_src emacs-lisp

  (use-package eglot-marocc
    :after eglot-marocc catppuccin-theme
    :custom
    (set-face-attribute 'eglot-marocc-occurence-text nil :foreground (catppuccin-color 'green))
    )

#+end_src

*** [[https://github.com/fargiolas/eglot-inactive-regions][Inactive Regions]]

#+begin_quote

Emacs Eglot support for clangd inactiveRegions LSP extension and ccls skippedRegions. Make ifdef code semitransparent following build time flags and defines.

#+end_quote

#+begin_src emacs-lisp

  (use-package eglot-inactive-regions
    :vc (:url "https://github.com/fargiolas/eglot-inactive-regions")
    :ensure t
    :custom
    (eglot-inactive-regions-style 'darken-foreground)
    (eglot-inactive-regions-opacity 0.3)
    :hook
    (eglot-connect . eglot-inactive-regions-mode)
    )

#+end_src

** Eldoc

#+begin_quote

Show function arglist or variable docstring in echo area.

#+end_quote

#+begin_src emacs-lisp

  (use-package eldoc
    :custom
    (eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    (eldoc-echo-area-use-multiline-p nil)
    (eldoc-idle-delay 0)
    )

#+end_src

*** [[https://codeberg.org/mekeor/eglot-signature-eldoc-talkative][Verbose LSP Documentation]]

Makes Eglot spew out more documentation information from the language server than it already does.

#+begin_src emacs-lisp

  (use-package eglot-signature-eldoc-talkative
    :vc (:url "https://codeberg.org/mekeor/eglot-signature-eldoc-talkative")
    :after eglot
    :config
    (advice-add #'eglot-signature-eldoc-function :override #'eglot-signature-eldoc-talkative)
    :ensure t
    )

#+end_src

*** [[https://github.com/kljohann/eldoc-diffstat/][diffstat]]

#+begin_quote

Make VCS diffstat available via eldoc.

#+end_quote

#+begin_src emacs-lisp

  (use-package eldoc-diffstat
    :vc (:url "https://github.com/kljohann/eldoc-diffstat/")
    :after eldoc
    :ensure t
    :hook
    (magit-log-mode . eldoc-diffstat-mode)
    )

#+end_src

** Electric Pairs

#+begin_quote

Automatic parenthesis pairing.

#+end_quote

#+begin_src emacs-lisp

  (use-package elec-pair
    :hook
    (prog-mode . electric-pair-local-mode)
    )

#+end_src

** Flymake

#+begin_quote

A universal on-the-fly syntax checker.

#+end_quote

#+begin_src emacs-lisp

  (use-package flymake
    :hook
    (prog-mode . flymake-mode)
    )

#+end_src

*** [[https://github.com/mohkale/flymake-collection][Collection]]

#+begin_quote

Collection of checkers for flymake.

#+end_quote

#+begin_src emacs-lisp

  (use-package flymake-collection
    :ensure t
    :config
    (push '((c-mode c-ts-mode) flymake-collection-gcc (flymake-collection-clang :disabled t)) flymake-collection-hook-config)
    (push '((python-mode python-ts-mode) flymake-collection-flake8 (flymake-collection-pycodestyle :disabled t)) flymake-collection-hook-config)
    :hook
    (flymake-mode . flymake-collection-hook-setup)
    )

#+end_src

** Languages

*** [[https://github.com/clojure-emacs/clojure-ts-mode][Clojure]]

#+begin_quote

The next generation Clojure major mode for Emacs, powered by TreeSitter.

#+end_quote

#+begin_src emacs-lisp

  (use-package clojure-ts-mode
    :vc (:url "https://github.com/clojure-emacs/clojure-ts-mode")
    :custom
    (clojure-ts-comment-macro-font-lock-body t)
    (clojure-ts-indent-style 'fixed)
    (clojure-ts-toplevel-inside-comment-form t)
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/clojure-emacs/cider][Cider]]

#+begin_quote

The Clojure Interactive Development Environment that Rocks for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package cider
    :vc (:url "https://github.com/clojure-emacs/cider")
    :after clojure-ts-mode
    :bind
    (
     :map cider-mode-map
     ("C-c C-p" . cider-jack-in-clj)
     )
    :ensure t
    :hook
    (clojure-ts-mode . cider-mode)
    )

#+end_src

*** Dart

#+begin_quote

A major mode for Dart programming language with tree-sitter supports.

#+end_quote

Dart is a language primarily used for [[https://flutter.dev/][Flutter]], a UI development kit.

#+begin_src emacs-lisp

  (use-package dart-ts-mode
    :vc (:url "https://github.com/50ways2sayhard/dart-ts-mode")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/amake/flutter.el][Flutter]]

#+begin_quote

Flutter tools for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package flutter
    :bind
    (
     :map dart-ts-mode-map
     ([remap compile] . flutter-run-or-hot-reload)
     ("C-c C-c" . flutter-run-or-hot-reload)
     )
    :config
    (defcustom gs-101/flutter-hot-reload-mode-lighter " Flutter Hot Reload"
      "Lighter for `gs-101/flutter-hot-reload-mode'."
      :type '(choice :tag "Lighter" (const :tag "No lighter" nil) string)
      :group 'flutter)

    (define-minor-mode gs-101/flutter-hot-reload-mode
      "Minor mode for running hot reload on save.

  Only runs if a Flutter buffer already exits."
      :lighter gs-101/flutter-hot-reload-mode-lighter
      (if (and gs-101/flutter-hot-reload-mode (get-buffer "*Flutter*"))
          (add-hook 'after-save-hook #'flutter-hot-reload nil 'local)
        (remove-hook 'after-save-hook #'flutter-hot-reload 'local)))
    :ensure t
    :hook
    (dart-ts-mode . gs-101/flutter-hot-reload-mode)
    )

#+end_src

*** Go

#+begin_quote

tree-sitter support for Go.

#+end_quote

#+begin_src emacs-lisp

  (use-package go-ts-mode
    :bind
    (
     :map go-ts-mode-map
     ("C-c m t f" . go-ts-mode-test-this-file)
     ("C-c m t p" . go-ts-mode-test-this-package)
     ("C-c m t ." . go-ts-mode-test-this-function-at-point)
     )
    :defer t
    )

#+end_src

*** Lisp

#+begin_quote

Lisp editing for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package lisp
    :bind
    (
     :map lisp-mode-map
     ("C-c C-p" . run-lisp)
     )
    :custom
    (inferior-lisp-program "sbcl")
    (narrow-to-defun-include-comments t)
    :defer t
    )

#+end_src

*** PostgreSQL

**** [[https://github.com/emarsden/pgmacs][PGmacs]]

#+begin_quote

Emacs editing PostgreSQL databases.

#+end_quote

#+begin_src emacs-lisp

  ;; Library
  (use-package pg
    :vc (:url "https://github.com/emarsden/pg-el/")
    :ensure t
    )

  (use-package pgmacs
    :vc (:url "https://github.com/emarsden/pgmacs")
    :defer t
    :ensure t
    )

#+end_src

*** Python

#+begin_quote

Python's flying circus support for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package python
    :custom
    (python-indent-guess-indent-offset-verbose nil)
    :defer t
    )

#+end_src

**** [[https://github.com/purcell/envrc][envrc.el]]

#+begin_quote

Emacs support for direnv which operates buffer-locally.

#+end_quote

#+begin_src emacs-lisp

  (use-package envrc
    :vc (:url "https://github.com/purcell/envrc")
    :ensure t
    :init
    (envrc-global-mode)
    )

#+end_src

***** Packages to install

src_bash{sudo dnf install direnv}

**** [[https://github.com/wbolster/emacs-python-pytest][python-pytest.el]]

#+begin_quote

Run pytest inside Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package python-pytest
    :vc (:url "https://github.com/wbolster/emacs-python-pytest")
    :bind
    (
     :map python-base-mode-map
     ("C-c m t" . python-pytest-dispatch)
     )
    :ensure t
    )

#+end_src

*** Rust

**** [[https://github.com/peterstuart/cargo-transient][Cargo Transient]]

#+begin_quote

A transient UI for Cargo, Rust's package manager.

#+end_quote

#+begin_src emacs-lisp

  (use-package cargo-transient
    :vc (:url "https://github.com/peterstuart/cargo-transient")
    :after rust-ts-mode
    :bind
    (
     :map rust-ts-mode-map
     ("C-c C-c" . compile)
     ("C-c C-p" . cargo-transient)
     )
    :ensure t
    :custom
    (cargo-transient-buffer-name-function #'project-prefixed-buffer-name)
    )

#+end_src

*** Scheme

**** [[https://www.nongnu.org/geiser/][Geiser]]

Collection of modes for working with different Scheme interpreters.

#+begin_src emacs-lisp

  (use-package geiser
    :vc
    (
     :url "https://gitlab.com/emacs-geiser/geiser"
     :lisp-dir "elisp"
     )
    :ensure t
    )

#+end_src

***** Guile

#+begin_src emacs-lisp

  (use-package geiser-guile
    :vc (:url "https://gitlab.com/emacs-geiser/guile")
    :bind
    (
     :map scheme-mode-map
     ("C-c C-p" . geiser)
     ("C-c C-c" . gs-101/geiser-eval-dwim)
     )
    :config
    (defun gs-101/geiser-eval-dwim ()
      "Evaluate region if it is active; if not, evaluate the buffer.
  If the region is active, this function calls `geiser-eval-region'.
  Otherwise, it calls `geiser-eval-buffer'.

  If the character before point is a closed parenthesis,
  this calls `geiser-eval-last-sexp'."
      (interactive)
      (cond
       ((use-region-p) (geiser-eval-region (region-beginning) (region-end) t)
        (message "Region evaluated"))
       ((eq (char-before) ?\)) (eval-last-sexp nil)
        (message "Sexp evaluated"))
       (t (eval-buffer nil nil)
          (message "Buffer evaluated"))))
    :custom
    (geiser-guile-binary "guile3.0")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/alezost/guix.el][Guix]]

#+begin_quote

Emacs interface for the GNU Guix package manager.

#+end_quote

#+begin_src emacs-lisp

  (use-package guix
    :defer t
    :ensure t
    :hook
    (dired-mode . guix-prettify-mode)
    (scheme-mode . guix-devel-mode)
    (shell-mode . guix-prettify-mode)
    (shell-mode . guix-build-log-minor-mode)
    )

#+end_src

*** Vue

#+begin_src emacs-lisp

  (use-package vue-ts-mode
    :vc (:url "https://github.com/8uff3r/vue-ts-mode")
    :defer t
    :ensure t
    )

#+end_src

*** Shell Script

#+begin_quote

Major mode for editing shell scripts.
Bourne, C and rc shells as well as various derivatives are supported and easily derived from.
Structured statements can be inserted with one command or abbrev.
Completion is available for filenames, variables known from the script, the shell and the environment as well as commands

#+end_quote

#+begin_src emacs-lisp

  (use-package sh-script
    :bind
    (
     :map bash-ts-mode-map
     ("C-c C-p" . ansi-shell)
     :map sh-mode-map
     ("C-c C-p" . ansi-shell)
     )
    :defer t
    )

#+end_src

** Smerge

#+begin_quote

Minor mode to resolve diff3 conflicts.

#+end_quote

#+begin_src emacs-lisp

  (use-package smerge-mode
    :init
    (smerge-mode)
    )

#+end_src

** SubWord

#+begin_quote

Handling capitalized subwords in a nomenclature.

#+end_quote

#+begin_src emacs-lisp

  (use-package subword
    :hook
    (prog-mode . subword-mode)
    )

#+end_src

** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive Indent]]

#+begin_quote

Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package aggressive-indent
    :vc (:url "https://github.com/Malabarba/aggressive-indent-mode")
    :config
    (defun gs-101/aggressive-indent-mode-lisp ()
      "Enable `aggressive-indent-mode' in Lisp modes."
      (when (string-match-p "clojure.*-mode\\'" (symbol-name major-mode))
        (aggressive-indent-mode))
      (when (string-match-p "lisp.*-mode\\'" (symbol-name major-mode))
        (aggressive-indent-mode))
      (when (derived-mode-p 'scheme-mode)
        (aggressive-indent-mode)))
    :ensure t
    :hook
    (css-mode . aggressive-indent-mode)
    (prog-mode . gs-101/aggressive-indent-mode-lisp)
    )

#+end_src

** [[https://github.com/radian-software/apheleia][Apheleia]]

#+begin_quote

Run code formatter on buffer contents without moving point, using RCS patches and dynamic programming.

#+end_quote

#+begin_src emacs-lisp

  (use-package apheleia
    :vc (:url "https://github.com/radian-software/apheleia")
    :ensure t
    :config
    (setf (alist-get 'clang-format apheleia-formatters)
          '("clang-format" "--style=microsoft" "--assume-filename"
            (or (apheleia-formatters-local-buffer-file-name)
                (apheleia-formatters-mode-extension)
                ".c"))
          )
    :hook
    (prog-mode . apheleia-mode)
    )

#+end_src

*** Packages to install

**** Fedora

src_bash{sudo dnf install black}

** [[https://github.com/copilot-emacs/copilot.el][Copilot]]

#+begin_quote

An unofficial Copilot plugin for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package copilot
    :vc (:url "https://github.com/copilot-emacs/copilot.el")
    :ensure t
    :bind
    (
     :map copilot-completion-map
     ("<tab>" . copilot-accept-completion)
     ("TAB" . copilot-accept-completion)
     ("C-<tab>" . copilot-accept-completion-by-word)
     ("C-TAB" . copilot-accept-completion-by-word)
     ("C-n" . copilot-next-completion)
     ("C-p" . copilot-previous-completion)
     )
    :config
    (dolist (pair '((clojure-ts-mode lisp-indent-offset)
                    (scheme-mode lisp-indent-offset)
                    (org-mode 2)))
      (add-to-list 'copilot-indentation-alist pair))
    )

#+end_src

** [[https://github.com/mickeynp/combobulate][Combobulate]]
:PROPERTIES:
:CREDITS:  https://github.com/mickeynp/combobulate/issues/119#issuecomment-2435132123
:END:

#+begin_quote

Structured Editing and Navigation in Emacs with Tree-Sitter.

#+end_quote

#+begin_src emacs-lisp

  (use-package combobulate
    :vc (:url "https://github.com/mickeynp/combobulate")
    :bind
    (
     :map combobulate-key-map
     ([query-replace-regexp] . combobulate-cursor-edit-node-by-text-dwim)
     )
    :config
    (defun cxa/activate-combobulate-on-ts-mode ()
      "Enable `combobulate-mode' in tree-sitter modes."
      (when (string-match-p "-ts-mode\\'" (symbol-name major-mode))
        (combobulate-mode)))
    :custom
    (combobulate-key-prefix "C-z t c")
    :ensure t
    :hook
    (text-mode . cxa/activate-combobulate-on-ts-mode)
    (prog-mode . cxa/activate-combobulate-on-ts-mode)
    )

#+end_src

** [[https://github.com/svaante/dape][Dape]]

#+begin_quote

Debug Adapter Protocol for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package dape
    :vc (:url "https://github.com/svaante/dape")
    :defer t
    :ensure t
    :hook
    (dape-display-source . pulse-momentary-highlight-one-line)
    )

#+end_src

*** Packages to Install

**** Fedora

src_bash{sudo dnf install delve}

** [[https://github.com/anonimitoraf/exercism.el][Exercism]]

#+begin_quote

Emacs integration for [[https://exercism.org][Exercism]].

#+end_quote

#+begin_src emacs-lisp

  (use-package exercism
    :vc (:url "https://github.com/anonimitoraf/exercism.el")
    :commands
    (exercism)
    :custom
    (exercism--workspace (convert-standard-filename (expand-file-name "study/exercism/" gs-101/projects-code-directory)))
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/magit/git-modes][git-modes]]

#+begin_quote

Emacs major modes for Git configuration files.

#+end_quote

#+begin_src emacs-lisp

  (use-package git-modes
    :vc (:url "https://github.com/magit/git-modes")
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/karthink/gptel][gptel]]

#+begin_quote

A simple LLM client for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel
    :vc (:url "https://github.com/karthink/gptel")
    :bind
    ("C-z g b" . gptel)
    ("C-z g DEL" . gptel-abort)
    ("C-z g a" . gptel-add)
    ("C-z g C-x C-f" . gptel-add-file)
    ("C-z g m" . gptel-menu)
    ("C-z g r" . gptel-rewrite)
    ("C-z g RET" . gptel-send)
    ("C-z g p" . gptel-system-prompt)
    :custom
    (gptel-default-mode 'org-mode)
    (gptel-org-branching-context t)
    :ensure t
    )

#+end_src

*** [[https://github.com/marketplace/models][Github Models]]

#+begin_quote

Try, test, and deploy from a wide range of model types, sizes, and specializations.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel-openai
    :after gptel
    :config
    (gptel-make-openai "Github Models"
      :host "models.inference.ai.azure.com"
      :endpoint "/chat/completions"
      :stream t
      :key #'gptel-api-key
      :models '(
                gpt-4o
                gpt-4o-mini
                meta-llama-3.1-405b-instruct
                llama-3.2-90B-vision-instruct
                ))
  )

#+end_src

*** [[https://github.com/karthink/gptel-quick][quick]]

#+begin_quote

Quick LLM lookups in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package gptel-quick
    :vc (:url "https://github.com/karthink/gptel-quick")
    :after gptel
    :ensure t
    )

#+end_src

**** [[https://github.com/karthink/gptel-quick?tab=readme-ov-file#setup][Embark]]

#+begin_src emacs-lisp

  (use-package gptel-quick
    :after gptel-quick embark
    :bind
    (
     :map embark-general-map
     ("g" . gptel-quick)
     )
    )

#+end_src

** [[https://github.com/kaiwk/leetcode.el][LeetCode]]

#+begin_quote

An Emacs LeetCode client.

#+end_quote

#+begin_src emacs-lisp

  (use-package leetcode
    :vc (:url "https://github.com/kaiwk/leetcode.el")
    :custom
    (leetcode-directory (convert-standard-filename (expand-file-name "study/leetcode-solutions/" gs-101/projects-code-directory)))
    (leetcode--paid "$")
    (leetcode-save-solutions t)
    (leetcode--User-Agent ("User Agent" . "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.1"))
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/magit/magit][Magit]]

#+begin_quote

It's Magit! A Git Porcelain inside Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package magit
    :vc (:url "https://github.com/magit/magit")
    :bind
    ("C-c v B" . magit-blame)
    ("C-c v C" . magit-clone)
    ("C-c v /" . magit-dispatch)
    ("C-c v F" . magit-fetch)
    ("C-c M-g" . magit-file-dispatch)
    ("C-c v x" . magit-file-delete)
    ("C-c v ." . magit-file-dispatch)
    ("C-c v L" . magit-log)
    ("C-c v g" . magit-status)
    ("C-c v G" . magit-status-here)
    ("C-c v c c" . magit-commit)
    ("C-c v c f" . magit-commit-fixup)
    ("C-c v l s" . magit-list-submodules)
    :custom
    (magit-diff-refine-hunk t)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :ensure t
    :hook
    (magit-mode . magit-wip-mode)
    (magit-process-find-password-functions . magit-process-password-auth-source)
    )

#+end_src

*** [[https://github.com/magit/forge][Forge]]

#+begin_quote

Work with Git forges from the comfort of Magit.

#+end_quote

To make use of this package a [[https://magit.vc/manual/forge/Token-Creation.html][token]] must be generated.

#+begin_src emacs-lisp

  (use-package forge
    :vc (:url "https://github.com/magit/forge")
    :after magit
    :bind
    ("C-c v '" . forge-dispatch)
    ("C-c v c i" . forge-create-issue)
    ("C-c v c p" . forge-create-pullreq)
    ("C-c v f c" . forge-browse-commit)
    ("C-c v f i" . forge-browse-issue)
    ("C-c v f p" . forge-browse-pullreq)
    ("C-c v l i" . forge-list-issues)
    ("C-c v l n" . forge-list-notifications)
    ("C-c v l p" . forge-list-pullreqs)
    ("C-c v l r" . forge-list-repositories)
    :ensure t
    )

#+end_src

*** [[https://github.com/magit/orgit][Orgit]]

#+begin_quote

Support for Org links to Magit buffers.

#+end_quote

#+begin_src emacs-lisp

  (use-package orgit
    :vc (:url "https://github.com/magit/orgit")
    :after magit
    :bind
    (
     :map magit-mode-map
     ("C-c m l s" . org-store-link)
     )
    :ensure t
    )

#+end_src

** [[https://github.com/purcell/package-lint][package-lint]]

#+begin_quote

A linting library for elisp package metadata.

#+end_quote

#+begin_src emacs-lisp

  (use-package package-lint
    :ensure t
    )

#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package package-lint-flymake
    :after package-lint flymake
    :ensure t
    :hook
    (emacs-lisp-mode . package-lint-flymake-setup)
    )

#+end_src

** [[https://github.com/mohkale/projection][Projection]]

#+begin_quote

Projectile like project management library built on Emacs project.el.

#+end_quote

#+begin_src emacs-lisp

  (use-package projection
    :ensure t
    :bind-keymap
    ("C-z p" . projection-map)
    :bind
    (
     :map projection-map
     ("C" . projection-commands-build-project)
     ("e" . projection-recentf)
     )
    :init
    (global-projection-hook-mode)
    )

#+end_src

*** [[https://github.com/mohkale/projection?tab=readme-ov-file#projection-multi-compile][multi]]

#+begin_src emacs-lisp

  (use-package projection-multi
    :after projection compile-multi
    :ensure t
    :bind
    (
     :map projection-map
     ("c" . projection-multi-compile)
     )
    )

#+end_src

*** [[https://github.com/mohkale/projection?tab=readme-ov-file#projection-multi-embark][Embark]]

#+begin_src emacs-lisp

  (use-package projection-multi-embark
    :after projection compile-multi embark
    :ensure t
    :config
    (projection-multi-embark-setup-command-map)
    )

#+end_src

** [[https://github.com/AmaiKinono/puni][Puni]]

#+begin_quote

Structured editing (soft deletion, expression navigating & manipulating) that supports many major modes out of the box.

#+end_quote

#+begin_src emacs-lisp

  (use-package puni
    :vc (:url "https://github.com/AmaiKinono/puni")
    :bind
    (
     :map puni-mode-map
     ("M-h" . puni-expand-region)
     ("M-H" . puni-contract-region)
     ("C-k" . puni-kill-line)
     ("C-M-n" . puni-forward-sexp-or-up-list)
     ("C-M-p" . puni-backward-sexp-or-up-list)
     ("C-M-<right>" . puni-forward-sexp-or-up-list)
     ("C-M-<left>" . puni-backward-sexp-or-up-list)
     ("C-M-@" . puni-mark-sexp-at-point)
     ("C-M-SPC" . puni-mark-sexp-at-point)
     ("M-k" . Gavinok/puni-kill-thing-at-point)
     ("C-M-t" . puni-transpose)
     ("C-)" . puni-slurp-forward)
     ("C-(" . puni-slurp-backward)
     ("C-M-)" . puni-barf-forward)
     ("C-M-(" . puni-barf-backward)
     )
    :defer t
    :config
    (defun Gavinok/puni-kill-thing-at-point (&optional arg)
      "Kill the next puni based thing at point."
      (interactive)
      (unless buffer-read-only
        (puni-expand-region)
        (kill-region (region-beginning) (region-end))))
    (advice-add #'puni-kill-active-region :override
                (defun AmaiKinono/puni-kill-active-region ()
                  "Kill active region.
  When this will cause unbalanced state, ask the user to confirm,
  unless `puni-confirm-when-delete-unbalanced-active-region' is
  nil.
  When `rectangle-mark-mode' is enabled, kill the marked
  rectangular region instead."
                  (interactive)
                  (if (use-region-p)
                      (puni-kill-region)
                    ;; Fall back to Emacs default behavior which is signaling an error or what
                    ;; `kill-region-dwim' defines (since Emacs 31).
                    (call-interactively #'kill-region))))
    :ensure t
    :custom
    (cursor-type 'bar)
    :hook
    (text-mode . puni-disable-puni-mode)
    :init
    (puni-global-mode)
    )

#+end_src

** [[https://github.com/wakatime/wakatime-mode][Wakatime]]

#+begin_quote

Emacs plugin for automatic time tracking and metrics generated from your programming activity.

#+end_quote

#+begin_src emacs-lisp

  (use-package wakatime-mode
    :vc (:url "https://github.com/wakatime/wakatime-mode")
    :custom
    (wakatime-api-key (auth-source-pick-first-password :host "wakatime.com"))
    :ensure t
    :hook
    (prog-mode . global-wakatime-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-dev)
#+end_src

* Completion
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-completion.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** [[https://github.com/oantolin/orderless][Orderless]]
:PROPERTIES:
:CREDITS:  https://github.com/minad/consult/wiki#minads-orderless-configuration
:END:

#+begin_quote

Emacs completion style that matches multiple regexps in any order.

#+end_quote

#+begin_src emacs-lisp

  (use-package orderless
    :vc (:url "https://github.com/oantolin/orderless")
    :config
    (orderless-define-completion-style minad/orderless-initialism
      (orderless-matching-styles '(
                                   orderless-initialism
                                   orderless-literal
                                   orderless-regexp
                                   )))
    (orderless-define-completion-style minad/orderless-simple
      (orderless-style-dispatchers nil)
      (orderless-matching-styles '(orderless-literal)))
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '(
                                     (file (styles partial-completion))
                                     (command (styles minad/orderless-initialism))
                                     (variable (styles minad/orderless-initialism))
                                     (symbol (styles minad/orderless-initialism))
                                     (minibuffer (styles minad/orderless-initialism))
                                     ))
    (orderless-comment-separator #'orderless-escapable-split-on-space)
    (orderless-style-dispatchers (list
                                  #'minad/orderless-consult-dispatch
                                  #'orderless-affix-dispatch
                                  ))
    :ensure t
    :preface
    (defun minad/orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))
    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun minad/orderless-consult-dispatch (word _index _total)
      "Ensure that $ works with Consult commands, witch add disambiguation suffixes."
      (cond
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1) (minad/orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\.." word))
        `(orderless-regexp . ,(concat "\\." (substring word 1) (minad/orderless--consult-suffix))))))
    )

#+end_src

** [[https://github.com/minad/cape][Cape]]

#+begin_quote

Completion At Point Extensions.

#+end_quote

#+begin_src emacs-lisp

  (use-package cape
    :vc (:url "https://github.com/minad/cape")
    :ensure t
    :hook
    (completion-at-point-functions . cape-dabbrev)
    (completion-at-point-functions . cape-emoji)
    (completion-at-point-functions . cape-file)
    )

#+end_src

*** [[https://github.com/minad/corfu/wiki#using-cape-to-tweak-and-combine-capfs][Emacs Lisp Configuration]]

#+begin_src emacs-lisp

  (use-package cape
    :config
    (defun minad/emacs-lisp-ignore-keywords (cand)
      "Remove keywords from the CAND list, unless the completion text starts with a `:'."
      (or (not (keywordp cand))
          (eq (char-after (car completion-in-region--data)) ?:)))
    (defun minad/emacs-lisp-capf ()
      "`completion-at-point-functions' for `emacs-lisp-mode', including support for symbols currently unknown to Emacs, using `cape-dabbrev'.
  Also adds `cape-file' as a fallback."
      (setq-local completion-at-point-functions
                  `(,(cape-capf-super
                      (cape-capf-predicate
                       #'elisp-completion-at-point
                       #'minad/emacs-lisp-ignore-keywords)
                      #'cape-dabbrev)
                    cape-file)
                  cape-dabbrev-min-length 5))
    :hook
    (emacs-lisp-mode . minad/emacs-lisp-capf)
    )

#+end_src

** [[https://github.com/isamert/corg.el][Corg]]

#+begin_quote

Auto complete org-mode headers seamlessly.

#+end_quote

#+begin_src emacs-lisp

  (use-package corg
    :vc (:url "https://github.com/isamert/corg.el")
    :ensure t
    :hook
    (org-mode . corg-setup)
    )

#+end_src

** [[https://github.com/minad/tempel][Tempel]]

#+begin_quote

Simple templates for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package tempel
    :vc (:url "https://github.com/minad/tempel")
    :bind
    ("C-z i s" . tempel-insert)
    :ensure t
    )

#+end_src

*** [[https://github.com/svaante/lsp-snippet][lsp-snippet]]

#+begin_quote

Templating agnostic LSP snippets.

#+end_quote

#+begin_src emacs-lisp

  (use-package lsp-snippet
    :after tempel eglot
    :vc (:url "https://github.com/svaante/lsp-snippet")
    :config
    (lsp-snippet-tempel-eglot-init)
    )

#+end_src

*** [[https://github.com/gs-101/tempel-snippets][Snippets]]

#+begin_quote

Effort to translate all the yasnippet snippets to Tempel, inspired on tempel-collection.

#+end_quote

#+begin_src emacs-lisp

  (use-package tempel-snippets
    :vc (:url "https://github.com/gs-101/tempel-snippets")
    :after tempel
    :ensure t
    )

#+end_src

** [[https://github.com/minad/corfu][Corfu]]

#+begin_quote

COmpletion in Region FUnction.

#+end_quote

#+begin_src emacs-lisp

  (use-package corfu
    :vc (
         :url "https://github.com/minad/corfu"
         :lisp-dir "extensions"
         )
    :bind
    (
     :map corfu-map
     ("M-SPC" . corfu-insert-separator)
     ("RET" . nil)
     )
    :config
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.0)
    (corfu-auto-prefix 2)
    (corfu-cycle t)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preselect 'directory)
    :ensure t
    :init
    (global-corfu-mode)
    )

#+end_src

*** [[https://github.com/minad/corfu?tab=readme-ov-file#buffer-localcorfu-only-completion-styles][Simpler Completion Style]]

#+begin_src emacs-lisp

  (use-package corfu
    :after orderless
    :config
    (setq-mode-local corfu-mode completion-styles '(minad/orderless-simple))
    )

#+end_src

*** [[https://github.com/minad/corfu/wiki#configuring-corfu-for-eglot][Configuring Corfu for Eglot]]

**** Minibuffer

#+begin_src emacs-lisp

  (use-package minibuffer
    :after eglot
    :custom
    (completion-category-defaults nil)
    )

#+end_src

**** [[https://github.com/minad/corfu/wiki#continuously-update-the-candidates][Cape]]

#+begin_src emacs-lisp

  (use-package cape
    :after corfu cape
    :config
    (advice-add #'eglot-completion-at-point :around #'cape-wrap-buster)
    )

#+end_src

**** [[https://github.com/minad/corfu/wiki#making-a-cape-super-capf-for-eglot][Emacs]]

With the combined features of cape and tempel, create a super capf for eglot completion.

#+begin_src emacs-lisp

  (use-package emacs
    :after corfu cape tempel
    :preface
    (defun minad/eglot-capf ()
      "eglot capf with tempel and cape features."
      (setq-local completion-at-point-functions
                  (list (cape-capf-super
                         #'cape-file
                         #'eglot-completion-at-point
                         #'tempel-expand
                         ))))
    :hook
    (eglot-managed-mode . minad/eglot-capf)
    )

#+end_src

** [[https://github.com/minad/vertico][Vertico]]

#+begin_quote

VERTical Interactive COmpletion.

#+end_quote

#+begin_src emacs-lisp

  (use-package vertico
    :vc
    (
     :url "https://github.com/minad/vertico"
     :lisp-dir "extensions"
     )
    :custom
    (vertico-cycle t)
    :ensure t
    :init
    (vertico-mode)
    (vertico-multiform-mode)
    )

#+end_src

*** [[https://github.com/minad/vertico?tab=readme-ov-file#extensions][Vertico Directory]]

#+begin_quote

Commands for Ido-like directory navigation.

#+end_quote

#+begin_src emacs-lisp

  (use-package vertico-directory
    :after vertico
    :bind
    (
     :map vertico-map
     ("RET" . vertico-directory-enter)
     ("DEL" . vertico-directory-delete-char)
     ("M-DEL" . vertico-directory-delete-word)
     )
    :hook
    (rfn-eshadow-update-overlay . vertico-directory-tidy)
    )

#+end_src

*** [[https://github.com/minad/vertico/wiki#customize-sorting-based-on-completion-category][Completion-based Sorting]]

#+begin_src emacs-lisp

  (use-package vertico-multiform
    :after vertico
    :config
    (defun minad/sort-directories-first (files)
      "Sort FILES by directories first, but still maintain the history, length and alphabetical sorting.
  Hidden directories have a higher priority."
      (setq files (vertico-sort-history-length-alpha files))
      (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
             (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))
    :custom
    (vertico-multiform-categories '(
                                    (symbol (vertico-sort-function . vertico-sort-alpha))
                                    (file (vertico-sort-function . minad/sort-directories-first))
                                    ))
    )

#+end_src

** [[https://github.com/minad/marginalia][Marginalia]]

#+begin_quote

Marginalia in the minibuffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package marginalia
    :vc (:url "https://github.com/minad/marginalia")
    :ensure t
    :init
    (marginalia-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-completion)
#+end_src

* Utilities
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-utils.el
:END:

Generally useful packages for productivity and other aspects.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** [[https://github.com/jwiegley/alert][Alert]]

#+begin_quote

A Growl-like alerts notifier for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package alert
    :vc (:url "https://github.com/jwiegley/alert")
    :custom
    (alert-default-style 'notifications)
    :ensure t
    )

#+end_src

*** [[https://github.com/SqrtMinusOne/pomm.el][Pomm]]

#+begin_quote

Implementation of Pomodoro and Third Time techniques for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package pomm
    :vc (:url "https://github.com/SqrtMinusOne/pomm.el")
    :config
    (pomm-mode-line-mode)
    :custom
    (pomm-audio-enabled t)
    :defer t
    :ensure t
    :hook
    (pomm-on-status-changed . pomm--sync-org-clock)
    (pomm-third-time-on-status-changed . pomm-third-time--sync-org-clock)
    )

#+end_src

** [[https://github.com/abo-abo/avy][Avy]]
:PROPERTIES:
:CREDITS:  https://karthinks.com/software/avy-can-do-anything
:END:

#+begin_quote

Jump to things in Emacs tree-style.

#+end_quote

#+begin_src emacs-lisp
  (use-package avy
    :vc (:url "https://github.com/abo-abo/avy")
    :bind
    ("M-g a" . avy-goto-char-timer)
    ([remap goto-char] . avy-goto-char)
    ([remap goto-line] . avy-goto-line)
    ("M-g w" . avy-goto-word-0)
    (
     :map isearch-mode-map
     ("M-j" . avy-isearch)
     )
    :custom
    ;; (avy-keys '(
    ;;             ?q ?e ?r ?y ?u ?o ?p
    ;;             ?a ?s ?d ?f ?g ?h ?j ?k ?l ?~
    ;;             ?x ?c ?v ?b ?n ?, ?/
    ;;             ))
    (avy-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 ?0))
    (avy-style 'de-bruijn) ;; More uniform style, most jumps start with the same character
    :config
    (defun karthinks/avy-action-kill-whole-line (pt)
      "Jump to target at marker PT, killing its whole line after the jump."
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0))) t)

    (defun karthinks/avy-action-copy-whole-line (pt)
      "Jumpt to target at marker PT, copying its whole line to the kill ring,
  without killing it."
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0))) t)

    (defun karthinks/avy-action-yank-whole-line (pt)
      "Jump to target at marker PT, yanking its whole line to the current point."
      (karthinks/avy-action-kill-ring-save-whole-line pt)
      (save-excursion (yank)) t)

    (defun karthinks/avy-action-teleport-whole-line (pt)
      "Jump to target at marker PT, transposing it to the current point."
      (karthinks/avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)

    (defun karthinks/avy-action-mark-to-char (pt)
      "Start mark at current point, then jump to target at marker PT
  with the mark active. This sets an inclusive region selection between them."
      (activate-mark)
      (goto-char (+ pt 1)))

    (setf
     (alist-get ?w avy-dispatch-alist) #'avy-action-copy
     (alist-get ?W avy-dispatch-alist) #'karthinks/avy-action-copy-whole-line
     (alist-get ?k avy-dispatch-alist) #'avy-action-kill-stay
     (alist-get ?K avy-dispatch-alist) #'karthinks/avy-action-kill-whole-line
     (alist-get ?  avy-dispatch-alist) #'karthinks/avy-action-mark-to-char ;; This is bound to a space!
     (alist-get ?t avy-dispatch-alist) #'avy-action-teleport
     (alist-get ?y avy-dispatch-alist) #'avy-action-yank
     (alist-get ?Y avy-dispatch-alist) #'karthinks/avy-action-yank-whole-line
     )

    :ensure t
    )
#+end_src

*** [[https://karthinks.com/software/avy-can-do-anything/#look-up-the-documentation-for-a-symbol][Helpful Support]]

#+begin_src emacs-lisp

  (use-package avy
    :after avy helpful
    :config
    (defun karthinks/avy-action-helpful (pt)
      "Jump to target at marker PT, and view its documentation
  using Helpful."
      (save-excursion
        (goto-char pt)
        (helpful-at-point))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (setf (alist-get ?H avy-dispatch-alist) #'karthinks/avy-action-helpful)
    )

#+end_src

*** [[https://github.com/kickingvegas/casual-avy][Casual]]

#+begin_quote

An opinionated Transient menu for Avy.

#+end_quote

#+begin_src emacs-lisp

  (use-package casual-avy
    :bind
    ("M-g A" . casual-avy-tmenu)
    :ensure t
    )

#+end_src

** [[https://github.com/minad/consult][Consult]]
:PROPERTIES:
:CREDITS:  1. [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L65][jamescherti]], 2. [[https://github.com/oantolin/emacs-config/blob/master/init.el][oantolin]]
:END:

#+begin_quote

Consulting completing-read.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult
    :vc (:url "https://github.com/minad/consult")
    :bind
    (
     ([remap bookmark-jump] . consult-bookmark)
     ([remap flymake-start] . consult-flymake)
     ([remap goto-line] . consult-goto-line)
     ([remap grep] . consult-grep)
     ([remap imenu] . consult-imenu)
     ([remap info] . consult-info)
     ([remap info-search] . consult-info)
     ([remap isearch-forward] . consult-line)
     ([remap isearch-forward-word] . consult-line)
     ([remap kmacro-menu] . consult-kmacro)
     ([remap list-buffers] . consult-buffer)
     ([remap load-theme] . consult-theme)
     ([remap locate] . consult-locate)
     ([remap man] . consult-man)
     ([remap pop-global-mark] . consult-global-mark)
     ([remap pop-to-mark-command] . consult-mark)
     ([remap project-find-regexp] . consult-grep)
     ([remap project-list-buffers] . consult-project-buffer)
     ([remap project-switch-to-buffer] . consult-project-buffer)
     ([remap rgrep] . consult-ripgrep)
     ([remap switch-to-buffer] . consult-buffer)
     ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
     ([remap switch-to-buffer-other-tab] . consult-buffer-other-tab)
     ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
     ([remap vc-git-grep] . consult-git-grep)
     ([remap yank-from-kill-ring] . consult-yank-from-kill-ring)
     ([remap yank-pop] . consult-yank-pop)
     ("M-g I" . consult-imenu-multi)
     ("C-z M-x" . consult-mode-command)
     )
    :config
    (defun oantolin/choose-completion-in-region ()
      "Use default `completion--in-region' unless we are not completing."
      (when minibuffer-completion-table
        (setq-local completion-in-region-function #'completion--in-region)))
    (advice-add #'register-preview :override #'consult-register-window)
    (setf (alist-get 'log-edit-mode consult-mode-histories)
          'log-edit-comment-ring)
    (defvar minad/consult-line-map
      (let ((map (make-sparse-keymap)))
        (define-key map "\C-s" #'previous-history-element)
        map)
      "History keymap which is added to the local `consult-line' map.")
    (consult-customize consult-line :keymap minad/consult-line-map)
    :custom
    (register-preview-function #'consult-register-format)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    :ensure t
    :hook
    (minibuffer-setup . oantolin/choose-completion-in-region)
    )

#+end_src

*** [[https://github.com/karthink/consult-dir][Dir]]

#+begin_quote

Insert paths into the minibuffer prompt in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-dir
    :vc (:url "https://github.com/karthink/consult-dir")
    :after consult
    :bind
    ([remap list-directory] . consult-dir)
    ([remap dired-jump] . consult-dir-jump-file)
    :ensure t
    )

#+end_src

*** [[https://github.com/armindarvish/consult-gh][gh]]

#+begin_quote

An Interactive interface for "GitHub CLI" client inside GNU Emacs using Consult.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-gh
    :vc (:url "https://github.com/armindarvish/consult-gh")
    :after consult
    :custom
    (consult-gh-code-action #'consult-gh--code-view-action)
    (consult-gh-default-clone-directory (expand-file-name gs-101/projects-code-directory))
    (consult-gh-default-orgs-list "gs-101")
    :defer t
    :ensure t
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#embark-integration][Embark]]

#+begin_src emacs-lisp

  (use-package consult-gh-embark
    :after consult-gh embark
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#magitforge-integration][Forge]]

#+begin_src emacs-lisp

  (use-package consult-gh-forge
    :after consult-gh forge
    :custom
    (consult-gh-file-action #'consult-gh--files-view-action)
    (consult-gh-issue-action #'consult-gh-forge--issue-view-action)
    (consult-gh-pr-action #'consult-gh--forge-pr-view-action)
    (consult-gh-repo-action #'consult-gh--repo-browse-files-action)
    )

#+end_src

**** [[https://github.com/armindarvish/consult-gh?tab=readme-ov-file#transient-menu][Transient]]

#+begin_src emacs-lisp

  (use-package consult-gh-transient
    :after consult-gh
    )

#+end_src

*** [[https://github.com/mclear-tools/consult-notes][Notes]]

#+begin_quote

Use consult to search notes.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-notes
    :vc (:url "https://github.com/mclear-tools/consult-notes")
    :ensure t
    )

#+end_src

**** [[https://github.com/mclear-tools/consult-notes?tab=readme-ov-file#org-roam][Org Roam]]

#+begin_src emacs-lisp

  (use-package consult-notes
    :after org-roam
    :config
    (consult-notes-org-roam-mode)
    )

#+end_src

*** [[https://github.com/brett-lempereur/consult-xref-stack][xref]]

#+begin_quote

Navigate the Xref stack with Consult.

#+end_quote

#+begin_src emacs-lisp

  (use-package consult-xref-stack
    :vc (:url "https://github.com/brett-lempereur/consult-xref-stack")
    :bind
    ([remap xref-go-back] . consult-xref-stack-backward)
    ([remap xref-go-forward] . consult-xref-stack-forward)
    :ensure t
    )

#+end_src

*** [[https://github.com/minad/consult/wiki#use-orderless-as-pattern-compiler-for-consult-grepripgrepfind][Orderless]]

#+begin_src emacs-lisp

  (use-package consult
    :after consult orderless
    :config
    (defun minad/consult--orderless-regexp-compiler (input type &rest _config)
      "Regular expression pattern compiler based on `orderless'."
      (setq input (cdr (orderless-compile input)))
      (cons
       (mapcar (lambda (r) (consult--convert-regexp r type)) input)
       (lambda (str) (orderless--highlight input t str))))
    :custom
    (consult--regexp-compiler #'minad/consult--orderless-regexp-compiler)
    )

#+end_src

** [[https://github.com/oantolin/embark][Embark]]

#+begin_quote

Emacs Mini-Buffer Actions Rooted in Keymaps.

#+end_quote

#+begin_src emacs-lisp

  (use-package embark
    :vc (:url "https://github.com/oantolin/embark")
    :bind
    ([remap describe-bindings]. embark-bindings)
    ("C-;" . embark-act)
    (
     :map embark-collect-mode-map
     ("j" . goto-char)
     )
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    :custom
    (prefix-help-command #'embark-prefix-help-command)
    ;; Disable quitting after killing a buffer in an action
    (embark-quit-after-action '(
                                (kill-buffer . nil)
                                ))
    :ensure t
    )

#+end_src

*** Avy

#+begin_src emacs-lisp

  (use-package embark
    :after embark avy
    :config
    (defun karthinks/avy-action-embark (pt)
      "Jump to target at marker PT, and act on it using Embark."
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0)))))

    (setf (alist-get ?\; avy-dispatch-alist) 'karthinks/avy-action-embark)
    )

#+end_src

*** [[https://github.com/oantolin/embark?tab=readme-ov-file#consult][Consult]]

#+begin_src emacs-lisp

  (use-package embark-consult
    :defer t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#automatically-resizing-auto-updating-embark-collect-buffers-to-fit-their-contents][Collect Resizing]]

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :config
    (defun oantolin/embark-collect-resize-window (&rest _)
      "Resize the `embark-collect' window to match its contents."
      (when (memq embark-collect--kind '(:live :completions))
        (fit-window-to-buffer (get-buffer-window)
                               (floor (frame-height) 2) 1)))
    :hook
    (embark-collect-post-revert . oantolin/embark-collect-resize-window)
    )

#+end_src

*** Sudo Action

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :if (functionp #'karthinks/sudo-find-file)
    :bind
    (
     :map embark-file-map
     ("S" . karthinks/sudo-find-file)
     )
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt][Which Key]]

#+begin_src emacs-lisp

  (use-package embark
    :after embark
    :custom
    (embark-indicators '(
                         embark-which-key-indicator
                         embark-highlight-indicator
                         embark-isearch-highlight-indicator
                         ))
    :config
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) 'truncate-string-ellipsis "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (car binding))))))))

    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))
    (advice-add #'embark-completing-read-prompter :around #'embark-hide-which-key-indicator)
    )

#+end_src

** [[https://github.com/zkry/p-search][p-search]]

#+begin_quote

p-search is an Emacs tool to find things. It combines concepts from information retrievial and [[https://www2.stat.duke.edu/~banks/130-labs.dir/lab10.dir/Lab10_bayesian_search.pdf][Bayesian search theory]] to assist a user in finding documents.

#+end_quote

#+begin_src emacs-lisp

  (use-package p-search
    :vc (:url "https://github.com/zkry/p-search")
    :bind
    ("M-s p" . p-search)
    :ensure t
    )

#+end_src

** [[https://github.com/karthink/popper][Popper]]

#+begin_quote

Emacs minor-mode to summon and dismiss buffers easily.

#+end_quote

#+begin_src emacs-lisp

  (use-package popper
    :vc (:url "https://github.com/karthink/popper")
    :bind
    ("M-]" . popper-cycle)
    ("M-[" . popper-toggle)
    :custom
    (popper-display-control t)
    (popper-group-function #'popper-group-by-project)
    (popper-reference-buffers '(
                                cider-repl-mode
                                compilation-mode
                                eat-mode
                                eshell-mode
                                flutter-mode
                                geiser-repl-mode
                                vterm-mode
                                inferior-emacs-lisp-mode
                                inferior-lisp-mode
                                inferior-python-mode
                                shell-mode
                                "\\*ansi-term\\*"
                                "\\*Async Shell Command\\*"
                                "\\*Backtrace\\*"
                                "\\*compilation\\*"
                                "\\*Dtache Shell Command\\*"
                                "\\*eldoc\\*"
                                "\\*Ement Notifications\\*"
                                "*Flymake diagnostics.*"
                                "\\*GDB.*out\\*"
                                "\\*Messages\\*"
                                "\\*mu4e-update\\*"
                                "Output\\*$"
                                "^*tex"
                                "\\*Warnings\\*"
                                "\\*xref\\*"
                                ))
    :ensure t
    :demand t
    :init
    (popper-mode)
    (popper-echo-mode)
    )

#+end_src

** [[https://github.com/tbanel/uniline][Uniline]]

#+begin_quote

Easily draw UNICODE lines and boxes.

#+end_quote

#+begin_src emacs-lisp

  (use-package uniline
    :vc (:url "https://github.com/tbanel/uniline")
    :bind
    ("C-z i l" . uniline-mode)
    :ensure t
    )

#+end_src


** End

#+begin_src emacs-lisp

  (provide 'gs-utils)
#+end_src

* Chatting
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-chat.el
:END:

Configuration for different chat clients.

** [[https://github.com/djcb/mu][mu4e]]

#+begin_quote

maildir indexer/searcher + emacs mail client + guile bindings.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package mu4e
    :vc (
         :url "https://github.com/djcb/mu"
         :lisp-dir "mu4e"
         )
    :commands
    (mu4e)
    :custom
    (mu4e-compose-format-flowed t)
    (mu4e-change-filenames-when-moving t)
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-maildir (expand-file-name "!Mail-Provider/Personal/" mail-source-directory))
    (mu4e-view-show-addresses 't)
    (mu4e-view-show-images t)
    (mu4e-drafts-folder "/Drafts")
    (mu4e-sent-folder "/Sent")
    (mu4e-refile-folder "/All Mail")
    (mu4e-trash-folder "/Trash")
    (mu4e-maildir-shortcuts '(
                              ("/Inbox" . ?i)
                              ("/Drafts" . ?d)
                              ("/Sent" . ?s)
                              ("/Trash" . ?t)
                              ("/All Mail" . ?a)
                              ))
    )

#+end_src

*** [[https://github.com/Alexander-Miller/mu4e-column-faces][Column Faces]]

#+begin_src emacs-lisp

  (use-package mu4e-column-faces
    :vc (:url "https://github.com/Alexander-Miller/mu4e-column-faces")
    :after mu4e
    :config
    (mu4e-column-faces-mode)
    :ensure t
    )

#+end_src

*** Simple

#+begin_src emacs-lisp

  (use-package simple
    :after mu4e
    :custom
    (mail-user-agent 'mu4e-user-agent)
    )

#+end_src

*** Message

#+begin_src emacs-lisp

  (use-package message
    :custom
    (message-kill-buffer-on-exit t)
    (message-mail-user-agent t)
    (smtpmail-smtp-server "!mailprovider")
    (smtpmail-local-domain "!domain")
    (message-send-mail-function #'smtpmail-send-it)
    (smtpmail-smtp-service 465)
    (smtpmail-stream-type 'ssl)
    )

#+end_src

*** Startup

#+begin_src emacs-lisp

  (use-package startup
    :custom
    (user-mail-address "!email")
    :defer t
    )

#+end_src

** [[https://github.com/jeremy-compostella/org-msg][OrgMsg]]

#+begin_quote

OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and Message mode to compose and reply to emails in a Outlook HTML friendly style. 

#+end_quote

#+begin_src emacs-lisp

  (use-package org-msg
    :vc (:url "https://github.com/jeremy-compostella/org-msg")
    :after mu4e
    :custom
    (org-msg-greeting-fmt "\nGreetings,\n\n")
    (org-msg-default-alternatives '(
                                    (new . (text html))
                                    (reply-to-html . (text html))
                                    (reply-to-text . (text))
                                    ))
    (org-msg-convert-citation t)
    (org-msg-signature
     "Regards,

  #+begin_signature
  --
  Gabriel Santos
  #+end_signature"
     )
    :ensure t
    :config
    (org-msg-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-chat)
#+end_src

* [[https://github.com/skeeto/elfeed][Elfeed]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-elfeed.el
:CREDITS:  https://midirus.com/emacs/tutorial#elfeed
:END:

#+begin_quote

Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp

  (use-package elfeed
    :vc (:url "https://github.com/skeeto/elfeed")
    :bind
    (
     :map elfeed-search-mode-map
     ("R" . kaushal-modi/elfeed-search-mark-all-as-read)
     :map elfeed-show-mode-map
     ("C-c C-o" . shr-browse-url)
     )
    :config
    ;; https://emacs.stackexchange.com/a/2441
    (defun kaushal-modi/elfeed-search-mark-all-as-read ()
      "Call `mark-whole-buffer' and `elfeed-search-untag-all-undead' in unison,
  marking all current messages as read."
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))
    :defer t
    :ensure t
    )

#+end_src

** [[https://github.com/remyhonig/elfeed-org][Org Mode]]

#+begin_quote

Configure the Elfeed RSS reader with an Orgmode file.

#+end_quote

#+begin_src emacs-lisp

  (use-package elfeed-org
    :vc (:url "https://github.com/remyhonig/elfeed-org")
    :after elfeed org
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory)))
    :ensure t
    )

#+end_src

** [[https://karthinks.com/software/lazy-elfeed/#open-feeds-in-emacs][EWW]]

#+begin_src emacs-lisp

  (use-package elfeed
    :bind
    (
     :map elfeed-show-mode-map
     ("B" . karthinks/elfeed-show-eww-open)
     :map elfeed-search-mode-map
     ("B" . karthinks/elfeed-search-eww-open)
     )
    :config
    (defun karthinks/elfeed-show-eww-open (&optional use-generic-p)
      "Open elfeed show entry with \\[eww]."
      (interactive "P")
      (let ((browse-url-browser-function #'eww-browse-url))
        (elfeed-show-visit use-generic-p)))
    (defun karthinks/elfeed-search-eww-open (&optional use-generic-p)
      "Open elfeed search entry with \\[eww]."
      (interactive "P")
      (let ((browse-url-browser-function #'eww-browse-url))
        (elfeed-search-browse-url use-generic-p)))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-elfeed)
#+end_src

* [[https://github.com/emacs-evil/evil][Evil Mode]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys-evil.el
:END:

#+begin_quote

The extensible vi layer for Emacs.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Simple

Bind the universal argument to another key to avoid conflicts.

#+begin_src emacs-lisp

  (use-package simple
    :bind
    ("C-M-u" . universal-argument)
    )

#+end_src

** Emacs

This is needed for ~evil-collection~.

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (evil-want-keybinding nil)
    )

#+end_src

** Evil

#+begin_quote

The extensible vi layer for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    )

#+end_src

** Core

#+begin_quote

Core functionality.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    :init
    (evil-mode)
    )

#+end_src

** Variables
:PROPERTIES:
:CREDITS:  1. [[https://codeberg.org/blau_araujo/edz/src/branch/main/parte-05/config.org#headline-28][blau_araujo]], 2. [[https://github.com/Gavinok/emacs.d/blob/main/lisp/evil-config.el][Gavinok]]
:END:

#+begin_quote

Settings and variables.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-vars
    :custom
    (evil-disable-insert-state-bindings t) ;; 2
    (evil-respect-visual-line-mode t) ;; 1
    (evil-undo-system 'undo-redo)
    (evil-split-window-below t) ;; 1
    (evil-v$-excludes-newline t) ;; 1
    (evil-vsplit-window-right t) ;; 1
    (evil-want-C-i-jump nil) ;; 1
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t) ;; 2
    )

#+end_src

** Commands
:PROPERTIES:
:CREDITS:  1. [[https://codeberg.org/blau_araujo/edz/src/branch/main/parte-05/config.org#headline-28][blau_araujo]], 2. [[https://github.com/Gavinok/emacs.d/blob/main/lisp/evil-config.el][Gavinok]]
:END:

#+begin_quote

Evil commands and operators.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-commands
    :bind
    (
     :map evil-normal-state-map
     ("C-n" . evil-next-line)
     ("C-p" . evil-previous-line)
     (")" . evil-next-close-paren)
     ("(" . evil-previous-open-paren)
     )
    )

#+end_src

** Search

#+begin_quote

Search and substitute.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-search
    :custom
    (evil-search-module 'evil-search)
    )

#+end_src

** States
:PROPERTIES:
:CREDITS:  https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.el#L164
:END:

The different states found in Evil Mode.

#+begin_src emacs-lisp

  (use-package evil-states
    :bind
    (
     :map evil-insert-state-map
     ;; In insert state, use the default quit command to return to normal state
     ("C-g" . evil-normal-state)
     :map evil-motion-state-map
     ;; Disabled to avoid conflict with Org Mode
     ("RET" . nil)
     )
    )

#+end_src

** [[https://github.com/awth13/org-appear?tab=readme-ov-file#usage][Org Appear]]

Toggles org-appear based on the current evil state.

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-appear
    :custom
    (org-appear-trigger 'manual)
    :config
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'evil-insert-state-entry-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'evil-insert-state-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t)))
    )

#+END_src

** Vertico

#+begin_src emacs-lisp

  (use-package evil-core
    :after vertico
    :bind
    (
     :map vertico-map
     ("C-j" . vertico-next)
     ("C-k" . vertico-previous)
     )
    )

#+end_src

** [[https://reddit.com/r/emacs/comments/12zyrnk/evilsetleader_vs_generalel_for_spc_based/][Leader Keys]]

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-set-leader nil (kbd "SPC"))
    )

#+end_src

*** Buffer Management

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>B") #'ibuffer)
    (evil-define-key 'normal 'global (kbd "<leader>b") #'switch-to-buffer)
    )

#+end_src

*** Character Insertion

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ie") #'emoji-insert)
    (evil-define-key 'normal 'global (kbd "<leader>ic") #'insert-char)
    )

#+end_src

*** File Shortcuts

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>fe") #'(lambda () (interactive) (find-file (expand-file-name "emacs.org" user-emacs-directory))))
    )

#+end_src

*** Org Mode

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>oa") #'org-agenda)
    (evil-define-key 'normal 'global (kbd "<leader>oc") #'org-clock-report)
    (evil-define-key 'normal 'global (kbd "<leader>od") #'org-deadline)
    (evil-define-key 'normal 'global (kbd "<leader>ol") #'org-insert-link)
    (evil-define-key 'normal 'global (kbd "<leader>os") #'org-schedule)
    (evil-define-key 'normal 'global (kbd "<leader>op") #'org-set-property)
    (evil-define-key 'normal 'global (kbd "<leader>ot") #'org-todo)
    )

#+end_src

*** Window Movement

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>wo") #'other-window)
    (evil-define-key 'normal 'global (kbd "<leader>wk") #'windmove-up)
    (evil-define-key 'normal 'global (kbd "<leader>wj") #'windmove-down)
    (evil-define-key 'normal 'global (kbd "<leader>wh") #'windmove-left)
    (evil-define-key 'normal 'global (kbd "<leader>wl") #'windmove-right)
    )

#+end_src

*** Shell

#+begin_src emacs-lisp

  (use-package evil-core
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ts") #'eshell)
    )

#+end_src

*** Magit

#+begin_src emacs-lisp

  (use-package evil-core
    :after magit
    :config
    (evil-define-key 'normal 'global (kbd "<leader>mc") #'magit-clone)
    (evil-define-key 'normal 'global (kbd "<leader>ms") #'magit-status)
    )

#+end_src

*** Org Roam

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-roam
    :config
    (evil-define-key 'normal 'global (kbd "<leader>rb") #'dw/org-roam-capture-inbox)
    (evil-define-key 'normal 'global (kbd "<leader>rd") #'org-roam-dailies-map)
    (evil-define-key 'normal 'global (kbd "<leader>rf") #'org-roam-node-find)
    (evil-define-key 'normal 'global (kbd "<leader>ri") #'org-roam-node-insert)
    )

#+end_src

**** User Interface

#+begin_src emacs-lisp

  (use-package evil-core
    :after org-roam-ui
    :config
    (evil-define-key 'normal 'global (kbd "<leader>ru") #'org-roam-ui-open)
    )

#+end_src

*** Nerd Icons

#+begin_src emacs-lisp

  (use-package evil-core
    :after nerd-icons
    :config
    (evil-define-key 'normal 'global (kbd "<leader>in") #'nerd-icons-insert)
    )

#+end_src

** [[https://github.com/emacs-evil/evil-collection][Collection]]

#+begin_quote

A set of keybindings for evil-mode.

#+end_quote

#+begin_src emacs-lisp

  (use-package evil-collection
    :vc (:url "https://github.com/emacs-evil/evil-collection")
    :ensure t
    :init
    (evil-collection-init)
    )

#+end_src

** [[https://github.com/Somelauw/evil-org-mode][Org Mode]]
:PROPERTIES:
:CREDITS:  https://github.com/daviwil/dotfiles/blob/master/.emacs.d/modules/dw-keys-evil.el
:END:

#+begin_quote

Supplemental evil-mode keybindings to emacs org-mode

#+end_quote

Why is this one not included in the collection?

#+begin_src emacs-lisp

  (use-package evil-org
    :vc (:url "https://github.com/Somelauw/evil-org-mode")
    :hook
    (
     (org-agenda-mode . evil-org-mode)
     (org-mode . evil-org-mode)
     )
    :config
    (evil-org-set-key-theme '(navigation todo insert textobjects additional))
    :ensure t
    )

#+end_src

*** Agenda

#+begin_src emacs-lisp

  (use-package evil-org-agenda
    :config
    (evil-org-agenda-set-keys)
    )

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :custom
    (which-key-allow-evil-operators t)
    )

#+end_src


** End

#+begin_src emacs-lisp

  (provide 'gs-keys-evil)
#+end_src

* [[https://github.com/meow-edit/meow][Meow Mode]]
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-keys-meow.el
:END:

#+begin_quote

Yet another modal editing on Emacs.

#+end_quote

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** Meow

#+begin_src emacs-lisp

  (use-package meow
    :vc (:url "https://github.com/meow-edit/meow")
    :ensure t
    )

#+end_src

** Core

#+begin_quote

Modes definition in Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-core
    :init
    (meow-global-mode)
    )

#+end_src

** Variables

#+begin_quote

Internal variables and customizable variables.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-var
    :custom
    (meow-use-clipboard t)
    )

#+end_src

** Cheatsheet

#+begin_quote

Cheatsheet for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-cheatsheet
    :custom
    (meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    )

#+end_src

*** Layout

#+begin_quote

Cheatsheet layouts for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-cheatsheet-layout
    :custom
    (meow-cheatsheet-layout-qwerty t)
    )

#+end_src

** Commands

#+begin_quote

Implementation of all commands in Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-command
    :config
    (defun gs-101/meow-super-prev ()
      "Runs different upwards navigation commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-navigate-up'
  - `markdown-mode' :: `markdown-previous-visible-heading'
  - `org-mode' :: `org-previous-visible-heading'
  - `prog-mode' :: `backward-up-list'
  - Other :: `meow-prev-expand'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-navigate-up))
       ((derived-mode-p 'markdown-mode) (markdown-previous-visible-heading 1))
       ((derived-mode-p 'org-mode) (org-previous-visible-heading 1))
       ((derived-mode-p 'prog-mode) (backward-up-list))
       (t (meow-prev-expand 1)))
      )

    (defun gs-101/meow-super-next ()
      "Runs different downwards navigation commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-navigate-down'
  - `markdown-mode' :: `markdown-next-visible-heading'
  - `org-mode' :: `org-next-visible-heading'
  - `prog-mode' :: `down-list'
  - Other :: `meow-next-expand'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-navigate-down))
       ((derived-mode-p 'markdown-mode) (markdown-next-visible-heading 1))
       ((derived-mode-p 'org-mode) (org-next-visible-heading 1))
       ((derived-mode-p 'prog-mode) (down-list))
       (t (meow-next-expand 1)))
      )

    (defun gs-101/meow-super-left ()
      "Runs different leftwards navigation commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-navigate-previous'
  - `prog-mode' :: `backward-sexp'
  - `text-mode' :: `meow-back-word'
  - Other :: `meow-left-expand'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-navigate-previous))
       ((derived-mode-p 'prog-mode) (backward-sexp))
       ((derived-mode-p 'text-mode) (meow-back-word 1))
       (t (meow-left-expand)))
      )

    (defun gs-101/meow-super-right ()
      "Runs different rightwards navigation commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-navigate-next'
  - `prog-mode' :: `forward-sexp'
  - `text-mode' :: `meow-next-word'
  - Other :: `meow-right-expand'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-navigate-next))
       ((derived-mode-p 'prog-mode) (forward-sexp))
       ((derived-mode-p 'text-mode) (meow-next-word 1))
       (t (meow-right-expand)))
      )
    (defun gs-101/meow-super-kill ()
      "Runs different kill commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-kill-node-dwim'
  - `prog-mode' :: `kill-sexp'
  - Other :: `meow-kill-whole-line'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-kill-node-dwim))
       ((derived-mode-p 'prog-mode) (kill-sexp))
       (t (meow-kill-whole-line)))
      )
    (defun gs-101/meow-super-mark ()
      "Runs different mark commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-mark-node-dwim'
  - `prog-mode' :: `meow-block'
  - Other :: `meow-mark-word'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-mark-node-dwim))
       ((derived-mode-p 'prog-mode) (meow-block 1))
       (t (meow-mark-word 1)))
      )
    (defun gs-101/meow-transpose ()
      "Runs different transposition commands based on the current major or minor mode.

  - `combobulate-mode' :: `combobulate-transpose-sexps'
  - `prog-mode' :: `meow-transpose-sexp'
  - Other :: `transpose-words'"
      (interactive)
      (cond
       ((seq-some (lambda (mode) (string-match-p "combobulate" (symbol-name mode))) local-minor-modes) (combobulate-transpose-sexps))
       ((derived-mode-p 'prog-mode) (meow-transpose-sexp))
       (t (transpose-words)))
      )
    (defvar gs-101/meow-beginning-of-line "C-a"
      "KBD macro for command`beginning-of-line'.")
    (defun gs-101/meow-super-beginning ()
      "Runs different beginning commands depending on current major mode.
  - `prog-mode' :: `meow-back-to-indentation'
  - Other :: `beginning-of-line'"
      (interactive)
      (cond
       ((derived-mode-p 'prog-mode) (meow-back-to-indentation))
       (t (meow--execute-kbd-macro gs-101/meow-beginning-of-line))))
    )

#+end_src

** Helpers

#+begin_quote

Meow helpers for customization.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-helpers
    :config
    (meow-leader-define-key
     '("z" . "C-z")
     ;; Use SPC (0-9) for digit arguments.
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     )
    (meow-motion-overwrite-define-key
     '("<escape>" . ignore)
     )
    )

#+end_src

** Normal Mode

#+begin_src emacs-lisp

  (use-package meow-helpers
    :config
    (meow-normal-define-key
     '("-" . negative-argument)
     '("+" . meow-universal-argument)
     '("," . meow-pop-marker)
     '("." . meow-find-ref)
     '("[" . meow-inner-of-thing)
     '("]" . meow-bounds-of-thing)
     '("<" . beginning-of-buffer)
     '(">" . end-of-buffer)
     '("'" . repeat)
     '("=" . meow-indent)
     '("|" . align-regexp)
     '("<escape>" . ignore)
     '("?" . meow-comment)
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("a" . gs-101/meow-super-beginning)
     '("A" . meow-beginning-of-thing)
     '("b" . meow-left)
     '("B" . gs-101/meow-super-left)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("e" . move-end-of-line)
     '("E" . meow-end-of-thing)
     '("f" . meow-right)
     '("F" . gs-101/meow-super-right)
     '("g" . meow-grab)
     '("G" . meow-swap-grab)
     '("h" . meow-mark-word)
     '("H" . gs-101/meow-super-mark)
     '("i" . meow-insert)
     '("I" . meow-append)
     '("j" . meow-pop-to-mark)
     '("J" . meow-pop-to-global-mark)
     '("k" . meow-kill)
     '("K" . gs-101/meow-super-kill)
     '("l" . meow-visual-line)
     '("L" . meow-visual-line-expand)
     '("n" . meow-next)
     '("N" . gs-101/meow-super-next)
     '("p" . meow-prev)
     '("P" . gs-101/meow-super-prev)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("R" . meow-query-replace-regexp)
     '("s" . isearch-forward)
     '("t" . gs-101/meow-transpose)
     '("u" . undo)
     '("U" . undo-redo)
     '("v" . meow-visit)
     '("w" . meow-save)
     '("y" . meow-yank)
     '("Y" . meow-yank-pop)
     '("z" . meow-till)
     '("Z" . meow-till-expand)
     )
    )

#+end_src

** Avy

#+begin_src emacs-lisp

  (use-package meow-command
    :after meow avy
    :bind
    (
     :map meow-normal-state-keymap
     ([remap meow-pop-to-mark] . favetelinguis/meow-jumper)
     )
    :config
    (defun gs-101/meow-avy-action-kill-whole-line (pt)
      "Jump to target at marker PT, killing its whole line after the jump.
  This follows the parameters set by `meow-kill-whole-line'."
      (save-excursion
        (goto-char pt)
        (meow-kill-whole-line)))

    (defun gs-101/meow-avy-action-block (pt)
      "Mark block at PT."
      (goto-char pt)
      (meow-block pt))

    (setf
     (alist-get ?K avy-dispatch-alist) #'gs-101/meow-avy-action-kill-whole-line
     (alist-get ?m avy-dispatch-alist) #'gs-101/meow-avy-action-block
     )

    (defun favetelinguis/meow-jumper (&optional arg)
      "Switch between Meow search and Avy,
  depending on if the region is active.
  If the region is active, this function calls `meow-search'.
  Otherwise, it calls `avy-goto-char-timer'."
      (interactive)
      (if (region-active-p)
          (meow-search arg)
        (avy-goto-char-timer)))
    )

#+end_src

** [[https://github.com/skissue/meow-tree-sitter][Tree-Sitter]]

#+begin_quote

Tree-sitter powered motions for Meow.

#+end_quote

#+begin_src emacs-lisp

  (use-package meow-tree-sitter
    :vc (:url "https://github.com/skissue/meow-tree-sitter")
    :ensure t
    :config
    (meow-tree-sitter-register-defaults)
    )

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package meow-helpers
    :after embark
    :config
    (meow-normal-define-key
     '(";" . embark-act))
    )

#+end_src

** [[https://github.com/awth13/org-appear/issues/42#issuecomment-1063517134][Org Appear]]

#+begin_src emacs-lisp

  (use-package meow-core
    :after org-appear
    :custom
    (org-appear-trigger 'manual)
    :config
    (add-hook 'org-mode-hook (lambda ()
                               (add-hook 'meow-insert-enter-hook
                                         #'org-appear-manual-start
                                         nil
                                         t)
                               (add-hook 'meow-insert-exit-hook
                                         #'org-appear-manual-stop
                                         nil
                                         t)))
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-keys-meow)
#+end_src

* User Interface
:PROPERTIES:
:header-args:emacs-lisp: :results none :lexical t :mkdirp yes :tangle ./modules/gs-ui.el
:END:

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

** IMPORTANT

[[https://www.masteringemacs.org/article/bad-emacs-advice][Enable the menu bar if you're a new user]].
It may not look good, but it is a really useful tool.
You can disable it after getting used to Emacs.

** Emacs

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (menu-bar-mode nil)
    (ring-bell-function #'ignore)
    (scroll-preserve-screen-position t)
    (tool-bar-mode nil)
    (tooltip-mode nil)
    (use-dialog-box nil)
    (use-file-dialog nil)
    (visible-bell nil)
    (x-stretch-cursor t)
    (x-underline-at-descent-line nil)
    )

#+END_src

** Display Line Numbers

#+begin_quote

Interface for display-line-numbers.

#+end_quote

#+begin_src emacs-lisp

  (use-package display-line-numbers
    :hook
    (prog-mode . display-line-numbers-mode)
    )

#+end_src

** [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#font-configuration][Faces]]

#+begin_quote

Lisp faces.

#+end_quote

#+begin_src emacs-lisp

  (use-package faces
    :preface
    (defun dw/set-font-faces ()
      ;; Set the default face
      (set-face-attribute 'default nil :font "Cascadia Code NF")
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "Cascadia Mono NF")
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Cascadia Code NF" :weight 'regular))
    :init
    (dw/set-font-faces)
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package faces
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (dw/set-font-faces))))
    )

#+end_src

*** [[https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/init.el#L106][Frame]]

#+begin_quote

Multi-frame management independent of window systems.

#+end_quote

#+begin_src emacs-lisp

  (use-package frame
    :config (setq-mode-local doc-view-mode blink-cursor-mode nil)
    :custom
    (window-divider-default-bottom-width 1)
    (window-divider-default-places t)
    (window-divider-default-right-width 1)
    :init
    (window-divider-mode)
    )

#+end_src

** Mouse
:PROPERTIES:
:CREDITS:  https://codeberg.org/ashton314/emacs-bedrock/src/commit/f17a4b4d5116ac7eec3b30a0d43fa46eb074da0b/init.el#L73
:END:


#+begin_src emacs-lisp

  (use-package mouse
    :if (display-graphic-p)
    :init
    (context-menu-mode)
    )
#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package mouse
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (context-menu-mode)))
    )

#+end_src

** Org Mode

*** [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#better-font-faces][Faces]]

#+begin_src emacs-lisp

  (use-package org-faces
    :config
    (dolist
        (face '(
                (org-level-1 . 1.30)
                (org-level-2 . 1.29)
                (org-level-3 . 1.28)
                (org-level-4 . 1.27)
                (org-level-5 . 1.26)
                (org-level-6 . 1.25)
                (org-level-7 . 1.24)
                (org-level-8 . 1.23)
                )
              )
      (set-face-attribute (car face) nil :font "Cascadia Code NF" :weight 'medium :height (cdr face)))
    (set-face-attribute 'org-document-title nil :font "Cascadia Code NF" :weight 'medium :height 1.40)
    )

#+end_src

*** Fontify

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-ellipsis 'truncate-string-ellipsis)
    (org-fontify-done-headline t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-whole-heading-line t)
    (org-hide-emphasis-markers t)
    (org-hide-leading-stars)
    )

#+end_src

*** Prettify

#+begin_src emacs-lisp

  (use-package org
    :custom
    (org-pretty-entities t)
    (org-pretty-entities-include-sub-superscripts t)
    )

#+end_src

*** [[https://github.com/minad/org-modern][Org Modern]]

#+begin_quote

Modern Org Style.

#+end_quote

#+begin_src emacs-lisp

  (use-package org-modern
    :vc (:url "https://github.com/minad/org-modern")
    :custom
    (org-modern-star 'replace)
    (org-modern-replace-stars "󰪥󰪤󰪣󰪢󰪡󰪠󰪟")
    (org-modern-table-vertical 1)
    :ensure t
    :init
    (global-org-modern-mode)
    )

#+end_src

**** Prettify Agenda

#+begin_src emacs-lisp

  (use-package org-agenda
    :custom
    (org-agenda-block-separator ?─)
    (org-agenda-current-time-string
     "←──────────────")
    (org-agenda-time-grid
     '((daily today require-timed)
       (600 800 1000 1200 1400 1600 1800 2000 2200)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    )

#+end_src

** Scroll Bar

#+begin_quote

Window system-independent scroll bar support.

#+end_quote

#+begin_src emacs-lisp

  (use-package scroll-bar
    :custom
    (scroll-bar-mode nil)
    )

#+end_src

** Startup
:PROPERTIES:
:CREDITS:  https://github.com/jamescherti/minimal-emacs.d/blob/837e3d46acfe5a6c385b4ae253b9549d89ece1cf/early-init.el#L182
:END:

#+begin_quote

This file parses the command line and gets Emacs running. Options on the command line are handled in precedence order.

#+end_quote

#+begin_src emacs-lisp

  (use-package startup
    :config
    (advice-add #'display-startup-echo-area-message :override #'ignore)
    (advice-add #'display-startup-screen :override #'ignore)
    :custom
    (initial-scratch-message nil)
    (inhibit-startup-echo-area-message t)
    (inhibit-startup-message t)
    (inhibit-startup-screen t)
    :defer t
    )

#+end_src

** Window
:PROPERTIES:
:CREDITS:  1. [[https://github.com/jamescherti/minimal-emacs.d/blob/main/init.el][jamescherti]], 2. [[https://github.com/oantolin/emacs-config/blob/a80c3b6a4c7e0fa87254a0c148fe7f9b2976edd1/init.el][oantolin]]
:END:

#+begin_quote

Window tree functions.

#+end_quote

#+begin_src emacs-lisp

  (use-package window
    :custom
    (recenter-positions '(top middle bottom)) ;; 2
    (scroll-error-top-bottom t) ;; 1
    (split-height-threshold nil) ;;1
    (split-width-threshold 170) ;; 1
    (switch-to-buffer-obey-display-actions t) ;; 2
    )

#+end_src


** Which Key
:PROPERTIES:
:CREDITS:  https://codeberg.org/blau_araujo/edz/src/branch/main/parte-06-final/config.org#headline-37
:END:

#+begin_quote

Display available keybindings in popup.

#+end_quote

#+begin_src emacs-lisp

  (use-package which-key
    :custom
    (which-key-add-column-padding 1)
    (which-key-idle-delay 0.5)
    (which-key-min-display-lines 6)
    (which-key-separator " = ")
    (which-key-side-window-slot -10)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    :init
    (which-key-mode)
    )

#+end_src

** [[https://github.com/catppuccin/emacs][Catppuccin]]

#+begin_quote

Soothing pastel theme for Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :preface
    (load-theme 'catppuccin t)
    :ensure t
    )

#+end_src

** [[https://github.com/ankurdave/color-identifiers-mode][Color Identifier Mode]]

#+begin_quote

Emacs minor mode to highlight each source code identifier uniquely based on its name.

#+end_quote

#+begin_src emacs-lisp

  (use-package color-identifiers-mode
    :vc (:url "https://github.com/ankurdave/color-identifiers-mode")
    :ensure t
    :config
    (defun gs-101/color-identifiers-toggle-on-ts-mode ()
      "Enable `color-identifiers-mode' in tree-sitter modes.

  Disable if `prism-mode' is currently enabled on the buffer."
      (when (string-match-p "-ts-mode\\'" (symbol-name major-mode))
        (color-identifiers-mode))
      (when (bound-and-true-p prism-mode)
        (setq-local color-identifiers-mode nil)))
    :hook
    (prog-mode . gs-101/color-identifiers-toggle-on-ts-mode)
    )

#+end_src

** [[https://github.com/seagle0128/doom-modeline][DOOM Modeline]]

#+begin_quote

A fancy and fast mode-line inspired by minimalism design.

#+end_quote

#+begin_src emacs-lisp

  (use-package doom-modeline
    :vc (:url "https://github.com/seagle0128/doom-modeline")
    :config
    (advice-add #'doom-modeline-lsp-icon :override
                (defun gs-101/doom-modeline-lsp-icon (text face)
                  "Display LSP icon (or TEXT in terminal) with FACE.

  This advice replaces the rocket icon with a electric plug icon."
                  (if doom-modeline-lsp-icon
                      (doom-modeline-icon 'mdicon "nf-md-connection" "🔌" text :face face)
                    (propertize text 'face face))))
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    (doom-modeline-ellipsis 'truncate-string-ellipsis)
    (doom-modeline-enable-word-count t)
    (doom-modeline-modal-modern-icon nil)
    :ensure t
    :init
    (doom-modeline-mode)
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package doom-modeline
    :after doom-modeline
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)))
    )

#+end_src

** [[https://github.com/purcell/diredfl][diredfl]]

#+begin_quote

Extra Emacs font lock rules for a more colourful dired.

#+end_quote

#+begin_src emacs-lisp

  (use-package diredfl
    :vc (:url "https://github.com/purcell/diredfl")
    :ensure t
    :hook
    (dired-mode . diredfl-mode)
    )

#+end_src

** [[https://github.com/casouri/eldoc-box][ElDoc Box]]

#+begin_quote

Childframe doc for eglot and anything that uses eldoc.

#+end_quote

#+begin_src emacs-lisp

  (use-package eldoc-box
    :vc (:url "https://github.com/casouri/eldoc-box")
    :after eldoc
    :ensure t
    :config
    (setq-mode-local typescript-ts-base-mode eldoc-box-buffer-setup-function #'eldoc-box-prettify-ts-errors-setup)
    (setq-mode-local tsx-ts-mode eldoc-box-buffer-setup-function #'eldoc-box-prettify-ts-errors-setup)
    :hook
    (eldoc-mode . eldoc-box-hover-mode)
    )

#+end_src

** [[https://github.com/Wilfred/helpful][Helpful]]

#+begin_quote

A better Emacs help buffer.

#+end_quote

#+begin_src emacs-lisp

  (use-package helpful
    :vc (:url "https://github.com/Wilfred/helpful")
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    :config
    (set-face-attribute 'helpful-heading nil :height 1.5)
    :ensure t
    )

#+end_src

** [[https://github.com/tarsius/hl-todo][hl-todo]]

#+begin_quote

Highlight TODO keywords.

#+end_quote

#+begin_src emacs-lisp

  (use-package hl-todo
    :vc (:url "https://github.com/tarsius/hl-todo")
    :custom
    (hl-todo-keyword-faces '(
                             ("FIXME" . "red")
                             ("NOTE" . "yellow")
                             ("QUESTION" . "yellow")
                             ("ANSWER" . "green")
                             ("FIX" . "red")
                             ("FEAT" . "yellow")
                             ("DOCS" . "white")
                             ("HACK" . "green")
                             ("STYLE" . "orange")
                             ("REFACTOR" . "white")
                             ("REVIEW" . "white")
                             ("CHORE" . "grey")
                             ("MERGED" . "green")
                             ("CLOSED" . "red")
                             ))
    :ensure t
    :hook
    (prog-mode . hl-todo-mode)
    (text-mode . hl-todo-mode)
    )

#+end_src

*** Catppuccin Colors

#+begin_src emacs-lisp

  (use-package hl-todo
    :after hl-todo catppuccin-theme
    :custom
    (hl-todo-keyword-faces
     (mapcar (lambda (keyword-color)
               (cons (car keyword-color)
                     (catppuccin-get-color (cdr keyword-color))))
             '(
               ("FIXME" . red)
               ("NOTE" . yellow)
               ("QUESTION" . yellow)
               ("ANSWER" . green)
               ("FIX" . red)
               ("FEAT" . yellow)
               ("DOCS" . blue)
               ("HACK" . green)
               ("STYLE" . lavender)
               ("REFACTOR" . sapphire)
               ("REVIEW" . sapphire)
               ("CHORE" . overlay0)
               ("MERGED" . green)
               ("CLOSED" . red)
               )))
    )

#+end_src

** [[https://github.com/tarsius/keycast][Keycast]]

#+begin_quote

Show current command and its key in the mode line.

#+end_quote

#+begin_src emacs-lisp

  (use-package keycast
    :vc (:url "https://github.com/tarsius/keycast")
    :config
    (set-face-attribute 'keycast-key nil :background 'unspecified :foreground 'unspecified :box 'unspecified)
    :ensure t
    :init
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with `doom-modeline')."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))
    (keycast-mode)
    )

#+end_src

*** Command Customization

#+begin_src emacs-lisp

  (use-package keycast
    :after keycast
    :config
    (mapc (lambda (command)
            (add-to-list 'keycast-substitute-alist command)) '(
            (backward-delete-char-untabify "" "Erasing...")
            (delete-backward-char "" "Erasing...")
            (org-delete-backward-char "" "Erasing...")
            (self-insert-command "" "Typing...")
            (org-self-insert-command "" "Typing...")
            (vertico-next nil nil)
            (vertico-previous nil nil)
            ))
    )

#+end_src

*** Daemon Support

#+begin_src emacs-lisp

  (use-package keycast
    :if (daemonp)
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-face-attribute 'keycast-key nil :background 'unspecified :foreground "default" :box 'unspecified))))
    )

#+end_src

*** [[https://github.com/oantolin/embark/wiki/Additional-Configuration#showing-embark-actions-keys-in-keycast-mode][Embark Support]]

#+begin_src emacs-lisp

  (use-package keycast
    :after embark
    :config
    (defun oantolin/keycast-store-action-key-cmd (cmd)
      "Store key and CMD command information for `keycast' use."
      (force-mode-line-update t)
      (setq this-command cmd
            keycast--this-command-keys (this-single-command-keys)
            keycast--this-command-desc cmd))
    (advice-add #'embark-keymap-prompter :filter-return #'oantolin/keycast-store-action-key-cmd)
    (defun oantolin/keycast--update-force (&rest _)
      "Version of `keycast--update' that accepts (and ignore) parameters."
      (keycast--update))
    (advice-add 'embark-act :before #'oantolin/keycast--update-force)
    )

#+end_src

** [[https://github.com/mickeynp/ligature.el][Ligatures]]

#+begin_quote

Display typographical ligatures in Emacs.

#+end_quote

#+begin_src emacs-lisp

  (use-package ligature
    :vc (:url "https://github.com/mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    :ensure t
    :hook
    (prog-mode . ligature-mode)
    )

#+end_src

** Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :after markdown-mode
    :custom
    (markdown-enable-highlighting-syntax t)
    (markdown-hide-markup t)
    )

#+end_src


** [[https://github.com/rainstormstudio/nerd-icons.el][Nerd Icons]]

#+begin_quote

A Library for Nerd Font icons.

#+end_quote

#+begin_src emacs-lisp

  (use-package nerd-icons
    :vc (:url "https://github.com/rainstormstudio/nerd-icons.el")
    :bind
    ("C-z i n" . nerd-icons-insert)
    :demand t
    :ensure t
    )

#+end_src

*** [[https://github.com/emacs-citar/citar/wiki/Indicators#nerd-icons][Citar]]

#+begin_src emacs-lisp

  (use-package citar
    :after citar nerd-icons
    :config
      (defvar citar-indicator-cited-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-record"
                  :face 'nerd-icons-lgreen)
         :function #'citar-is-cited
         :padding "  "
         :tag "is:cited"))
        (defvar citar-indicator-files-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-file"
                  :face 'nerd-icons-blue
                  :v-adjust -0.1)
         :function #'citar-has-files
         :padding "  " ; need this because the default padding is too low for these icons
         :tag "has:files"))
      (defvar citar-indicator-links-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-link"
                  :face 'nerd-icons-lblue
                  :v-adjust 0.01)
         :function #'citar-has-links
         :padding "  "
         :tag "has:links"))
      (defvar citar-indicator-notes-icons
        (citar-indicator-create
         :symbol (nerd-icons-mdicon
                  "nf-md-text"
                  :face 'nerd-icons-blue
                  :v-adjust -0.3)
         :function #'citar-has-notes
         :padding "    "
         :tag "has:notes"))
      (setq citar-indicators
       (list
        citar-indicator-cited-icons
        citar-indicator-files-icons
        citar-indicator-links-icons
        citar-indicator-notes-icons
        ))
      )

#+end_src

*** [[https://github.com/rainstormstudio/nerd-icons-completion][Completion]]

#+begin_src emacs-lisp

  (use-package nerd-icons-completion
    :vc (:url "https://github.com/rainstormstudio/nerd-icons-completion")
    :after nerd-icons
    :ensure t
    :config
    (nerd-icons-completion-mode)
    )

#+end_src

**** [[https://github.com/rainstormstudio/nerd-icons-completion?tab=readme-ov-file#setup][Marginalia]]

#+begin_src emacs-lisp

  (use-package nerd-icons-completion
    :after nerd-icons
    :hook
    (marginalia-mode . nerd-icons-completion-marginalia-setup)
    )

#+end_src

*** [[https://github.com/mohkale/compile-multi/tree/master?tab=readme-ov-file#compile-multi-nerd-icons][compile-multi]]

#+begin_src emacs-lisp

  (use-package compile-multi-nerd-icons
    :after nerd-icons compile-multi
    :ensure t
    )

#+end_src

*** [[https://github.com/LuigiPiucco/nerd-icons-corfu][Corfu]]

#+begin_src emacs-lisp

  (use-package nerd-icons-corfu
    :vc (:url "https://github.com/LuigiPiucco/nerd-icons-corfu")
    :after nerd-icons corfu
    :custom
    (corfu-margin-formatters #'nerd-icons-corfu-formatter)
    (nerd-icons-corfu-mapping '(
                                 (array :style "md" :icon "code_array" :face font-lock-type-face)
                                (boolean :style "md" :icon "checkbox_intermediate" :face font-lock-builtin-face)
                                (class :style "md" :icon "file_tree" :face font-lock-type-face)
                                (color :style "md" :icon "format_paint" :face success)
                                (command :style "dev" :icon "terminal" :face default)
                                (constant :style "md" :icon "card_text_outline" :face font-lock-constant-face)
                                (constructor :style "md" :icon "arrow_right" :face font-lock-function-name-face)
                                (enummember :style "md" :icon "cards_outline" :face font-lock-builtin-face)
                                (enum-member :style "md" :icon "cards_outline" :face font-lock-builtin-face)
                                (enum :style "md" :icon "card_text_outline" :face font-lock-builtin-face)
                                (event :style "md" :icon "lightning_bolts" :face font-lock-warning-face)
                                (field :style "md" :icon "toy_brick" :face font-lock-variable-name-face)
                                (file :style "md" :icon "file" :face font-lock-string-face)
                                (folder :style "md" :icon "folder" :face font-lock-doc-face)
                                (interface :style "md" :icon "transit_connection_variant" :face font-lock-type-face)
                                (keyword :style "md" :icon "text" :face font-lock-keyword-face)
                                (macro :style "md" :icon "arrow_expand" :face font-lock-keyword-face)
                                (magic :style "md" :icon "magic_staff" :face font-lock-builtin-face)
                                (method :style "md" :icon "cube_outline" :face font-lock-function-name-face)
                                (function :style "md" :icon "function" :face font-lock-function-name-face)
                                (module :style "md" :icon "file_send" :face font-lock-preprocessor-face)
                                (numeric :style "md" :icon "numeric" :face font-lock-builtin-face)
                                (operator :style "cod" :icon "symbol_operator" :face font-lock-comment-delimiter-face)
                                (param :style "md" :icon "code_parentheses" :face default)
                                (property :style "md" :icon "wrench" :face font-lock-variable-name-face)
                                (reference :style "md" :icon "file_link" :face font-lock-variable-name-face)
                                (snippet :style "md" :icon "note_text" :face font-lock-string-face)
                                (string :style "md" :icon "code_string" :face font-lock-string-face)
                                (struct :style "md" :icon "new_box" :face font-lock-variable-name-face)
                                (text :style "md" :icon "format_text" :face font-lock-doc-face)
                                (typeparameter :style "md" :icon "format_list_bulleted" :face font-lock-type-face)
                                (type-parameter :style "md" :icon "format_list_bulleted" :face font-lock-type-face)
                                (unit :style "md" :icon "ruler" :face font-lock-constant-face)
                                (value :style "md" :icon "toy_brick" :face font-lock-builtin-face)
                                (variable :style "md" :icon "toy_brick_outline" :face font-lock-variable-name-face)
                                (t :style "md" :icon "code_tags" :face font-lock-variable-name-face)
                                ))
    :ensure t
    )

#+end_src

*** [[https://github.com/rainstormstudio/nerd-icons-dired][Dired]]

#+begin_src emacs-lisp

  (use-package nerd-icons-dired
    :vc (:url "https://github.com/rainstormstudio/nerd-icons-dired")
    :after nerd-icons
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode)
    )

#+end_src

*** Eshell
:PROPERTIES:
:CREDITS:  https://thanosapollo.org/posts/emacs-shells-video/
:END:

#+begin_src emacs-lisp

  (use-package esh-mode
    :defer t
    :config
    (defun thanos/eshell-git-info ()
  	"Return a string showing git information."
  	(when (eq (call-process "git" nil nil nil "rev-parse" "--is-inside-work-tree") 0)
  	  (let* ((branch-raw (shell-command-to-string "git rev-parse --abbrev-ref HEAD"))
  			 (branch (if (or (string-match-p "^fatal" branch-raw)
  							 (string-match-p "^error" branch-raw))
  						 "Unknown"
  					   (string-trim branch-raw))))
  		(concat (propertize "󰊢 " 'face 'nerd-icons-lred)
  				(propertize branch 'face 'nerd-icons-lred)))))
    (defun thanos/eshell-prompt-multiline ()
  	"Eshell Multiline Git prompt."
  	(let ((separator (propertize " | " 'face 'shadow))
  		  (dir (propertize (format "%s" (abbreviate-file-name (eshell/pwd))) 'face 'dired-directory))
  		  (git-info (thanos/eshell-git-info))
  		  (sign (if (= (user-uid) 0)
  					(propertize "\#" 'face 'default)
  				  (propertize (format "\n\nλ %s\n↳" user-login-name) 'face 'nerd-icons-lpurple))))
  	  (concat "\n" dir separator git-info sign " ")))
    :custom
    (eshell-banner-message "")
    (eshell-prompt-function 'thanos/eshell-prompt-multiline)
    )
#+end_src

*** Flymake

#+begin_src emacs-lisp

  (use-package emacs
    :custom
    (flymake-indicator-type 'margins)
    (flymake-margin-indicators-string '(
                                        (error "󰃤" compilation-error)
                                        (warning "" compilation-warning)
                                        (note "󰎚" compilation-info)
                                        ))
    )

#+end_src

*** Go

Use a Gopher for walrus operators (~:=~).

#+begin_src emacs-lisp

  (use-package go-ts-mode
    :after nerd-icons go-ts-mode
    :hook
    (go-ts-mode . prettify-symbols-mode)
    (go-ts-mode . (lambda ()
                    (push '(":=" . ?) prettify-symbols-alist)))
    )

#+end_src

*** Rust

Use Ferris for match arms.

#+begin_src emacs-lisp

  (use-package rust-ts-mode
    :after nerd-icons rust-ts-mode
    :hook
    (rust-ts-mode . prettify-symbols-mode)
    (rust-ts-mode . (lambda ()
                      (push '("=>" . ?) prettify-symbols-alist)))
    )

#+end_src

*** [[https://github.com/seagle0128/nerd-icons-ibuffer][iBuffer]]

#+begin_src emacs-lisp

  (use-package nerd-icons-ibuffer
    :vc (:url "https://github.com/seagle0128/nerd-icons-ibuffer")
    :after nerd-icons
    :ensure t
    :hook
    (ibuffer-mode . nerd-icons-ibuffer-mode)
    )

#+end_src

*** [[https://github.com/gekoke/magit-file-icons][Magit]]

#+begin_src emacs-lisp

  (use-package magit-file-icons
    :vc (:url "https://github.com/gekoke/magit-file-icons")
    :after nerd-icons magit
    :ensure t
    :hook
    (magit-mode . magit-file-icons-mode)
    )

#+end_src

** [[https://github.com/alphapapa/prism.el][Prism]]
:PROPERTIES:
:CUSTOM_ID: prism
:END:

#+begin_quote

Disperse Lisp forms (and other languages) into a spectrum of colors by depth.

#+end_quote


#+begin_src emacs-lisp

  (use-package prism
    :vc (:url "https://github.com/alphapapa/prism.el")
    :config
    (defun gs-101/prism-mode-lisp ()
      "Enable `prism-mode' in Lisp modes."
      (when (string-match-p "clojure.*-mode\\'" (symbol-name major-mode))
        (prism-mode))
      (when (string-match-p "lisp.*-mode\\'" (symbol-name major-mode))
        (prism-mode))
      (when (derived-mode-p 'scheme-mode)
        (prism-mode)))
    :ensure t
    :hook
    (prog-mode . gs-101/prism-mode-lisp)
    (python-base-mode . prism-whitespace-mode)
    )

#+end_src

*** Catppuccin Colors

#+begin_src emacs-lisp

  (use-package prism
    :after prism catppuccin-theme
    :config
    (defun prism-catppuccin-colors ()
      "Grab color definitions from catppuccin and use them to set prism's colors."
      (prism-set-colors
        :lightens '(0 5 10)
        :desaturations '(-2.5 0 2.5)
        :colors (-map #'catppuccin-get-color '(
                                               red
                                               peach
                                               yellow
                                               green
                                               sapphire
                                               lavender
                                               mauve
                                               ))))
    (prism-catppuccin-colors)
    )

#+end_src

**** Daemon Support

#+begin_src emacs-lisp

  (use-package prism
    :if (daemonp)
    :after prism catppuccin-theme
    :config
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                (prism-catppuccin-colors))))
    )

#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]]

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :vc (:url "https://github.com/Fanael/rainbow-delimiters")
    :config
    (defun gs-101/rainbow-delimiters-maybe ()
      "Enable `rainbow-delimiters-mode' only in non-lisp modes.

  This is because I find `prism-mode' better for these modes.

  Also disable in Python because I use `prism-whitespace-mode' there."
      (unless (or
               (string-match-p "clojure.*-mode\\'" (symbol-name major-mode))
               (string-match-p "lisp.*-mode\\'" (symbol-name major-mode))
               (derived-mode-p 'scheme-mode)
               (derived-mode-p 'python-base-mode))
        (rainbow-delimiters-mode)))
    :ensure t
    :hook
    (prog-mode . gs-101/rainbow-delimiters-maybe)
    )

#+end_src

** [[https://github.com/tumashu/posframe][posframe]]

#+begin_quote

Pop a posframe (just a child-frame) at point.

#+end_quote

#+begin_src emacs-lisp

  (use-package posframe
    :vc (:url "https://github.com/tumashu/posframe")
    :ensure t
    )

#+end_src

*** [[https://github.com/yanghaoxie/transient-posframe/pull/7#issuecomment-2538792470][Transient]]

#+begin_src emacs-lisp

  (use-package posframe
    :after transient
    :custom
    (transient-display-buffer-action
     (list
      (lambda (buffer _)
        (posframe-show
         buffer
         :poshandler #'posframe-poshandler-frame-center
         :min-width transient-minimal-frame-width ;; Use the same minimal width as transient, to avoid weird resizing
         :lines-truncate t ;; Truncate lines instead of wrapping them
         :internal-border-color (transient--prefix-color) ;; Use transient colors to indicate that the current frame is a transient
         :internal-border-width 1)
        (get-buffer-window transient--buffer t))))
    )

#+end_src

*** [[https://github.com/tumashu/vertico-posframe][Vertico]]

#+begin_src emacs-lisp

  (use-package vertico-posframe
    :vc (:url "https://github.com/tumashu/vertico-posframe")
    :after vertico
    :ensure t
    :custom
    (vertico-posframe-border-width 1)
    :config
    (vertico-posframe-mode)
    )

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'gs-ui)
#+end_src

* Local Variables

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle t t)
# End:
